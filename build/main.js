<<<<<<< ef40ee5f9eb3aa9f6d4c0334203198755ece2572
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "Result": 1,
  "Items": [
    {
      "TemplateId": "\"BADGE_BATTLE_ATTACK_WON\"",
      "Badge": {
        "BadgeType": "BADGE_BATTLE_ATTACK_WON",
        "BadgeRanks": 4,
        "Targets": "\"\\nd\\350\\007\""
      }
    },
    {
      "TemplateId": "\"BADGE_BATTLE_TRAINING_WON\"",
      "Badge": {
        "BadgeType": "BADGE_BATTLE_TRAINING_WON",
        "BadgeRanks": 4,
        "Targets": "\"\\nd\\350\\007\""
      }
    },
    {
      "TemplateId": "\"BADGE_BIG_MAGIKARP\"",
      "Badge": {
        "BadgeType": "BADGE_BIG_MAGIKARP",
        "BadgeRanks": 4,
        "Targets": "\"\\0032\\254\\002\""
      }
    },
    {
      "TemplateId": "\"BADGE_CAPTURE_TOTAL\"",
      "Badge": {
        "BadgeType": "BADGE_CAPTURE_TOTAL",
        "BadgeRanks": 4,
        "Targets": "\"\\036\\364\\003\\320\\017\""
      }
    },
    {
      "TemplateId": "\"BADGE_EVOLVED_TOTAL\"",
      "Badge": {
        "BadgeType": "BADGE_EVOLVED_TOTAL",
        "BadgeRanks": 4,
        "Targets": "\"\\003\\024\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_HATCHED_TOTAL\"",
      "Badge": {
        "BadgeType": "BADGE_HATCHED_TOTAL",
        "BadgeRanks": 4,
        "Targets": "\"\\nd\\364\\003\""
      }
    },
    {
      "TemplateId": "\"BADGE_PIKACHU\"",
      "Badge": {
        "BadgeType": "BADGE_PIKACHU",
        "BadgeRanks": 4,
        "Targets": "\"\\0032\\254\\002\""
      }
    },
    {
      "TemplateId": "\"BADGE_POKEDEX_ENTRIES\"",
      "Badge": {
        "BadgeType": "BADGE_POKEDEX_ENTRIES",
        "BadgeRanks": 4,
        "Targets": "\"\\0052d\""
      }
    },
    {
      "TemplateId": "\"BADGE_POKESTOPS_VISITED\"",
      "Badge": {
        "BadgeType": "BADGE_POKESTOPS_VISITED",
        "BadgeRanks": 4,
        "Targets": "\"d\\350\\007\\320\\017\""
      }
    },
    {
      "TemplateId": "\"BADGE_SMALL_RATTATA\"",
      "Badge": {
        "BadgeType": "BADGE_SMALL_RATTATA",
        "BadgeRanks": 4,
        "Targets": "\"\\0032\\254\\002\""
      }
    },
    {
      "TemplateId": "\"BADGE_TRAVEL_KM\"",
      "Badge": {
        "BadgeType": "BADGE_TRAVEL_KM",
        "BadgeRanks": 4,
        "Targets": "\"\\nd\\350\\007\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_BUG\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_BUG",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_DARK\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_DARK",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_DRAGON\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_DRAGON",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_ELECTRIC\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_ELECTRIC",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_FAIRY\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_FAIRY",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_FIGHTING\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_FIGHTING",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_FIRE\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_FIRE",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_FLYING\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_FLYING",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_GHOST\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_GHOST",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_GRASS\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_GRASS",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_GROUND\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_GROUND",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_ICE\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_ICE",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_NORMAL\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_NORMAL",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_POISON\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_POISON",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_PSYCHIC\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_PSYCHIC",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_ROCK\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_ROCK",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_STEEL\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_STEEL",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BADGE_TYPE_WATER\"",
      "Badge": {
        "BadgeType": "BADGE_TYPE_WATER",
        "BadgeRanks": 4,
        "Targets": "\"\\n2\\310\\001\""
      }
    },
    {
      "TemplateId": "\"BATTLE_SETTINGS\"",
      "BattleSettings": {
        "RetargetSeconds": 0.5,
        "EnemyAttackInterval": 1.5,
        "AttackServerInterval": 5,
        "RoundDurationSeconds": 99,
        "BonusTimePerAllySeconds": 10,
        "MaximumAttackersPerBattle": 20,
        "SameTypeAttackBonusMultiplier": 1.25,
        "MaximumEnergy": 100,
        "EnergyDeltaPerHealthLost": 0.5,
        "DodgeDurationMs": 500,
        "MinimumPlayerLevel": 5,
        "SwapDurationMs": 1000
      }
    },
    {
      "TemplateId": "\"ENCOUNTER_SETTINGS\"",
      "EncounterSettings": {
        "SpinBonusThreshold": 0.5,
        "ExcellentThrowThreshold": 1.7,
        "GreatThrowThreshold": 1.3,
        "NiceThrowThreshold": 1,
        "MilestoneThreshold": 100
      }
    },
    {
      "TemplateId": "\"GYM_LEVEL_SETTINGS\"",
      "GymLevel": {
        "RequiredExp": "\"\\000\\320\\017\\240\\037\\300>\\340]\\200}\\240\\234\\001\\260\\352\\001\\300\\270\\002\\320\\206\\003\"",
        "LeaderSlots": "\"\\001\\001\\001\\002\\002\\002\\003\\003\\003\\004\"",
        "TrainerSlots": "\"\\000\\001\\002\\002\\003\\004\\004\\005\\006\\006\""
      }
    },
    {
      "TemplateId": "\"IAP_SETTINGS\"",
      "IapSettings": {
        "DailyDefenderBonusPerPokemon": "\"\\364\\003\\n\"",
        "DailyDefenderBonusMaxDefenders": 10,
        "DailyDefenderBonusCurrency": "\"POKECOIN\"",
        "MinTimeBetweenClaimsMs": 75600000,
        "DailyDefenderBonusEnabled": true
      }
    },
    {
      "TemplateId": "\"ITEM_BLUK_BERRY\"",
      "Item": {
        "UniqueId": 702,
        "ItemType": "ITEM_TYPE_FOOD",
        "Category": "ITEM_CATEGORY_FOOD"
      }
    },
    {
      "TemplateId": "\"ITEM_GREAT_BALL\"",
      "Item": {
        "UniqueId": "ITEM_GREAT_BALL",
        "ItemType": "ITEM_TYPE_POKEBALL",
        "Category": "ITEM_CATEGORY_POKEBALL"
      }
    },
    {
      "TemplateId": "\"ITEM_HYPER_POTION\"",
      "Item": {
        "UniqueId": 103,
        "ItemType": "ITEM_TYPE_POTION",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Potion": {
          "StaAmount": 200
        }
      }
    },
    {
      "TemplateId": "\"ITEM_INCENSE_ORDINARY\"",
      "Item": {
        "UniqueId": 401,
        "ItemType": "ITEM_TYPE_INCENSE",
        "Category": "ITEM_CATEGORY_INCENSE",
        "Incense": {
          "IncenseLifetimeSeconds": 1800,
          "StandingTimeBetweenEncountersSec": 300,
          "MovingTimeBetweenEncounterSec": 60,
          "DistanceRequiredForShorterIntervalMeters": 200
        }
      }
    },
    {
      "TemplateId": "\"ITEM_INCUBATOR_BASIC\"",
      "Item": {
        "UniqueId": 902,
        "ItemType": "ITEM_TYPE_INCUBATOR",
        "Category": "ITEM_CATEGORY_INCUBATOR",
        "EggIncubator": {
          "IncubatorType": "INCUBATOR_DISTANCE",
          "Uses": 3,
          "DistanceMultiplier": 1
        }
      }
    },
    {
      "TemplateId": "\"ITEM_INCUBATOR_BASIC_UNLIMITED\"",
      "Item": {
        "UniqueId": 901,
        "ItemType": "ITEM_TYPE_INCUBATOR",
        "Category": "ITEM_CATEGORY_INCUBATOR",
        "EggIncubator": {
          "IncubatorType": "INCUBATOR_DISTANCE",
          "DistanceMultiplier": 1
        }
      }
    },
    {
      "TemplateId": "\"ITEM_ITEM_STORAGE_UPGRADE\"",
      "Item": {
        "UniqueId": 1002,
        "ItemType": "ITEM_TYPE_INVENTORY_UPGRADE",
        "Category": "ITEM_CATEGORY_INVENTORY_UPGRADE",
        "InventoryUpgrade": {
          "AdditionalStorage": 50,
          "UpgradeType": "INCREASE_ITEM_STORAGE"
        }
      }
    },
    {
      "TemplateId": "\"ITEM_LUCKY_EGG\"",
      "Item": {
        "UniqueId": 301,
        "ItemType": "ITEM_TYPE_XP_BOOST",
        "Category": "ITEM_CATEGORY_XP_BOOST",
        "XpBoost": {
          "XpMultiplier": 2,
          "BoostDurationMs": 1800000
        }
      }
    },
    {
      "TemplateId": "\"ITEM_MASTER_BALL\"",
      "Item": {
        "UniqueId": "ITEM_MASTER_BALL",
        "ItemType": "ITEM_TYPE_POKEBALL",
        "Category": "ITEM_CATEGORY_POKEBALL"
      }
    },
    {
      "TemplateId": "\"ITEM_MAX_POTION\"",
      "Item": {
        "UniqueId": 104,
        "ItemType": "ITEM_TYPE_POTION",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Potion": {
          "StaPercent": 1
        }
      }
    },
    {
      "TemplateId": "\"ITEM_MAX_REVIVE\"",
      "Item": {
        "UniqueId": 202,
        "ItemType": "ITEM_TYPE_REVIVE",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Revive": {
          "StaPercent": 1
        }
      }
    },
    {
      "TemplateId": "\"ITEM_NANAB_BERRY\"",
      "Item": {
        "UniqueId": 703,
        "ItemType": "ITEM_TYPE_FOOD",
        "Category": "ITEM_CATEGORY_FOOD"
      }
    },
    {
      "TemplateId": "\"ITEM_PINAP_BERRY\"",
      "Item": {
        "UniqueId": 705,
        "ItemType": "ITEM_TYPE_FOOD",
        "Category": "ITEM_CATEGORY_FOOD"
      }
    },
    {
      "TemplateId": "\"ITEM_POKEMON_STORAGE_UPGRADE\"",
      "Item": {
        "UniqueId": 1001,
        "ItemType": "ITEM_TYPE_INVENTORY_UPGRADE",
        "Category": "ITEM_CATEGORY_INVENTORY_UPGRADE",
        "InventoryUpgrade": {
          "AdditionalStorage": 50,
          "UpgradeType": "INCREASE_POKEMON_STORAGE"
        }
      }
    },
    {
      "TemplateId": "\"ITEM_POKE_BALL\"",
      "Item": {
        "UniqueId": "ITEM_POKE_BALL",
        "ItemType": "ITEM_TYPE_POKEBALL",
        "Category": "ITEM_CATEGORY_POKEBALL"
      }
    },
    {
      "TemplateId": "\"ITEM_POTION\"",
      "Item": {
        "UniqueId": 101,
        "ItemType": "ITEM_TYPE_POTION",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Potion": {
          "StaAmount": 20
        }
      }
    },
    {
      "TemplateId": "\"ITEM_RAZZ_BERRY\"",
      "Item": {
        "UniqueId": 701,
        "ItemType": "ITEM_TYPE_FOOD",
        "Category": "ITEM_CATEGORY_FOOD"
      }
    },
    {
      "TemplateId": "\"ITEM_REVIVE\"",
      "Item": {
        "UniqueId": 201,
        "ItemType": "ITEM_TYPE_REVIVE",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Revive": {
          "StaPercent": 0.5
        }
      }
    },
    {
      "TemplateId": "\"ITEM_SPECIAL_CAMERA\"",
      "Item": {
        "UniqueId": 801,
        "ItemType": "ITEM_TYPE_CAMERA",
        "Category": "ITEM_CATEGORY_CAMERA"
      }
    },
    {
      "TemplateId": "\"ITEM_SUPER_POTION\"",
      "Item": {
        "UniqueId": 102,
        "ItemType": "ITEM_TYPE_POTION",
        "Category": "ITEM_CATEGORY_MEDICINE",
        "Potion": {
          "StaAmount": 50
        }
      }
    },
    {
      "TemplateId": "\"ITEM_TROY_DISK\"",
      "Item": {
        "UniqueId": 501,
        "ItemType": "ITEM_TYPE_DISK",
        "Category": "ITEM_CATEGORY_DISK"
      }
    },
    {
      "TemplateId": "\"ITEM_ULTRA_BALL\"",
      "Item": {
        "UniqueId": "ITEM_ULTRA_BALL",
        "ItemType": "ITEM_TYPE_POKEBALL",
        "Category": "ITEM_CATEGORY_POKEBALL"
      }
    },
    {
      "TemplateId": "\"ITEM_WEPAR_BERRY\"",
      "Item": {
        "UniqueId": 704,
        "ItemType": "ITEM_TYPE_FOOD",
        "Category": "ITEM_CATEGORY_FOOD"
      }
    },
    {
      "TemplateId": "\"ITEM_X_ATTACK\"",
      "Item": {
        "UniqueId": 602,
        "ItemType": "ITEM_TYPE_BATTLE",
        "Category": "ITEM_CATEGORY_BOOST"
      }
    },
    {
      "TemplateId": "\"ITEM_X_DEFENSE\"",
      "Item": {
        "UniqueId": 603,
        "ItemType": "ITEM_TYPE_BATTLE",
        "Category": "ITEM_CATEGORY_BOOST"
      }
    },
    {
      "TemplateId": "\"ITEM_X_MIRACLE\"",
      "Item": {
        "UniqueId": 604,
        "ItemType": "ITEM_TYPE_BATTLE",
        "Category": "ITEM_CATEGORY_BOOST"
      }
    },
    {
      "TemplateId": "\"PLAYER_LEVEL_SETTINGS\"",
      "PlayerLevel": {
        "RankNum": "\"\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\"",
        "RequiredExp": "\"\\000\\350\\007\\270\\027\\360.\\220N\\230u\\210\\244\\001\\340\\332\\001\\240\\231\\002\\310\\337\\002\\330\\255\\003\\350\\373\\003\\370\\311\\004\\210\\230\\005\\240\\215\\006\\300\\251\\007\\340\\305\\010\\200\\342\\t\\250\\245\\013\\320\\350\\014\\240\\357\\017\\230\\271\\024\\270\\306\\032\\200\\227\\\"\\360\\252+\\240\\3676\\340\\221C\\360\\262R\\320\\332d\\200\\211z\\240\\313\\230\\001\\300\\215\\267\\001\\360\\360\\344\\001\\260\\365\\241\\002\\200\\233\\356\\002\\340\\341\\311\\003\\340\\352\\303\\004\\200\\266\\334\\005\\300\\303\\223\\007\\200\\332\\304\\t\"",
        "CpMultiplier": "\"\\022\\203\\300=4d*>\\371\\350\\\\>\\275\\355\\202>\\242\\233\\224>\\230e\\244>\\001\\314\\262>\\341\\036\\300>\\025\\224\\314>\\354Q\\330>\\376\\336\\342>\\351\\363\\354>i\\237\\366>r\\355\\377>\\356s\\004?r\\313\\010?\\300\\000\\r?\\323\\026\\021?;\\020\\025?5\\357\\030?W\\266\\034?\\264f ?\\325\\001$?\\030\\211\\'?\\271\\375*?\\323`.?f\\2631?]\\3664?\\212*8?\\261P;?v\\336<?\\374h>?W\\360??\\233tA?\\331\\365B?$tD?\\215\\357E?#hG?\\370\\335H?\\032QJ?\"",
        "MaxEggPlayerLevel": 20,
        "MaxEncounterPlayerLevel": 30
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_BUG\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\315\\314L?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\"",
        "AttackType": "POKEMON_TYPE_BUG"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_DARK\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\"",
        "AttackType": "POKEMON_TYPE_DARK"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_DRAGON\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\"",
        "AttackType": "POKEMON_TYPE_DRAGON"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_ELECTRIC\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_ELECTRIC"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_FAIRY\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\240?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_FAIRY"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_FIGHTING\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\"",
        "AttackType": "POKEMON_TYPE_FIGHTING"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_FIRE\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_FIRE"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_FLYING\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_FLYING"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_GHOST\"",
      "TypeEffective": {
        "AttackScalar": "\"\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_GHOST"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_GRASS\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\240?\\000\\000\\240?\\315\\314L?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\240?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_GRASS"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_GROUND\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\000\\000\\200?\\000\\000\\240?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_GROUND"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_ICE\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_ICE"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_NORMAL\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_NORMAL"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_POISON\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\315\\314L?\\000\\000\\200?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\"",
        "AttackType": "POKEMON_TYPE_POISON"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_PSYCHIC\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_PSYCHIC"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_ROCK\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\315\\314L?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_ROCK"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_STEEL\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\315\\314L?\\315\\314L?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\"",
        "AttackType": "POKEMON_TYPE_STEEL"
      }
    },
    {
      "TemplateId": "\"POKEMON_TYPE_WATER\"",
      "TypeEffective": {
        "AttackScalar": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\000\\000\\240?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\240?\\315\\314L?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\315\\314L?\\000\\000\\200?\\000\\000\\200?\"",
        "AttackType": "POKEMON_TYPE_WATER"
      }
    },
    {
      "TemplateId": "\"POKEMON_UPGRADE_SETTINGS\"",
      "PokemonUpgrades": {
        "UpgradesPerLevel": 2,
        "AllowedLevelsAbovePlayer": 2,
        "CandyCost": "\"\\001\\001\\001\\001\\001\\001\\001\\001\\001\\001\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\003\\003\\003\\003\\003\\004\\004\\004\\004\\004\\006\\006\\010\\010\\n\\n\\014\\014\\017\\017\"",
        "StardustCost": "\"\\310\\001\\310\\001\\220\\003\\220\\003\\330\\004\\330\\004\\240\\006\\240\\006\\350\\007\\350\\007\\224\\n\\224\\n\\300\\014\\300\\014\\354\\016\\354\\016\\230\\021\\230\\021\\304\\023\\304\\023\\270\\027\\270\\027\\254\\033\\254\\033\\240\\037\\240\\037\\224#\\224#\\210\\'\\210\\'\\360.\\360.\\3306\\3306\\300>\\300>\\250F\\250F\\220N\\220N\""
      }
    },
    {
      "TemplateId": "\"V0001_POKEMON_BULBASAUR\"",
      "Pokemon": {
        "UniqueId": "V0001_POKEMON_BULBASAUR",
        "ModelScale": 1.09,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.5723,
          "CylRadiusM": 0.3815,
          "CylHeightM": 0.763,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.3815,
          "CollisionHeightM": 0.654,
          "CollisionHeadRadiusM": 0.2725,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.15,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 126,
          "BaseDefense": 126
        },
        "QuickMoves": "\"\\326\\001\\335\\001\"",
        "CinematicMoves": "\"Z;v\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\0006\\253\\n@33\\263?\\277\\273\\273?\"",
        "Evolution": "\"\\002\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 6.9,
        "HeightStdDev": 0.0875,
        "WeightStdDev": 0.8625,
        "FamilyId": "V0001_FAMILY_BULBASAUR",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0002_POKEMON_IVYSAUR\"",
      "Pokemon": {
        "UniqueId": "V0002_POKEMON_IVYSAUR",
        "ModelScale": 0.85,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.765,
          "CylRadiusM": 0.51,
          "CylHeightM": 1.0625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.31875,
          "CollisionHeightM": 0.6375,
          "CollisionHeadRadiusM": 0.255,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1.5,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 156,
          "BaseDefense": 158
        },
        "QuickMoves": "\"\\327\\001\\326\\001\"",
        "CinematicMoves": "\"Ztv\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?6\\253\\n@\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\333\\335\\335?\"",
        "Evolution": "\"\\003\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 13,
        "ParentId": "V0001_POKEMON_BULBASAUR",
        "HeightStdDev": 0.125,
        "WeightStdDev": 1.625,
        "FamilyId": "V0001_FAMILY_BULBASAUR",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0003_POKEMON_VENUSAUR\"",
      "Pokemon": {
        "UniqueId": "V0003_POKEMON_VENUSAUR",
        "ModelScale": 0.69,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 1.1385,
          "CylRadiusM": 0.759,
          "CylHeightM": 1.2075,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.04,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.759,
          "CollisionHeightM": 1.035,
          "CollisionHeadRadiusM": 0.3795,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 1.25,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 198,
          "BaseDefense": 200
        },
        "QuickMoves": "\"\\327\\001\\326\\001\"",
        "CinematicMoves": "\"Z/t\"",
        "AnimTime": "\"j\\336\\035@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\375\\207\\010@\\000\\000\\000@FD\\004@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2,
        "PokedexWeightKg": 100,
        "ParentId": "V0002_POKEMON_IVYSAUR",
        "HeightStdDev": 0.25,
        "WeightStdDev": 12.5,
        "FamilyId": "V0001_FAMILY_BULBASAUR"
      }
    },
    {
      "TemplateId": "\"V0004_POKEMON_CHARMANDER\"",
      "Pokemon": {
        "UniqueId": "V0004_POKEMON_CHARMANDER",
        "ModelScale": 1.25,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.4688,
          "CylRadiusM": 0.3125,
          "CylHeightM": 0.75,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.15625,
          "CollisionHeightM": 0.46875,
          "CollisionHeadRadiusM": 0.15625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1.25,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 78,
          "BaseAttack": 128,
          "BaseDefense": 108
        },
        "QuickMoves": "\"\\321\\001\\334\\001\"",
        "CinematicMoves": "\"ef\\030\"",
        "AnimTime": "\"\\375\\207\\010@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\375\\207\\010@mV\\225?\\250\\252\\252?\"",
        "Evolution": "\"\\005\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 8.5,
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.0625,
        "FamilyId": "V0010_FAMILY_CATERPIE",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0005_POKEMON_CHARMELEON\"",
      "Pokemon": {
        "UniqueId": "V0005_POKEMON_CHARMELEON",
        "ModelScale": 1.03,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.6953,
          "CylRadiusM": 0.4635,
          "CylHeightM": 1.133,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.2575,
          "CollisionHeightM": 0.7725,
          "CollisionHeadRadiusM": 0.23175,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 116,
          "BaseAttack": 160,
          "BaseDefense": 140
        },
        "QuickMoves": "\"\\321\\001\\334\\001\"",
        "CinematicMoves": "\"sf\\030\"",
        "AnimTime": "\"\\007\\360\\356?\\332\\254*?\\223\\251\\352?\\000\\000\\300?VU\\325@\\312T\\025@\\000\\000\\000@%\\\"\\\"@\"",
        "Evolution": "\"\\006\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 19,
        "ParentId": "V0004_POKEMON_CHARMANDER",
        "HeightStdDev": 0.1375,
        "WeightStdDev": 2.375,
        "FamilyId": "V0010_FAMILY_CATERPIE",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0006_POKEMON_CHARIZARD\"",
      "Pokemon": {
        "UniqueId": "V0006_POKEMON_CHARIZARD",
        "ModelScale": 0.81,
        "Type1": "POKEMON_TYPE_FIRE",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 1.215,
          "CylRadiusM": 0.81,
          "CylHeightM": 1.377,
          "CylGroundM": 0.405,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.04,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.405,
          "CollisionHeightM": 1.0125,
          "CollisionHeadRadiusM": 0.2025,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 11,
          "JumpTimeS": 1,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 156,
          "BaseAttack": 212,
          "BaseDefense": 182
        },
        "QuickMoves": "\"\\321\\001\\322\\001\"",
        "CinematicMoves": "\"gS\\030\"",
        "AnimTime": "\"\\315\\314\\014@\\332\\254*?mV\\325?\\r\\340]?VU\\325@\\000\\000\\000@\\315\\314\\314?\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 90.5,
        "ParentId": "V0005_POKEMON_CHARMELEON",
        "HeightStdDev": 0.2125,
        "WeightStdDev": 11.3125,
        "FamilyId": "V0010_FAMILY_CATERPIE"
      }
    },
    {
      "TemplateId": "\"V0007_POKEMON_SQUIRTLE\"",
      "Pokemon": {
        "UniqueId": "V0007_POKEMON_SQUIRTLE",
        "ModelScale": 1.53,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5738,
          "CylRadiusM": 0.3825,
          "CylHeightM": 0.64259988,
          "ShoulderModeScale": 0.1
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.2295,
          "CollisionHeightM": 0.3825,
          "CollisionHeadRadiusM": 0.19125,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 88,
          "BaseAttack": 112,
          "BaseDefense": 142
        },
        "QuickMoves": "\"\\355\\001\\335\\001\"",
        "CinematicMoves": "\"9:i\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\0006\\253\\n@\\000\\000\\200?\\250\\252\\252?\"",
        "Evolution": "\"\\010\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 9,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 1.125,
        "FamilyId": "V0019_FAMILY_RATTATA",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0008_POKEMON_WARTORTLE\"",
      "Pokemon": {
        "UniqueId": "V0008_POKEMON_WARTORTLE",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5625,
          "CylRadiusM": 0.375,
          "CylHeightM": 1,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.625,
          "CollisionHeadRadiusM": 0.1875,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1.25,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 118,
          "BaseAttack": 144,
          "BaseDefense": 176
        },
        "QuickMoves": "\"\\346\\001\\312\\001\"",
        "CinematicMoves": "\"9\\'k\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000ff\\346?\\240\\211\\210?\\016\\021\\221?\"",
        "Evolution": "\"\\t\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 22.5,
        "ParentId": "V0007_POKEMON_SQUIRTLE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 2.8125,
        "FamilyId": "V0019_FAMILY_RATTATA",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0009_POKEMON_BLASTOISE\"",
      "Pokemon": {
        "UniqueId": "V0009_POKEMON_BLASTOISE",
        "ModelScale": 0.94,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.846,
          "CylRadiusM": 0.564,
          "CylHeightM": 1.2925,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.04,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.564,
          "CollisionHeightM": 1.175,
          "CollisionHeadRadiusM": 0.282,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.25,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 158,
          "BaseAttack": 186,
          "BaseDefense": 222
        },
        "QuickMoves": "\"\\346\\001\\312\\001\"",
        "CinematicMoves": "\"$\\'k\"",
        "AnimTime": "\"\\375\\207\\010@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@6\\253*@\\250\\252\\252?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 85.5,
        "ParentId": "V0008_POKEMON_WARTORTLE",
        "HeightStdDev": 0.2,
        "WeightStdDev": 10.6875,
        "FamilyId": "V0019_FAMILY_RATTATA"
      }
    },
    {
      "TemplateId": "\"V0010_POKEMON_CATERPIE\"",
      "Pokemon": {
        "UniqueId": "V0010_POKEMON_CATERPIE",
        "ModelScale": 2.04,
        "Type1": "POKEMON_TYPE_BUG",
        "Camera": {
          "DiskRadiusM": 0.459,
          "CylRadiusM": 0.306,
          "CylHeightM": 0.408
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.2,
          "CollisionRadiusM": 0.102,
          "CollisionHeightM": 0.306,
          "CollisionHeadRadiusM": 0.153,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 62,
          "BaseDefense": 66
        },
        "QuickMoves": "\"\\311\\001\\335\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\223\\251\\352?mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"\\013\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 2.9,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.3625,
        "FamilyId": "V0025_FAMILY_PIKACHU",
        "CandyToEvolve": 12
      }
    },
    {
      "TemplateId": "\"V0011_POKEMON_METAPOD\"",
      "Pokemon": {
        "UniqueId": "V0011_POKEMON_METAPOD",
        "ModelScale": 1.17,
        "Type1": "POKEMON_TYPE_BUG",
        "Camera": {
          "DiskRadiusM": 0.5265,
          "CylRadiusM": 0.351,
          "CylHeightM": 0.6435,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.117,
          "CollisionHeightM": 0.6435,
          "CollisionHeadRadiusM": 0.1755,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3600,
          "JumpTimeS": 1,
          "AttackTimerS": 3600
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 56,
          "BaseDefense": 86
        },
        "QuickMoves": "\"\\311\\001\\335\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\223\\251\\352?mV\\325?\\000\\000\\000\\000\\240\\211\\310?\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"\\014\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 9.9,
        "ParentId": "V0010_POKEMON_CATERPIE",
        "HeightStdDev": 0.0875,
        "WeightStdDev": 1.2375,
        "FamilyId": "V0025_FAMILY_PIKACHU",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0012_POKEMON_BUTTERFREE\"",
      "Pokemon": {
        "UniqueId": "V0012_POKEMON_BUTTERFREE",
        "ModelScale": 1.11,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.999,
          "CylRadiusM": 0.666,
          "CylHeightM": 1.11,
          "CylGroundM": 0.555,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.1665,
          "CollisionHeightM": 0.555,
          "CollisionHeadRadiusM": 0.1776,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 144,
          "BaseDefense": 144
        },
        "QuickMoves": "\"\\311\\001\\353\\001\"",
        "CinematicMoves": "\"1lc\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?\\306\\334\\335?\\332\\254*?\\000\\000\\000\\000j\\336\\035@\\375\\207\\010@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 32,
        "ParentId": "V0011_POKEMON_METAPOD",
        "HeightStdDev": 0.1375,
        "WeightStdDev": 4,
        "FamilyId": "V0025_FAMILY_PIKACHU"
      }
    },
    {
      "TemplateId": "\"V0013_MOVE_WRAP\"",
      "Move": {
        "UniqueId": "V0013_MOVE_WRAP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"wrap\"",
        "DurationMs": 4000,
        "DamageWindowStartMs": 2800,
        "DamageWindowEndMs": 3400,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0013_POKEMON_WEEDLE\"",
      "Pokemon": {
        "UniqueId": "V0013_POKEMON_WEEDLE",
        "ModelScale": 2.09,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.3135,
          "CylRadiusM": 0.209,
          "CylHeightM": 0.418,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.2,
          "CollisionRadiusM": 0.1045,
          "CollisionHeightM": 0.209,
          "CollisionHeadRadiusM": 0.15675,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.25,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 68,
          "BaseDefense": 64
        },
        "QuickMoves": "\"\\311\\001\\354\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"\\016\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 3.2,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.4,
        "FamilyId": "V0032_FAMILY_NIDORAN",
        "CandyToEvolve": 12
      }
    },
    {
      "TemplateId": "\"V0014_MOVE_HYPER_BEAM\"",
      "Move": {
        "UniqueId": "V0014_MOVE_HYPER_BEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 70,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.15,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"hyper_beam\"",
        "DurationMs": 5000,
        "DamageWindowStartMs": 4000,
        "DamageWindowEndMs": 4800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0014_POKEMON_KAKUNA\"",
      "Pokemon": {
        "UniqueId": "V0014_POKEMON_KAKUNA",
        "ModelScale": 1.25,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.375,
          "CylRadiusM": 0.25,
          "CylHeightM": 0.75,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.75,
          "CollisionHeadRadiusM": 0.125,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3600,
          "AttackTimerS": 3600
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 62,
          "BaseDefense": 82
        },
        "QuickMoves": "\"\\311\\001\\354\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?\\000\\000\\000\\000mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\000\\000 @\\000\\000\\000\\000\"",
        "Evolution": "\"\\017\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 10,
        "ParentId": "V0013_POKEMON_WEEDLE",
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.25,
        "FamilyId": "V0032_FAMILY_NIDORAN",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0015_POKEMON_BEEDRILL\"",
      "Pokemon": {
        "UniqueId": "V0015_POKEMON_BEEDRILL",
        "ModelScale": 0.77,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.693,
          "CylRadiusM": 0.462,
          "CylHeightM": 0.77,
          "CylGroundM": 0.385,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.308,
          "CollisionHeightM": 0.5775,
          "CollisionHeadRadiusM": 0.231,
          "MovementType": "POKEMON_ENC_MOVEMENT_ELECTRIC",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 144,
          "BaseDefense": 130
        },
        "QuickMoves": "\"\\311\\001\\340\\001\"",
        "CinematicMoves": "\"Z-d\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\332\\254*?\\315\\314L>ff\\346?\\223\\251\\252?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 29.5,
        "ParentId": "V0014_POKEMON_KAKUNA",
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.6875,
        "FamilyId": "V0032_FAMILY_NIDORAN"
      }
    },
    {
      "TemplateId": "\"V0016_MOVE_DARK_PULSE\"",
      "Move": {
        "UniqueId": "V0016_MOVE_DARK_PULSE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_DARK",
        "Power": 45,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dark_pulse\"",
        "DurationMs": 3500,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 3400,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0016_POKEMON_PIDGEY\"",
      "Pokemon": {
        "UniqueId": "V0016_POKEMON_PIDGEY",
        "ModelScale": 1.68,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.378,
          "CylRadiusM": 0.252,
          "CylHeightM": 0.504,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.2,
          "CollisionRadiusM": 0.1344,
          "CollisionHeightM": 0.252,
          "CollisionHeadRadiusM": 0.126,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.4,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 94,
          "BaseDefense": 90
        },
        "QuickMoves": "\"\\333\\001\\335\\001\"",
        "CinematicMoves": "\"P-y\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\223\\251\\352?\\315\\314L?\\250\\252\\252?\"",
        "Evolution": "\"\\021\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 1.8,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.225,
        "FamilyId": "V0039_FAMILY_JIGGLYPUFF",
        "CandyToEvolve": 12
      }
    },
    {
      "TemplateId": "\"V0017_POKEMON_PIDGEOTTO\"",
      "Pokemon": {
        "UniqueId": "V0017_POKEMON_PIDGEOTTO",
        "ModelScale": 0.79,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.711,
          "CylRadiusM": 0.474,
          "CylHeightM": 0.9875,
          "CylGroundM": 0.395,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.316,
          "CollisionHeightM": 0.69125,
          "CollisionHeadRadiusM": 0.237,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 126,
          "BaseAttack": 126,
          "BaseDefense": 122
        },
        "QuickMoves": "\"\\322\\001\\357\\001\"",
        "CinematicMoves": "\"P-y\"",
        "AnimTime": "\"6\\253*@\\332\\254*?\\000\\000\\000@\\315\\314L?\\000\\000\\000\\000\\000\\000\\000@\\332\\254*?\\000\\000\\000\\000\"",
        "Evolution": "\"\\022\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 30,
        "ParentId": "V0016_POKEMON_PIDGEY",
        "HeightStdDev": 0.1375,
        "WeightStdDev": 3.75,
        "FamilyId": "V0039_FAMILY_JIGGLYPUFF",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0018_MOVE_SLUDGE\"",
      "Move": {
        "UniqueId": "V0018_MOVE_SLUDGE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"sludge\"",
        "DurationMs": 2600,
        "DamageWindowStartMs": 1850,
        "DamageWindowEndMs": 2350,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0018_POKEMON_PIDGEOT\"",
      "Pokemon": {
        "UniqueId": "V0018_POKEMON_PIDGEOT",
        "ModelScale": 0.72,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 1.296,
          "CylRadiusM": 0.864,
          "CylHeightM": 1.44,
          "CylGroundM": 0.36,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.36,
          "CollisionHeightM": 1.008,
          "CollisionHeadRadiusM": 0.216,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 166,
          "BaseAttack": 170,
          "BaseDefense": 166
        },
        "QuickMoves": "\"\\322\\001\\357\\001\"",
        "CinematicMoves": "\"z-y\"",
        "AnimTime": "\"\\320D\\004@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@ff\\346?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 39.5,
        "ParentId": "V0017_POKEMON_PIDGEOTTO",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 4.9375,
        "FamilyId": "V0039_FAMILY_JIGGLYPUFF"
      }
    },
    {
      "TemplateId": "\"V0019_POKEMON_RATTATA\"",
      "Pokemon": {
        "UniqueId": "V0019_POKEMON_RATTATA",
        "ModelScale": 1.26,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.378,
          "CylRadiusM": 0.252,
          "CylHeightM": 0.378,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.2,
          "CollisionRadiusM": 0.189,
          "CollisionHeightM": 0.252,
          "CollisionHeadRadiusM": 0.126,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 0.9,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 92,
          "BaseDefense": 86
        },
        "QuickMoves": "\"\\335\\001\\333\\001\"",
        "CinematicMoves": "\"\\032\\201\\001\\203\\001\"",
        "AnimTime": "\"33\\363?\\332\\254*?ff\\346?:#\\342?\\000\\000\\000\\000\\232\\231\\031@\\r\\340]?\\000\\000\\000\\000\"",
        "Evolution": "\"\\024\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 3.5,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.4375,
        "FamilyId": "V0046_FAMILY_PARAS",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0020_MOVE_VICE_GRIP\"",
      "Move": {
        "UniqueId": "V0020_MOVE_VICE_GRIP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.055,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"vice_grip\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1850,
        "DamageWindowEndMs": 2100,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0020_POKEMON_RATICATE\"",
      "Pokemon": {
        "UniqueId": "V0020_POKEMON_RATICATE",
        "ModelScale": 1.17,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.7898,
          "CylRadiusM": 0.5265,
          "CylHeightM": 0.936,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.2925,
          "CollisionHeightM": 0.585,
          "CollisionHeadRadiusM": 0.26325,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 146,
          "BaseDefense": 150
        },
        "QuickMoves": "\"\\312\\001\\333\\001\"",
        "CinematicMoves": "\"\\032\\201\\001\\016\"",
        "AnimTime": "\"mV\\325?\\332\\254*?\\306\\334\\335?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\320D\\004@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 18.5,
        "ParentId": "V0019_POKEMON_RATTATA",
        "HeightStdDev": 0.0875,
        "WeightStdDev": 2.3125,
        "FamilyId": "V0046_FAMILY_PARAS"
      }
    },
    {
      "TemplateId": "\"V0021_MOVE_FLAME_WHEEL\"",
      "Move": {
        "UniqueId": "V0021_MOVE_FLAME_WHEEL",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"flame_wheel\"",
        "DurationMs": 4600,
        "DamageWindowStartMs": 2700,
        "DamageWindowEndMs": 3200,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0021_POKEMON_SPEAROW\"",
      "Pokemon": {
        "UniqueId": "V0021_POKEMON_SPEAROW",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.444,
          "CylRadiusM": 0.296,
          "CylHeightM": 0.518,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.148,
          "CollisionHeightM": 0.2664,
          "CollisionHeadRadiusM": 0.148,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.25,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 102,
          "BaseDefense": 78
        },
        "QuickMoves": "\"\\323\\001\\333\\001\"",
        "CinematicMoves": "\"-&P\"",
        "AnimTime": "\"-C\\304?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\312T\\025@\\315\\314L?\\000\\000\\000\\000\"",
        "Evolution": "\"\\026\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 2,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.25,
        "FamilyId": "V0050_FAMILY_DIGLETT",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0022_MOVE_MEGAHORN\"",
      "Move": {
        "UniqueId": "V0022_MOVE_MEGAHORN",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 55,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.12,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"megahorn\"",
        "DurationMs": 3200,
        "DamageWindowStartMs": 2400,
        "DamageWindowEndMs": 2700,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0022_POKEMON_FEAROW\"",
      "Pokemon": {
        "UniqueId": "V0022_POKEMON_FEAROW",
        "ModelScale": 0.84,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 1.26,
          "CylRadiusM": 0.504,
          "CylHeightM": 1.05,
          "CylGroundM": 0.42,
          "ShoulderModeScale": 0.375
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.252,
          "CollisionHeightM": 0.63,
          "CollisionHeadRadiusM": 0.126,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 168,
          "BaseDefense": 146
        },
        "QuickMoves": "\"\\323\\001\\357\\001\"",
        "CinematicMoves": "\"-.P\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?&SU?\\000\\000\\000\\000\\312T\\025@mV\\325?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 38,
        "ParentId": "V0021_POKEMON_SPEAROW",
        "HeightStdDev": 0.15,
        "WeightStdDev": 4.75,
        "FamilyId": "V0050_FAMILY_DIGLETT"
      }
    },
    {
      "TemplateId": "\"V0023_POKEMON_EKANS\"",
      "Pokemon": {
        "UniqueId": "V0023_POKEMON_EKANS",
        "ModelScale": 1.73,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.6488,
          "CylRadiusM": 0.4325,
          "CylHeightM": 0.6055,
          "ShoulderModeScale": 0.375
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.2595,
          "CollisionHeightM": 0.346,
          "CollisionHeadRadiusM": 0.1384,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1.25,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 112,
          "BaseDefense": 112
        },
        "QuickMoves": "\"\\354\\001\\341\\001\"",
        "CinematicMoves": "\"\\rZ\\\\\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\315\\314\\014@\\315\\314\\314?\\000\\000\\000\\000\"",
        "Evolution": "\"\\030\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2,
        "PokedexWeightKg": 6.9,
        "HeightStdDev": 0.25,
        "WeightStdDev": 0.8625,
        "FamilyId": "V0054_FAMILY_PSYDUCK",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0024_MOVE_FLAMETHROWER\"",
      "Move": {
        "UniqueId": "V0024_MOVE_FLAMETHROWER",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"flamethrower\"",
        "DurationMs": 2900,
        "DamageWindowStartMs": 1700,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0024_POKEMON_ARBOK\"",
      "Pokemon": {
        "UniqueId": "V0024_POKEMON_ARBOK",
        "ModelScale": 0.82,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.9225,
          "CylRadiusM": 0.615,
          "CylHeightM": 1.353,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.41,
          "CollisionHeightM": 1.353,
          "CollisionHeadRadiusM": 0.164,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 166,
          "BaseDefense": 166
        },
        "QuickMoves": "\"\\312\\001\\341\\001\"",
        "CinematicMoves": "\"\\020[\\\\\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\0006\\253*@6\\253*@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 3.5,
        "PokedexWeightKg": 65,
        "ParentId": "V0023_POKEMON_EKANS",
        "HeightStdDev": 0.4375,
        "WeightStdDev": 8.125,
        "FamilyId": "V0054_FAMILY_PSYDUCK"
      }
    },
    {
      "TemplateId": "\"V0025_POKEMON_PIKACHU\"",
      "Pokemon": {
        "UniqueId": "V0025_POKEMON_PIKACHU",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.555,
          "CylRadiusM": 0.37,
          "CylHeightM": 0.74,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.185,
          "CollisionHeightM": 0.518,
          "CollisionHeadRadiusM": 0.185,
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 124,
          "BaseDefense": 108
        },
        "QuickMoves": "\"\\315\\001\\333\\001\"",
        "CinematicMoves": "\"#ON\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?\\315\\314\\314?\\240\\211\\310?\\000\\000\\000\\000ff\\346?\\371\\017\\221?\\213\\210\\210?\"",
        "Evolution": "\"\\032\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 6,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.75,
        "FamilyId": "V0058_FAMILY_GROWLITHE",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0026_MOVE_DIG\"",
      "Move": {
        "UniqueId": "V0026_MOVE_DIG",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 45,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dig\"",
        "DurationMs": 5800,
        "DamageWindowStartMs": 4600,
        "DamageWindowEndMs": 5000,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0026_POKEMON_RAICHU\"",
      "Pokemon": {
        "UniqueId": "V0026_POKEMON_RAICHU",
        "ModelScale": 1.08,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.729,
          "CylRadiusM": 0.486,
          "CylHeightM": 1.35,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.27,
          "CollisionHeightM": 0.54,
          "CollisionHeadRadiusM": 0.216,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1.25,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 200,
          "BaseDefense": 154
        },
        "QuickMoves": "\"\\315\\001\\316\\001\"",
        "CinematicMoves": "\"{MN\"",
        "AnimTime": "\"c\\356\\016@\\332\\254*?\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\0006\\253*@\\000\\000\\200?\\016\\021\\221?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 30,
        "ParentId": "V0025_POKEMON_PIKACHU",
        "HeightStdDev": 0.1,
        "WeightStdDev": 3.75,
        "FamilyId": "V0058_FAMILY_GROWLITHE"
      }
    },
    {
      "TemplateId": "\"V0027_POKEMON_SANDSHREW\"",
      "Pokemon": {
        "UniqueId": "V0027_POKEMON_SANDSHREW",
        "ModelScale": 1.29,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.4838,
          "CylRadiusM": 0.3225,
          "CylHeightM": 0.774,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.258,
          "CollisionHeightM": 0.48375,
          "CollisionHeadRadiusM": 0.1935,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 90,
          "BaseDefense": 114
        },
        "QuickMoves": "\"\\334\\001\\330\\001\"",
        "CinematicMoves": "\"\\032@?\"",
        "AnimTime": "\"ff\\346?\\332\\254*?\\323\\274\\273?mV\\325?\\000\\000\\000\\0006\\253*@\\000\\000\\200?\\000\\000\\000\\000\"",
        "Evolution": "\"\\034\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 12,
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.5,
        "FamilyId": "V0063_FAMILY_ABRA",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0028_MOVE_CROSS_CHOP\"",
      "Move": {
        "UniqueId": "V0028_MOVE_CROSS_CHOP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 55,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"cross_chop\"",
        "DurationMs": 2000,
        "DamageWindowStartMs": 1500,
        "DamageWindowEndMs": 1800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0028_POKEMON_SANDSLASH\"",
      "Pokemon": {
        "UniqueId": "V0028_POKEMON_SANDSLASH",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.6,
          "CylRadiusM": 0.4,
          "CylHeightM": 1,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.35,
          "CollisionHeightM": 0.9,
          "CollisionHeadRadiusM": 0.35,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 1,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 150,
          "BaseAttack": 150,
          "BaseDefense": 172
        },
        "QuickMoves": "\"\\344\\001\\330\\001\"",
        "CinematicMoves": "\"\\037?_\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 29.5,
        "ParentId": "V0027_POKEMON_SANDSHREW",
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.6875,
        "FamilyId": "V0063_FAMILY_ABRA"
      }
    },
    {
      "TemplateId": "\"V0029_POKEMON_NIDORAN\"",
      "Pokemon": {
        "UniqueId": "V0029_POKEMON_NIDORAN",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.555,
          "CylRadiusM": 0.37,
          "CylHeightM": 0.666,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.185,
          "CollisionHeightM": 0.37,
          "CollisionHeadRadiusM": 0.185,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1.25,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 100,
          "BaseDefense": 104
        },
        "QuickMoves": "\"\\312\\001\\354\\001\"",
        "CinematicMoves": "\"2\\203\\001Z\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?\\375\\207\\010@\\000\\000\\000\\000\"",
        "Evolution": "\"\\036\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 7,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.875,
        "FamilyId": "V0069_FAMILY_BELLSPROUT",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0030_MOVE_PSYBEAM\"",
      "Move": {
        "UniqueId": "V0030_MOVE_PSYBEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"psybeam\"",
        "DurationMs": 3800,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 3600,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0030_POKEMON_NIDORINA\"",
      "Pokemon": {
        "UniqueId": "V0030_POKEMON_NIDORINA",
        "ModelScale": 1.17,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.6581,
          "CylRadiusM": 0.4388,
          "CylHeightM": 0.87749988,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.2925,
          "CollisionHeightM": 0.585,
          "CollisionHeadRadiusM": 0.1755,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 132,
          "BaseDefense": 136
        },
        "QuickMoves": "\"\\312\\001\\354\\001\"",
        "CinematicMoves": "\"2\\032Z\"",
        "AnimTime": "\"mV\\325?\\332\\254*?:#\\342?\\323\\274\\273?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?\\000\\000\\000\\000\"",
        "Evolution": "\"\\037\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 20,
        "ParentId": "V0029_POKEMON_NIDORAN",
        "HeightStdDev": 0.1,
        "WeightStdDev": 2.5,
        "FamilyId": "V0069_FAMILY_BELLSPROUT",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0031_MOVE_EARTHQUAKE\"",
      "Move": {
        "UniqueId": "V0031_MOVE_EARTHQUAKE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"earthquake\"",
        "DurationMs": 4200,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 3950,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0031_POKEMON_NIDOQUEEN\"",
      "Pokemon": {
        "UniqueId": "V0031_POKEMON_NIDOQUEEN",
        "ModelScale": 0.91,
        "Type1": "POKEMON_TYPE_POISON",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.6143,
          "CylRadiusM": 0.4095,
          "CylHeightM": 1.183,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.455,
          "CollisionHeightM": 0.79625,
          "CollisionHeadRadiusM": 0.2275,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 184,
          "BaseDefense": 190
        },
        "QuickMoves": "\"\\340\\001\\312\\001\"",
        "CinematicMoves": "\"\\037[ \"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 60,
        "ParentId": "V0030_POKEMON_NIDORINA",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 7.5,
        "FamilyId": "V0069_FAMILY_BELLSPROUT"
      }
    },
    {
      "TemplateId": "\"V0032_MOVE_STONE_EDGE\"",
      "Move": {
        "UniqueId": "V0032_MOVE_STONE_EDGE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 55,
        "AccuracyChance": 1,
        "CriticalChance": 0.5,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"stone_edge\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 1400,
        "DamageWindowEndMs": 1800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0032_POKEMON_NIDORAN\"",
      "Pokemon": {
        "UniqueId": "V0032_POKEMON_NIDORAN",
        "ModelScale": 1.26,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.7088,
          "CylRadiusM": 0.4725,
          "CylHeightM": 0.756,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.252,
          "CollisionHeightM": 0.315,
          "CollisionHeadRadiusM": 0.1575,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 92,
          "BaseAttack": 110,
          "BaseDefense": 94
        },
        "QuickMoves": "\"\\323\\001\\354\\001\"",
        "CinematicMoves": "\"~\\203\\001Z\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"!\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 9,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 1.125,
        "FamilyId": "V0077_FAMILY_PONYTA",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0033_MOVE_ICE_PUNCH\"",
      "Move": {
        "UniqueId": "V0033_MOVE_ICE_PUNCH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 45,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ice_punch\"",
        "DurationMs": 3500,
        "DamageWindowStartMs": 2100,
        "DamageWindowEndMs": 3200,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0033_POKEMON_NIDORINO\"",
      "Pokemon": {
        "UniqueId": "V0033_POKEMON_NIDORINO",
        "ModelScale": 0.99,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.7425,
          "CylRadiusM": 0.495,
          "CylHeightM": 0.792,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.297,
          "CollisionHeightM": 0.594,
          "CollisionHeadRadiusM": 0.2475,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 122,
          "BaseAttack": 142,
          "BaseDefense": 128
        },
        "QuickMoves": "\"\\340\\001\\354\\001\"",
        "CinematicMoves": "\"~\\032Z\"",
        "AnimTime": "\"ff\\346?\\332\\254*?mV\\325?\\306\\334\\335?\\000\\000\\000\\000mV\\325?mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"\\\"\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 19.5,
        "ParentId": "V0032_POKEMON_NIDORAN",
        "HeightStdDev": 0.1125,
        "WeightStdDev": 2.4375,
        "FamilyId": "V0077_FAMILY_PONYTA",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0034_MOVE_HEART_STAMP\"",
      "Move": {
        "UniqueId": "V0034_MOVE_HEART_STAMP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"heart_stamp\"",
        "DurationMs": 2550,
        "DamageWindowStartMs": 1950,
        "DamageWindowEndMs": 2250,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0034_POKEMON_NIDOKING\"",
      "Pokemon": {
        "UniqueId": "V0034_POKEMON_NIDOKING",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_POISON",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.8222,
          "CylRadiusM": 0.5481,
          "CylHeightM": 1.305,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.5481,
          "CollisionHeightM": 0.87,
          "CollisionHeadRadiusM": 0.27405,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 162,
          "BaseAttack": 204,
          "BaseDefense": 170
        },
        "QuickMoves": "\"\\340\\001\\310\\001\"",
        "CinematicMoves": "\"\\037[\\026\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?\\000\\000\\000@\\000\\000\\300?\\000\\000\\000\\0006\\253\\n@33\\263?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 62,
        "ParentId": "V0033_POKEMON_NIDORINO",
        "HeightStdDev": 0.175,
        "WeightStdDev": 7.75,
        "FamilyId": "V0077_FAMILY_PONYTA"
      }
    },
    {
      "TemplateId": "\"V0035_MOVE_DISCHARGE\"",
      "Move": {
        "UniqueId": "V0035_MOVE_DISCHARGE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"discharge\"",
        "DurationMs": 2500,
        "DamageWindowStartMs": 1600,
        "DamageWindowEndMs": 2300,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0035_POKEMON_CLEFAIRY\"",
      "Pokemon": {
        "UniqueId": "V0035_POKEMON_CLEFAIRY",
        "ModelScale": 1.25,
        "Type1": "POKEMON_TYPE_FAIRY",
        "Camera": {
          "DiskRadiusM": 0.675,
          "CylRadiusM": 0.45,
          "CylHeightM": 0.75,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.3125,
          "CollisionHeightM": 0.75,
          "CollisionHeadRadiusM": 0.225,
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 116,
          "BaseDefense": 124
        },
        "QuickMoves": "\"\\336\\001\\352\\001\"",
        "CinematicMoves": "\"T\\203\\001W\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?XU\\325?\"",
        "Evolution": "\"$\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 7.5,
        "HeightStdDev": 0.075,
        "WeightStdDev": 0.9375,
        "FamilyId": "V0083_FAMILY_FARFETCHD",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0036_MOVE_FLASH_CANNON\"",
      "Move": {
        "UniqueId": "V0036_MOVE_FLASH_CANNON",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 55,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"flash_cannon\"",
        "DurationMs": 3900,
        "DamageWindowStartMs": 2400,
        "DamageWindowEndMs": 3500,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0036_POKEMON_CLEFABLE\"",
      "Pokemon": {
        "UniqueId": "V0036_POKEMON_CLEFABLE",
        "ModelScale": 0.89,
        "Type1": "POKEMON_TYPE_FAIRY",
        "Camera": {
          "DiskRadiusM": 1.1681,
          "CylRadiusM": 0.712,
          "CylHeightM": 1.44625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.445,
          "CollisionHeightM": 1.1125,
          "CollisionHeadRadiusM": 0.445,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.25,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 190,
          "BaseAttack": 178,
          "BaseDefense": 178
        },
        "QuickMoves": "\"\\336\\001\\352\\001\"",
        "CinematicMoves": "\"VlW\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\0006\\253*@\\223\\251\\252?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 40,
        "ParentId": "V0035_POKEMON_CLEFAIRY",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 5,
        "FamilyId": "V0083_FAMILY_FARFETCHD"
      }
    },
    {
      "TemplateId": "\"V0037_POKEMON_VULPIX\"",
      "Pokemon": {
        "UniqueId": "V0037_POKEMON_VULPIX",
        "ModelScale": 1.26,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.8505,
          "CylRadiusM": 0.567,
          "CylHeightM": 0.756,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.315,
          "CollisionHeightM": 0.63,
          "CollisionHeadRadiusM": 0.252,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 76,
          "BaseAttack": 106,
          "BaseDefense": 118
        },
        "QuickMoves": "\"\\333\\001\\321\\001\"",
        "CinematicMoves": "\"\\203\\001\\030e\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\315\\314\\314?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?\\315\\314\\014@\"",
        "Evolution": "\"&\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 9.9,
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.2375,
        "FamilyId": "V0086_FAMILY_SEEL",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0038_MOVE_DRILL_PECK\"",
      "Move": {
        "UniqueId": "V0038_MOVE_DRILL_PECK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"drill_peck\"",
        "DurationMs": 2700,
        "DamageWindowStartMs": 1600,
        "DamageWindowEndMs": 2500,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0038_POKEMON_NINETALES\"",
      "Pokemon": {
        "UniqueId": "V0038_POKEMON_NINETALES",
        "ModelScale": 0.96,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 1.296,
          "CylRadiusM": 0.864,
          "CylHeightM": 1.2,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.36,
          "CollisionHeightM": 0.96,
          "CollisionHeadRadiusM": 0.24,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 5,
          "JumpTimeS": 1.25,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 146,
          "BaseAttack": 176,
          "BaseDefense": 194
        },
        "QuickMoves": "\"\\356\\001\\321\\001\"",
        "CinematicMoves": "\"*\\030g\"",
        "AnimTime": "\"6\\253*@\\332\\254*?\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\0006\\253\\n@\\000\\000\\000@\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 19.9,
        "ParentId": "V0037_POKEMON_VULPIX",
        "HeightStdDev": 0.1375,
        "WeightStdDev": 2.4875,
        "FamilyId": "V0086_FAMILY_SEEL"
      }
    },
    {
      "TemplateId": "\"V0039_MOVE_ICE_BEAM\"",
      "Move": {
        "UniqueId": "V0039_MOVE_ICE_BEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ice_beam\"",
        "DurationMs": 3650,
        "DamageWindowStartMs": 2150,
        "DamageWindowEndMs": 3500,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0039_POKEMON_JIGGLYPUFF\"",
      "Pokemon": {
        "UniqueId": "V0039_POKEMON_JIGGLYPUFF",
        "ModelScale": 1.28,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FAIRY",
        "Camera": {
          "DiskRadiusM": 0.768,
          "CylRadiusM": 0.512,
          "CylHeightM": 0.96,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.32,
          "CollisionHeightM": 0.64,
          "CollisionHeadRadiusM": 0.256,
          "MovementTimerS": 10,
          "JumpTimeS": 3,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 230,
          "BaseAttack": 98,
          "BaseDefense": 54
        },
        "QuickMoves": "\"\\336\\001\\356\\001\"",
        "CinematicMoves": "\"T\\203\\001X\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?6\\253j@\\000\\000\\000\\0006\\253*@mV\\325?\\000\\000\\000@\"",
        "Evolution": "\"(\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 5.5,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 0.6875,
        "FamilyId": "V0090_FAMILY_SHELLDER",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0040_MOVE_BLIZZARD\"",
      "Move": {
        "UniqueId": "V0040_MOVE_BLIZZARD",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"blizzard\"",
        "DurationMs": 3900,
        "DamageWindowStartMs": 3600,
        "DamageWindowEndMs": 3600,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0040_POKEMON_WIGGLYTUFF\"",
      "Pokemon": {
        "UniqueId": "V0040_POKEMON_WIGGLYTUFF",
        "ModelScale": 0.89,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FAIRY",
        "Camera": {
          "DiskRadiusM": 1.0013,
          "CylRadiusM": 0.445,
          "CylHeightM": 1.22375,
          "ShoulderModeScale": 0.4
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.356,
          "CollisionHeightM": 0.89,
          "CollisionHeadRadiusM": 0.2225,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.25,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 280,
          "BaseAttack": 168,
          "BaseDefense": 108
        },
        "QuickMoves": "\"\\336\\001\\356\\001\"",
        "CinematicMoves": "\"V\\016X\"",
        "AnimTime": "\"mV\\325?\\332\\254*?\\371\\017\\321?\\223\\251\\352?\\000\\000\\000\\000\\223\\251\\352?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 12,
        "ParentId": "V0039_POKEMON_JIGGLYPUFF",
        "HeightStdDev": 0.125,
        "WeightStdDev": 1.5,
        "FamilyId": "V0090_FAMILY_SHELLDER"
      }
    },
    {
      "TemplateId": "\"V0041_POKEMON_ZUBAT\"",
      "Pokemon": {
        "UniqueId": "V0041_POKEMON_ZUBAT",
        "ModelScale": 1.07,
        "Type1": "POKEMON_TYPE_POISON",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.963,
          "CylRadiusM": 0.642,
          "CylHeightM": 0.6955,
          "CylGroundM": 0.535,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.2,
          "CollisionRadiusM": 0.0535,
          "CollisionHeightM": 0.0535,
          "CollisionHeadRadiusM": 0.1605,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 88,
          "BaseDefense": 90
        },
        "QuickMoves": "\"\\333\\001\\312\\001\"",
        "CinematicMoves": "\"2yZ\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\223\\251\\252?\\332\\254*?\\000\\000\\000\\000\\000\\000\\300?\\223\\251\\252?\\000\\000\\000\\000\"",
        "Evolution": "\"*\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 7.5,
        "HeightStdDev": 0.1,
        "WeightStdDev": 0.9375,
        "FamilyId": "V0095_FAMILY_ONIX",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0042_MOVE_HEAT_WAVE\"",
      "Move": {
        "UniqueId": "V0042_MOVE_HEAT_WAVE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.095,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"heat_wave\"",
        "DurationMs": 3800,
        "DamageWindowStartMs": 3000,
        "DamageWindowEndMs": 3400,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0042_POKEMON_GOLBAT\"",
      "Pokemon": {
        "UniqueId": "V0042_POKEMON_GOLBAT",
        "ModelScale": 0.71,
        "Type1": "POKEMON_TYPE_POISON",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 1.5975,
          "CylRadiusM": 0.75,
          "CylHeightM": 1.2425,
          "CylGroundM": 1.065,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.0355,
          "CollisionHeightM": 0.0355,
          "CollisionHeadRadiusM": 0.355,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 150,
          "BaseAttack": 164,
          "BaseDefense": 164
        },
        "QuickMoves": "\"\\322\\001\\312\\001\"",
        "CinematicMoves": "\"2yE\"",
        "AnimTime": "\"\\000\\000\\300?\\332\\254*?\\223\\251\\252?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 55,
        "ParentId": "V0041_POKEMON_ZUBAT",
        "HeightStdDev": 0.2,
        "WeightStdDev": 6.875,
        "FamilyId": "V0095_FAMILY_ONIX"
      }
    },
    {
      "TemplateId": "\"V0043_POKEMON_ODDISH\"",
      "Pokemon": {
        "UniqueId": "V0043_POKEMON_ODDISH",
        "ModelScale": 1.35,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.6075,
          "CylRadiusM": 0.405,
          "CylHeightM": 0.81000012,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.48,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.2025,
          "CollisionHeightM": 0.50625,
          "CollisionHeadRadiusM": 0.2025,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 134,
          "BaseDefense": 130
        },
        "QuickMoves": "\"\\327\\001\\341\\001\"",
        "CinematicMoves": "\";ZW\"",
        "AnimTime": "\"\\323\\274\\273?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000 @mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\",\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 5.4,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 0.675,
        "FamilyId": "V0098_FAMILY_KRABBY",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0044_POKEMON_GLOOM\"",
      "Pokemon": {
        "UniqueId": "V0044_POKEMON_GLOOM",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.7425,
          "CylRadiusM": 0.495,
          "CylHeightM": 0.88000011,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.4125,
          "CollisionHeightM": 0.88000011,
          "CollisionHeadRadiusM": 0.2475,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 162,
          "BaseDefense": 158
        },
        "QuickMoves": "\"\\327\\001\\341\\001\"",
        "CinematicMoves": "\"/ZW\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000mV\\325?:#\\242?\\000\\000\\000\\000\"",
        "Evolution": "\"-\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 8.6,
        "ParentId": "V0043_POKEMON_ODDISH",
        "HeightStdDev": 0.1,
        "WeightStdDev": 1.075,
        "FamilyId": "V0098_FAMILY_KRABBY",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0045_MOVE_AERIAL_ACE\"",
      "Move": {
        "UniqueId": "V0045_MOVE_AERIAL_ACE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"aerial_ace\"",
        "DurationMs": 2900,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0045_POKEMON_VILEPLUME\"",
      "Pokemon": {
        "UniqueId": "V0045_POKEMON_VILEPLUME",
        "ModelScale": 0.92,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 1.242,
          "CylRadiusM": 0.828,
          "CylHeightM": 1.196,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 1.012,
          "CollisionHeightM": 1.196,
          "CollisionHeadRadiusM": 0.552,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 1,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 150,
          "BaseAttack": 202,
          "BaseDefense": 190
        },
        "QuickMoves": "\"\\327\\001\\341\\001\"",
        "CinematicMoves": "\"/tW\"",
        "AnimTime": "\"6\\253\\n@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\0006\\253\\n@\\247yw?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 18.6,
        "ParentId": "V0044_POKEMON_GLOOM",
        "HeightStdDev": 0.15,
        "WeightStdDev": 2.325,
        "FamilyId": "V0098_FAMILY_KRABBY"
      }
    },
    {
      "TemplateId": "\"V0046_MOVE_DRILL_RUN\"",
      "Move": {
        "UniqueId": "V0046_MOVE_DRILL_RUN",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"drill_run\"",
        "DurationMs": 3400,
        "DamageWindowStartMs": 2100,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0046_POKEMON_PARAS\"",
      "Pokemon": {
        "UniqueId": "V0046_POKEMON_PARAS",
        "ModelScale": 1.28,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_GRASS",
        "Camera": {
          "DiskRadiusM": 0.576,
          "CylRadiusM": 0.384,
          "CylHeightM": 0.448,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.192,
          "CollisionHeightM": 0.32,
          "CollisionHeadRadiusM": 0.192,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1.1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 122,
          "BaseDefense": 120
        },
        "QuickMoves": "\"\\334\\001\\311\\001\"",
        "CinematicMoves": "\"Yd;\"",
        "AnimTime": "\"mV\\325?\\332\\254*?:#\\342?\\371\\017\\321?\\000\\000\\000\\000\\312T\\025@\\223\\251\\252?AD\\304?\"",
        "Evolution": "\"/\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 5.4,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.675,
        "FamilyId": "V0104_FAMILY_CUBONE",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0047_MOVE_PETAL_BLIZZARD\"",
      "Move": {
        "UniqueId": "V0047_MOVE_PETAL_BLIZZARD",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"petal_blizzard\"",
        "DurationMs": 3200,
        "DamageWindowStartMs": 2100,
        "DamageWindowEndMs": 3100,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0047_POKEMON_PARASECT\"",
      "Pokemon": {
        "UniqueId": "V0047_POKEMON_PARASECT",
        "ModelScale": 1.01,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_GRASS",
        "Camera": {
          "DiskRadiusM": 0.9469,
          "CylRadiusM": 0.6313,
          "CylHeightM": 1.01,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.4545,
          "CollisionHeightM": 1.01,
          "CollisionHeadRadiusM": 0.505,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 17,
          "JumpTimeS": 1.25,
          "AttackTimerS": 6
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 162,
          "BaseDefense": 170
        },
        "QuickMoves": "\"\\311\\001\\310\\001\"",
        "CinematicMoves": "\"Ydt\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 29.5,
        "ParentId": "V0046_POKEMON_PARAS",
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.6875,
        "FamilyId": "V0104_FAMILY_CUBONE"
      }
    },
    {
      "TemplateId": "\"V0048_MOVE_MEGA_DRAIN\"",
      "Move": {
        "UniqueId": "V0048_MOVE_MEGA_DRAIN",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "HealScalar": 0.5,
        "StaminaLossScalar": 0.04,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"mega_drain\"",
        "DurationMs": 3200,
        "DamageWindowStartMs": 1400,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0048_POKEMON_VENONAT\"",
      "Pokemon": {
        "UniqueId": "V0048_POKEMON_VENONAT",
        "ModelScale": 0.71,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.7988,
          "CylRadiusM": 0.5325,
          "CylHeightM": 1.1715,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.355,
          "CollisionHeightM": 0.71,
          "CollisionHeadRadiusM": 0.26625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.25,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 108,
          "BaseDefense": 118
        },
        "QuickMoves": "\"\\311\\001\\353\\001\"",
        "CinematicMoves": "\"2\\036c\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"1\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 30,
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.75,
        "FamilyId": "V0107_FAMILY_HITMONCHAN",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0049_MOVE_BUG_BUZZ\"",
      "Move": {
        "UniqueId": "V0049_MOVE_BUG_BUZZ",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bug_buzz\"",
        "DurationMs": 4250,
        "DamageWindowStartMs": 2600,
        "DamageWindowEndMs": 4100,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0049_POKEMON_VENOMOTH\"",
      "Pokemon": {
        "UniqueId": "V0049_POKEMON_VENOMOTH",
        "ModelScale": 0.72,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.864,
          "CylRadiusM": 0.576,
          "CylHeightM": 1.08,
          "CylGroundM": 0.36,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.36,
          "CollisionHeightM": 0.72,
          "CollisionHeadRadiusM": 0.288,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 172,
          "BaseDefense": 154
        },
        "QuickMoves": "\"\\311\\001\\353\\001\"",
        "CinematicMoves": "\"2l1\"",
        "AnimTime": "\"\\000\\000\\000\\000\\232\\231\\031?mV\\325?\\232\\231\\031?\\000\\000\\000\\000\\375\\207\\010@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 12.5,
        "ParentId": "V0048_POKEMON_VENONAT",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 1.5625,
        "FamilyId": "V0107_FAMILY_HITMONCHAN"
      }
    },
    {
      "TemplateId": "\"V0050_MOVE_POISON_FANG\"",
      "Move": {
        "UniqueId": "V0050_MOVE_POISON_FANG",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.05,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"poison_fang\"",
        "DurationMs": 2400,
        "DamageWindowStartMs": 1650,
        "DamageWindowEndMs": 1850,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0050_POKEMON_DIGLETT\"",
      "Pokemon": {
        "UniqueId": "V0050_POKEMON_DIGLETT",
        "ModelScale": 2,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.45,
          "CylRadiusM": 0.3,
          "CylHeightM": 0.4,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.16,
          "CollisionHeightM": 0.4,
          "CollisionHeadRadiusM": 0.18,
          "MovementTimerS": 29,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 20,
          "BaseAttack": 108,
          "BaseDefense": 86
        },
        "QuickMoves": "\"\\330\\001\\334\\001\"",
        "CinematicMoves": "\"\\032`?\"",
        "AnimTime": "\"`v\\267?\\332\\254*?\\000\\000\\000@\\r\\340]?\\000\\000\\000\\0006\\253\\n@\\223\\251\\252?\\250\\252\\252?\"",
        "Evolution": "\"3\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.2,
        "PokedexWeightKg": 0.8,
        "HeightStdDev": 0.025,
        "WeightStdDev": 0.1,
        "FamilyId": "V0109_FAMILY_KOFFING",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0051_MOVE_NIGHT_SLASH\"",
      "Move": {
        "UniqueId": "V0051_MOVE_NIGHT_SLASH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_DARK",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.07,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"night_slash\"",
        "DurationMs": 2700,
        "DamageWindowStartMs": 2400,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0051_POKEMON_DUGTRIO\"",
      "Pokemon": {
        "UniqueId": "V0051_POKEMON_DUGTRIO",
        "ModelScale": 1.12,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 1.008,
          "CylRadiusM": 0.672,
          "CylHeightM": 0.84,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.448,
          "CollisionHeightM": 0.84,
          "CollisionHeadRadiusM": 0.336,
          "MovementTimerS": 29,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 148,
          "BaseDefense": 140
        },
        "QuickMoves": "\"\\313\\001\\330\\001\"",
        "CinematicMoves": "\"\\037` \"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?fff?\\000\\000\\000\\000\\375\\207\\010@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 33.3,
        "ParentId": "V0050_POKEMON_DIGLETT",
        "HeightStdDev": 0.0875,
        "WeightStdDev": 4.1625,
        "FamilyId": "V0109_FAMILY_KOFFING"
      }
    },
    {
      "TemplateId": "\"V0052_POKEMON_MEOWTH\"",
      "Pokemon": {
        "UniqueId": "V0052_POKEMON_MEOWTH",
        "ModelScale": 1.6,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.6,
          "CylRadiusM": 0.4,
          "CylHeightM": 0.64,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.128,
          "CollisionHeightM": 0.4,
          "CollisionHeadRadiusM": 0.2,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 104,
          "BaseDefense": 94
        },
        "QuickMoves": "\"\\334\\001\\312\\001\"",
        "CinematicMoves": "\"3\\020\\203\\001\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?\\306\\334\\335?\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@33\\263?\\000\\000\\000@\"",
        "Evolution": "\"5\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 4.2,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.525,
        "FamilyId": "V0113_FAMILY_CHANSEY",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0053_MOVE_BUBBLE_BEAM\"",
      "Move": {
        "UniqueId": "V0053_MOVE_BUBBLE_BEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bubble_beam\"",
        "DurationMs": 2900,
        "DamageWindowStartMs": 2600,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0053_POKEMON_PERSIAN\"",
      "Pokemon": {
        "UniqueId": "V0053_POKEMON_PERSIAN",
        "ModelScale": 0.82,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.7995,
          "CylRadiusM": 0.533,
          "CylHeightM": 0.902,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.328,
          "CollisionHeightM": 0.615,
          "CollisionHeadRadiusM": 0.164,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 156,
          "BaseDefense": 146
        },
        "QuickMoves": "\"\\334\\001\\356\\001\"",
        "CinematicMoves": "\"3AX\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?mV\\325?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 32,
        "ParentId": "V0052_POKEMON_MEOWTH",
        "HeightStdDev": 0.125,
        "WeightStdDev": 4,
        "FamilyId": "V0113_FAMILY_CHANSEY"
      }
    },
    {
      "TemplateId": "\"V0054_MOVE_SUBMISSION\"",
      "Move": {
        "UniqueId": "V0054_MOVE_SUBMISSION",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"submission\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1850,
        "DamageWindowEndMs": 2000,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0054_POKEMON_PSYDUCK\"",
      "Pokemon": {
        "UniqueId": "V0054_POKEMON_PSYDUCK",
        "ModelScale": 0.97,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5456,
          "CylRadiusM": 0.3638,
          "CylHeightM": 0.97,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.291,
          "CollisionHeightM": 0.60625,
          "CollisionHeadRadiusM": 0.3395,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 132,
          "BaseDefense": 112
        },
        "QuickMoves": "\"\\346\\001\\352\\001\"",
        "CinematicMoves": "\"\\036:\\034\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000ff&@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"7\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 19.6,
        "HeightStdDev": 0.1,
        "WeightStdDev": 2.45,
        "FamilyId": "V0115_FAMILY_KANGASKHAN",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0055_POKEMON_GOLDUCK\"",
      "Pokemon": {
        "UniqueId": "V0055_POKEMON_GOLDUCK",
        "ModelScale": 0.93,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.9765,
          "CylRadiusM": 0.465,
          "CylHeightM": 1.3485,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.2325,
          "CollisionHeightM": 0.81375,
          "CollisionHeadRadiusM": 0.2325,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 5,
          "JumpTimeS": 1,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 194,
          "BaseDefense": 176
        },
        "QuickMoves": "\"\\346\\001\\353\\001\"",
        "CinematicMoves": "\"lk\\'\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 76.6,
        "ParentId": "V0054_POKEMON_PSYDUCK",
        "HeightStdDev": 0.2125,
        "WeightStdDev": 9.575,
        "FamilyId": "V0115_FAMILY_KANGASKHAN"
      }
    },
    {
      "TemplateId": "\"V0056_MOVE_LOW_SWEEP\"",
      "Move": {
        "UniqueId": "V0056_MOVE_LOW_SWEEP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"low_sweep\"",
        "DurationMs": 2250,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 2150,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0056_POKEMON_MANKEY\"",
      "Pokemon": {
        "UniqueId": "V0056_POKEMON_MANKEY",
        "ModelScale": 1.29,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.7256,
          "CylRadiusM": 0.4838,
          "CylHeightM": 0.80625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.1935,
          "CollisionHeightM": 0.645,
          "CollisionHeadRadiusM": 0.129,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 122,
          "BaseDefense": 96
        },
        "QuickMoves": "\"\\320\\001\\334\\001\"",
        "CinematicMoves": "\"\\0348{\"",
        "AnimTime": "\"\\000\\000\\300?\\232\\231\\031?\\223\\251\\252?\\371\\017\\321?\\000\\000\\000\\000\\323\\274\\373?\\300\\354n?\\000\\000\\000\\000\"",
        "Evolution": "\"9\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 28,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 3.5,
        "FamilyId": "V0118_FAMILY_GOLDEEN",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0057_MOVE_AQUA_JET\"",
      "Move": {
        "UniqueId": "V0057_MOVE_AQUA_JET",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.04,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"aqua_jet\"",
        "DurationMs": 2350,
        "DamageWindowStartMs": 1700,
        "DamageWindowEndMs": 2100,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0057_POKEMON_PRIMEAPE\"",
      "Pokemon": {
        "UniqueId": "V0057_POKEMON_PRIMEAPE",
        "ModelScale": 0.92,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.69,
          "CylRadiusM": 0.46,
          "CylHeightM": 1.15,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.46,
          "CollisionHeightM": 1.104,
          "CollisionHeadRadiusM": 0.23,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 17,
          "JumpTimeS": 1,
          "AttackTimerS": 6
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 178,
          "BaseDefense": 150
        },
        "QuickMoves": "\"\\317\\001\\320\\001\"",
        "CinematicMoves": "\"\\03483\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\000\\000\\300?\\223\\251\\252?\\000\\000\\000\\000mV\\325?\\223\\251\\252?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 32,
        "ParentId": "V0056_POKEMON_MANKEY",
        "HeightStdDev": 0.125,
        "WeightStdDev": 4,
        "FamilyId": "V0118_FAMILY_GOLDEEN"
      }
    },
    {
      "TemplateId": "\"V0058_MOVE_AQUA_TAIL\"",
      "Move": {
        "UniqueId": "V0058_MOVE_AQUA_TAIL",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"aqua_tail\"",
        "DurationMs": 2350,
        "DamageWindowStartMs": 2050,
        "DamageWindowEndMs": 2250,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0058_POKEMON_GROWLITHE\"",
      "Pokemon": {
        "UniqueId": "V0058_POKEMON_GROWLITHE",
        "ModelScale": 1.17,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.8775,
          "CylRadiusM": 0.585,
          "CylHeightM": 1.02375,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.234,
          "CollisionHeightM": 0.585,
          "CollisionHeadRadiusM": 0.1755,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 156,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\321\\001\\312\\001\"",
        "CinematicMoves": "\"\\025\\203\\001\\030\"",
        "AnimTime": "\"\\226!\\002@\\332\\254*?ff\\346?\\000\\000\\300?\\000\\000\\000\\000\\235\\021\\021@\\315\\314L?ff\\346?\"",
        "Evolution": "\";\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 19,
        "HeightStdDev": 0.0875,
        "WeightStdDev": 2.375,
        "FamilyId": "V0122_FAMILY_MR_MIME",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0059_MOVE_SEED_BOMB\"",
      "Move": {
        "UniqueId": "V0059_MOVE_SEED_BOMB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"seed_bomb\"",
        "DurationMs": 2400,
        "DamageWindowStartMs": 1300,
        "DamageWindowEndMs": 1800,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0059_POKEMON_ARCANINE\"",
      "Pokemon": {
        "UniqueId": "V0059_POKEMON_ARCANINE",
        "ModelScale": 0.74,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.999,
          "CylRadiusM": 0.666,
          "CylHeightM": 1.48,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.37,
          "CollisionHeightM": 0.74,
          "CollisionHeadRadiusM": 0.333,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.25,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 230,
          "BaseDefense": 180
        },
        "QuickMoves": "\"\\360\\001\\312\\001\"",
        "CinematicMoves": "\"g\\030_\"",
        "AnimTime": "\"\\375\\207\\010@\\332\\254*?\\306\\334\\335?\\223\\251\\352?\\000\\000\\000\\000\\007\\360\\356?\\306\\334\\335?\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.9,
        "PokedexWeightKg": 155,
        "ParentId": "V0058_POKEMON_GROWLITHE",
        "HeightStdDev": 0.2375,
        "WeightStdDev": 19.375,
        "FamilyId": "V0122_FAMILY_MR_MIME"
      }
    },
    {
      "TemplateId": "\"V0060_MOVE_PSYSHOCK\"",
      "Move": {
        "UniqueId": "V0060_MOVE_PSYSHOCK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"psyshock\"",
        "DurationMs": 2700,
        "DamageWindowStartMs": 2200,
        "DamageWindowEndMs": 2700,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0060_POKEMON_POLIWAG\"",
      "Pokemon": {
        "UniqueId": "V0060_POKEMON_POLIWAG",
        "ModelScale": 1.25,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.75,
          "CylRadiusM": 0.5,
          "CylHeightM": 0.875,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.3125,
          "CollisionHeightM": 0.75,
          "CollisionHeadRadiusM": 0.3125,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 108,
          "BaseDefense": 98
        },
        "QuickMoves": "\"\\355\\001\\330\\001\"",
        "CinematicMoves": "\"5`\\203\\001\"",
        "AnimTime": "\"mV\\325?\\332\\254*?\\000\\000\\000@\\000\\000\\300?\\000\\000\\000\\000mV\\325?\\000\\000\\300?\\000\\000\\000\\000\"",
        "Evolution": "\"=\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 12.4,
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.55,
        "FamilyId": "V0124_FAMILY_JYNX",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0061_POKEMON_POLIWHIRL\"",
      "Pokemon": {
        "UniqueId": "V0061_POKEMON_POLIWHIRL",
        "ModelScale": 0.98,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 1.1025,
          "CylRadiusM": 0.735,
          "CylHeightM": 1.078,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.49,
          "CollisionHeightM": 0.882,
          "CollisionHeadRadiusM": 0.3675,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 0.8,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 132,
          "BaseDefense": 132
        },
        "QuickMoves": "\"\\355\\001\\330\\001\"",
        "CinematicMoves": "\"j`5\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?6\\253\\n@\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?\\000\\000\\000\\000\"",
        "Evolution": "\">\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 20,
        "ParentId": "V0060_POKEMON_POLIWAG",
        "HeightStdDev": 0.125,
        "WeightStdDev": 2.5,
        "FamilyId": "V0124_FAMILY_JYNX",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0062_MOVE_ANCIENT_POWER\"",
      "Move": {
        "UniqueId": "V0062_MOVE_ANCIENT_POWER",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ancient_power\"",
        "DurationMs": 3600,
        "DamageWindowStartMs": 2900,
        "DamageWindowEndMs": 3250,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0062_POKEMON_POLIWRATH\"",
      "Pokemon": {
        "UniqueId": "V0062_POKEMON_POLIWRATH",
        "ModelScale": 0.86,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 1.2255,
          "CylRadiusM": 0.817,
          "CylHeightM": 1.204,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.645,
          "CollisionHeightM": 1.118,
          "CollisionHeadRadiusM": 0.344,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 1.05,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 180,
          "BaseDefense": 202
        },
        "QuickMoves": "\"\\355\\001\\330\\001\"",
        "CinematicMoves": "\"k6!\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\306\\334\\235?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 54,
        "ParentId": "V0061_POKEMON_POLIWHIRL",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 6.75,
        "FamilyId": "V0124_FAMILY_JYNX"
      }
    },
    {
      "TemplateId": "\"V0063_MOVE_ROCK_TOMB\"",
      "Move": {
        "UniqueId": "V0063_MOVE_ROCK_TOMB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"rock_tomb\"",
        "DurationMs": 3400,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 3200,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0063_POKEMON_ABRA\"",
      "Pokemon": {
        "UniqueId": "V0063_POKEMON_ABRA",
        "ModelScale": 1.12,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.672,
          "CylRadiusM": 0.448,
          "CylHeightM": 0.784,
          "CylGroundM": 0.168,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.99,
          "CollisionRadiusM": 0.28,
          "CollisionHeightM": 0.56,
          "CollisionHeadRadiusM": 0.28,
          "MovementType": "POKEMON_ENC_MOVEMENT_PSYCHIC",
          "MovementTimerS": 29,
          "JumpTimeS": 1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 50,
          "BaseAttack": 110,
          "BaseDefense": 76
        },
        "QuickMoves": "\"\\352\\001\"",
        "CinematicMoves": "\"<cF\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\0006\\253\\n@6\\253*@\\000\\000\\000\\000\"",
        "Evolution": "\"@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 19.5,
        "HeightStdDev": 0.1125,
        "WeightStdDev": 2.4375,
        "FamilyId": "V0127_FAMILY_PINSIR",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0064_MOVE_ROCK_SLIDE\"",
      "Move": {
        "UniqueId": "V0064_MOVE_ROCK_SLIDE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"rock_slide\"",
        "DurationMs": 3200,
        "DamageWindowStartMs": 1500,
        "DamageWindowEndMs": 2900,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0064_POKEMON_KADABRA\"",
      "Pokemon": {
        "UniqueId": "V0064_POKEMON_KADABRA",
        "ModelScale": 0.89,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 1.0013,
          "CylRadiusM": 0.6675,
          "CylHeightM": 1.157,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.445,
          "CollisionHeightM": 0.89,
          "CollisionHeadRadiusM": 0.33375,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1.25,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 150,
          "BaseDefense": 112
        },
        "QuickMoves": "\"\\342\\001\\353\\001\"",
        "CinematicMoves": "\"\\036VF\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?\\007\\360\\356?\\000\\000\\000\\000ff\\006@\\306\\334\\335?\\000\\000\\000\\000\"",
        "Evolution": "\"A\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 56.5,
        "ParentId": "V0063_POKEMON_ABRA",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 7.0625,
        "FamilyId": "V0127_FAMILY_PINSIR",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0065_MOVE_POWER_GEM\"",
      "Move": {
        "UniqueId": "V0065_MOVE_POWER_GEM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"power_gem\"",
        "DurationMs": 2900,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0065_POKEMON_ALAKAZAM\"",
      "Pokemon": {
        "UniqueId": "V0065_POKEMON_ALAKAZAM",
        "ModelScale": 0.85,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.765,
          "CylRadiusM": 0.51,
          "CylHeightM": 1.275,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.425,
          "CollisionHeightM": 0.93500012,
          "CollisionHeadRadiusM": 0.255,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 186,
          "BaseDefense": 152
        },
        "QuickMoves": "\"\\342\\001\\353\\001\"",
        "CinematicMoves": "\"lVF\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\312T\\025@\\000\\000 @\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 48,
        "ParentId": "V0064_POKEMON_KADABRA",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 6,
        "FamilyId": "V0127_FAMILY_PINSIR"
      }
    },
    {
      "TemplateId": "\"V0066_MOVE_SHADOW_SNEAK\"",
      "Move": {
        "UniqueId": "V0066_MOVE_SHADOW_SNEAK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.04,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"shadow_sneak\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 2900,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0066_POKEMON_MACHOP\"",
      "Pokemon": {
        "UniqueId": "V0066_POKEMON_MACHOP",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.6188,
          "CylRadiusM": 0.4125,
          "CylHeightM": 0.88000011,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.22,
          "CollisionHeightM": 0.55,
          "CollisionHeadRadiusM": 0.20625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 118,
          "BaseDefense": 96
        },
        "QuickMoves": "\"\\317\\001\\320\\001\"",
        "CinematicMoves": "\"8{\\034\"",
        "AnimTime": "\"\\235\\021\\021@\\332\\254*?\\000\\000\\000@\\306\\334\\335?\\000\\000\\000\\0006\\253\\n@\\000\\000\\200?\\000\\000\\000\\000\"",
        "Evolution": "\"C\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 19.5,
        "HeightStdDev": 0.1,
        "WeightStdDev": 2.4375,
        "FamilyId": "V0131_FAMILY_LAPRAS",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0067_MOVE_SHADOW_PUNCH\"",
      "Move": {
        "UniqueId": "V0067_MOVE_SHADOW_PUNCH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"shadow_punch\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1400,
        "DamageWindowEndMs": 1700,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0067_POKEMON_MACHOKE\"",
      "Pokemon": {
        "UniqueId": "V0067_POKEMON_MACHOKE",
        "ModelScale": 0.91,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.819,
          "CylRadiusM": 0.546,
          "CylHeightM": 1.274,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.54600012,
          "CollisionHeightM": 1.092,
          "CollisionHeadRadiusM": 0.1365,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 154,
          "BaseDefense": 144
        },
        "QuickMoves": "\"\\317\\001\\320\\001\"",
        "CinematicMoves": "\"6{\\034\"",
        "AnimTime": "\"\\000\\000\\300?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\0006\\253\\n@\\240\\211\\210?\\000\\000\\000\\000\"",
        "Evolution": "\"D\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 70.5,
        "ParentId": "V0066_POKEMON_MACHOP",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 8.8125,
        "FamilyId": "V0131_FAMILY_LAPRAS",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0068_POKEMON_MACHAMP\"",
      "Pokemon": {
        "UniqueId": "V0068_POKEMON_MACHAMP",
        "ModelScale": 0.89,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.8678,
          "CylRadiusM": 0.5785,
          "CylHeightM": 1.424,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.5785,
          "CollisionHeightM": 1.246,
          "CollisionHeadRadiusM": 0.1335,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 198,
          "BaseDefense": 180
        },
        "QuickMoves": "\"\\345\\001\\320\\001\"",
        "CinematicMoves": "\" 6\\034\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000mV\\325?\\223\\251\\252?\\250\\252\\252?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 130,
        "ParentId": "V0067_POKEMON_MACHOKE",
        "HeightStdDev": 0.2,
        "WeightStdDev": 16.25,
        "FamilyId": "V0131_FAMILY_LAPRAS"
      }
    },
    {
      "TemplateId": "\"V0069_MOVE_OMINOUS_WIND\"",
      "Move": {
        "UniqueId": "V0069_MOVE_OMINOUS_WIND",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ominous_wind\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 1850,
        "DamageWindowEndMs": 2100,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0069_POKEMON_BELLSPROUT\"",
      "Pokemon": {
        "UniqueId": "V0069_POKEMON_BELLSPROUT",
        "ModelScale": 1.29,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.6773,
          "CylRadiusM": 0.4515,
          "CylHeightM": 0.90299988,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.1935,
          "CollisionHeightM": 0.4515,
          "CollisionHeadRadiusM": 0.22575,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.2,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 158,
          "BaseDefense": 78
        },
        "QuickMoves": "\"\\326\\001\\341\\001\"",
        "CinematicMoves": "\"vZ\\r\"",
        "AnimTime": "\"\\232\\231\\331?\\332\\254*?\\000\\000 @\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"F\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.7,
        "PokedexWeightKg": 4,
        "HeightStdDev": 0.0875,
        "WeightStdDev": 0.5,
        "FamilyId": "V0137_FAMILY_PORYGON",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0070_MOVE_SHADOW_BALL\"",
      "Move": {
        "UniqueId": "V0070_MOVE_SHADOW_BALL",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"shadow_ball\"",
        "DurationMs": 3080,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0070_POKEMON_WEEPINBELL\"",
      "Pokemon": {
        "UniqueId": "V0070_POKEMON_WEEPINBELL",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.975,
          "CylRadiusM": 0.65,
          "CylHeightM": 1,
          "CylGroundM": 0.375,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.95,
          "CollisionHeadRadiusM": 0.25,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 190,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\327\\001\\341\\001\"",
        "CinematicMoves": "\"vZ;\"",
        "AnimTime": "\"ff\\346?\\332\\254*?-C\\304?\\332\\254*?\\000\\000\\000\\000\\235\\021\\021@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"G\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 6.4,
        "ParentId": "V0069_POKEMON_BELLSPROUT",
        "HeightStdDev": 0.125,
        "WeightStdDev": 0.8,
        "FamilyId": "V0137_FAMILY_PORYGON",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0071_POKEMON_VICTREEBEL\"",
      "Pokemon": {
        "UniqueId": "V0071_POKEMON_VICTREEBEL",
        "ModelScale": 0.84,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.819,
          "CylRadiusM": 0.546,
          "CylHeightM": 1.428,
          "CylGroundM": 0.42,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.336,
          "CollisionHeightM": 1.428,
          "CollisionHeadRadiusM": 0.273,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 222,
          "BaseDefense": 152
        },
        "QuickMoves": "\"\\327\\001\\341\\001\"",
        "CinematicMoves": "\"uZt\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\0006\\253\\n@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 15.5,
        "ParentId": "V0070_POKEMON_WEEPINBELL",
        "HeightStdDev": 0.2125,
        "WeightStdDev": 1.9375,
        "FamilyId": "V0137_FAMILY_PORYGON"
      }
    },
    {
      "TemplateId": "\"V0072_MOVE_MAGNET_BOMB\"",
      "Move": {
        "UniqueId": "V0072_MOVE_MAGNET_BOMB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"magnet_bomb\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1750,
        "DamageWindowEndMs": 2300,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0072_POKEMON_TENTACOOL\"",
      "Pokemon": {
        "UniqueId": "V0072_POKEMON_TENTACOOL",
        "ModelScale": 1.05,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.4725,
          "CylRadiusM": 0.315,
          "CylHeightM": 0.91874993,
          "CylGroundM": 0.2625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.21,
          "CollisionHeightM": 0.91874993,
          "CollisionHeadRadiusM": 0.1575,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 106,
          "BaseDefense": 136
        },
        "QuickMoves": "\"\\355\\001\\354\\001\"",
        "CinematicMoves": "\"5i\\r\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\00033\\023@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"I\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 45.5,
        "HeightStdDev": 0.1125,
        "WeightStdDev": 5.6875,
        "FamilyId": "V0142_FAMILY_AERODACTYL",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0073_POKEMON_TENTACRUEL\"",
      "Pokemon": {
        "UniqueId": "V0073_POKEMON_TENTACRUEL",
        "ModelScale": 0.82,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.738,
          "CylRadiusM": 0.492,
          "CylHeightM": 1.312,
          "CylGroundM": 0.205,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.492,
          "CollisionHeightM": 1.23,
          "CollisionHeadRadiusM": 0.246,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 11,
          "JumpTimeS": 1,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 170,
          "BaseDefense": 196
        },
        "QuickMoves": "\"\\341\\001\\340\\001\"",
        "CinematicMoves": "\"k[(\"",
        "AnimTime": "\"6\\253\\n@\\332\\254*?\\223\\251\\252?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@6\\253*@\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 55,
        "ParentId": "V0072_POKEMON_TENTACOOL",
        "HeightStdDev": 0.2,
        "WeightStdDev": 6.875,
        "FamilyId": "V0142_FAMILY_AERODACTYL"
      }
    },
    {
      "TemplateId": "\"V0074_MOVE_IRON_HEAD\"",
      "Move": {
        "UniqueId": "V0074_MOVE_IRON_HEAD",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"iron_head\"",
        "DurationMs": 2000,
        "DamageWindowStartMs": 1550,
        "DamageWindowEndMs": 1800,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0074_POKEMON_GEODUDE\"",
      "Pokemon": {
        "UniqueId": "V0074_POKEMON_GEODUDE",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.5873,
          "CylRadiusM": 0.3915,
          "CylHeightM": 0.348,
          "CylGroundM": 0.261,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.3915,
          "CollisionHeightM": 0.1305,
          "CollisionHeadRadiusM": 0.19575,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 106,
          "BaseDefense": 118
        },
        "QuickMoves": "\"\\343\\001\\335\\001\"",
        "CinematicMoves": "\"@?\\032\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"K\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 20,
        "HeightStdDev": 0.05,
        "WeightStdDev": 2.5,
        "FamilyId": "V0144_FAMILY_ARTICUNO",
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0075_MOVE_PARABOLIC_CHARGE\"",
      "Move": {
        "UniqueId": "V0075_MOVE_PARABOLIC_CHARGE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "HealScalar": 0.5,
        "StaminaLossScalar": 0.05,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"parabolic_charge\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1300,
        "DamageWindowEndMs": 1700,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0075_POKEMON_GRAVELER\"",
      "Pokemon": {
        "UniqueId": "V0075_POKEMON_GRAVELER",
        "ModelScale": 0.82,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 1.0455,
          "CylRadiusM": 0.697,
          "CylHeightM": 0.82,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.2,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.492,
          "CollisionHeightM": 0.697,
          "CollisionHeadRadiusM": 0.369,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.2,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 142,
          "BaseDefense": 156
        },
        "QuickMoves": "\"\\343\\001\\330\\001\"",
        "CinematicMoves": "\"\\032 @\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?\\007\\360\\356?\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"L\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 105,
        "ParentId": "V0074_POKEMON_GEODUDE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 13.125,
        "FamilyId": "V0144_FAMILY_ARTICUNO",
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0076_POKEMON_GOLEM\"",
      "Pokemon": {
        "UniqueId": "V0076_POKEMON_GOLEM",
        "ModelScale": 0.84,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.945,
          "CylRadiusM": 0.63,
          "CylHeightM": 1.092,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.1,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.63,
          "CollisionHeightM": 1.092,
          "CollisionHeadRadiusM": 0.315,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.2,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 176,
          "BaseDefense": 198
        },
        "QuickMoves": "\"\\343\\001\\330\\001\"",
        "CinematicMoves": "\" >\\037\"",
        "AnimTime": "\"6\\253*@\\332\\254*?\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\0006\\253\\n@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 300,
        "ParentId": "V0075_POKEMON_GRAVELER",
        "HeightStdDev": 0.175,
        "WeightStdDev": 37.5,
        "FamilyId": "V0144_FAMILY_ARTICUNO"
      }
    },
    {
      "TemplateId": "\"V0077_MOVE_THUNDER_PUNCH\"",
      "Move": {
        "UniqueId": "V0077_MOVE_THUNDER_PUNCH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"thunder_punch\"",
        "DurationMs": 2400,
        "DamageWindowStartMs": 1950,
        "DamageWindowEndMs": 2200,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0077_POKEMON_PONYTA\"",
      "Pokemon": {
        "UniqueId": "V0077_POKEMON_PONYTA",
        "ModelScale": 1.01,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.5681,
          "CylRadiusM": 0.3788,
          "CylHeightM": 1.2625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.2525,
          "CollisionHeightM": 0.63125,
          "CollisionHeadRadiusM": 0.202,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 0.95,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 168,
          "BaseDefense": 138
        },
        "QuickMoves": "\"\\335\\001\\321\\001\"",
        "CinematicMoves": "\"e\\025g\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?\\000\\000\\300?\\252\\252\\252@\\312T\\025@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"N\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 30,
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.75,
        "FamilyId": "V0147_FAMILY_DRATINI",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0078_MOVE_THUNDER\"",
      "Move": {
        "UniqueId": "V0078_MOVE_THUNDER",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 65,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"thunder\"",
        "DurationMs": 4300,
        "DamageWindowStartMs": 2550,
        "DamageWindowEndMs": 4100,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0078_POKEMON_RAPIDASH\"",
      "Pokemon": {
        "UniqueId": "V0078_POKEMON_RAPIDASH",
        "ModelScale": 0.81,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.6075,
          "CylRadiusM": 0.405,
          "CylHeightM": 1.701,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.324,
          "CollisionHeightM": 0.891,
          "CollisionHeadRadiusM": 0.243,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 200,
          "BaseDefense": 170
        },
        "QuickMoves": "\"\\317\\001\\321\\001\"",
        "CinematicMoves": "\"g.*\"",
        "AnimTime": "\"\\320D\\004@&SU?\\312T\\025@\\007\\360\\356?\\000\\000\\000\\0006\\253\\n@6\\253*@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 95,
        "ParentId": "V0077_POKEMON_PONYTA",
        "HeightStdDev": 0.2125,
        "WeightStdDev": 11.875,
        "FamilyId": "V0147_FAMILY_DRATINI"
      }
    },
    {
      "TemplateId": "\"V0079_MOVE_THUNDERBOLT\"",
      "Move": {
        "UniqueId": "V0079_MOVE_THUNDERBOLT",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"thunderbolt\"",
        "DurationMs": 2700,
        "DamageWindowStartMs": 1900,
        "DamageWindowEndMs": 2700,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0079_POKEMON_SLOWPOKE\"",
      "Pokemon": {
        "UniqueId": "V0079_POKEMON_SLOWPOKE",
        "ModelScale": 0.79,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 1.185,
          "CylRadiusM": 0.5925,
          "CylHeightM": 0.94800007,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.316,
          "CollisionHeightM": 0.5135,
          "CollisionHeadRadiusM": 0.29625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 110,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\346\\001\\353\\001\"",
        "CinematicMoves": "\"i<l\"",
        "AnimTime": "\"\\000\\000@@\\332\\254*?\\000\\000\\000@mV\\325?\\000\\000\\000\\000\\000\\000\\000@mV\\325?\\000\\000\\000\\000\"",
        "Evolution": "\"P\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 36,
        "HeightStdDev": 0.15,
        "WeightStdDev": 4.5,
        "FamilyId": "V0151_FAMILY_MEW",
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0080_MOVE_TWISTER\"",
      "Move": {
        "UniqueId": "V0080_MOVE_TWISTER",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_DRAGON",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.04,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"twister\"",
        "DurationMs": 2700,
        "DamageWindowStartMs": 850,
        "DamageWindowEndMs": 2600,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0080_POKEMON_SLOWBRO\"",
      "Pokemon": {
        "UniqueId": "V0080_POKEMON_SLOWBRO",
        "ModelScale": 0.85,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.7013,
          "CylRadiusM": 0.4675,
          "CylHeightM": 1.275,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.425,
          "CollisionHeightM": 0.85,
          "CollisionHeadRadiusM": 0.255,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 190,
          "BaseAttack": 184,
          "BaseDefense": 198
        },
        "QuickMoves": "\"\\346\\001\\353\\001\"",
        "CinematicMoves": "\"il\\'\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?ff\\006@\\000\\000\\000\\000\\223\\251\\352?\\000\\000\\000@\\000\\000@@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 78.5,
        "ParentId": "V0079_POKEMON_SLOWPOKE",
        "HeightStdDev": 0.2,
        "WeightStdDev": 9.8125,
        "FamilyId": "V0151_FAMILY_MEW"
      }
    },
    {
      "TemplateId": "\"V0081_POKEMON_MAGNEMITE\"",
      "Pokemon": {
        "UniqueId": "V0081_POKEMON_MAGNEMITE",
        "ModelScale": 1.52,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Type2": "POKEMON_TYPE_STEEL",
        "Camera": {
          "DiskRadiusM": 0.684,
          "CylRadiusM": 0.456,
          "CylHeightM": 0.456,
          "CylGroundM": 0.912,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.456,
          "CollisionHeightM": 0.456,
          "CollisionHeadRadiusM": 0.228,
          "MovementType": "POKEMON_ENC_MOVEMENT_ELECTRIC",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 50,
          "BaseAttack": 128,
          "BaseDefense": 138
        },
        "QuickMoves": "\"\\316\\001\\315\\001\"",
        "CinematicMoves": "\"#HO\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\306\\334\\235?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@mV\\225?XU\\225?\"",
        "Evolution": "\"R\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 6,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.75,
        "FamilyId": 81,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0082_MOVE_DRAGON_PULSE\"",
      "Move": {
        "UniqueId": "V0082_MOVE_DRAGON_PULSE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_DRAGON",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.085,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dragon_pulse\"",
        "DurationMs": 3600,
        "DamageWindowStartMs": 2100,
        "DamageWindowEndMs": 3300,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0082_POKEMON_MAGNETON\"",
      "Pokemon": {
        "UniqueId": "V0082_POKEMON_MAGNETON",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Type2": "POKEMON_TYPE_STEEL",
        "Camera": {
          "DiskRadiusM": 0.66,
          "CylRadiusM": 0.44,
          "CylHeightM": 1.1,
          "CylGroundM": 0.44,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.44,
          "CollisionHeightM": 0.825,
          "CollisionHeadRadiusM": 0.22,
          "MovementType": "POKEMON_ENC_MOVEMENT_ELECTRIC",
          "MovementTimerS": 5,
          "JumpTimeS": 1,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 186,
          "BaseDefense": 180
        },
        "QuickMoves": "\"\\316\\001\\315\\001\"",
        "CinematicMoves": "\"#H$\"",
        "AnimTime": "\"\\000\\000\\300?\\332\\254*?\\223\\251\\252?\\332\\254*?\\000\\000\\000\\000\\223\\251\\352?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 60,
        "ParentId": "V0081_POKEMON_MAGNEMITE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 7.5,
        "FamilyId": 81
      }
    },
    {
      "TemplateId": "\"V0083_MOVE_DRAGON_CLAW\"",
      "Move": {
        "UniqueId": "V0083_MOVE_DRAGON_CLAW",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_DRAGON",
        "Power": 40,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dragon_claw\"",
        "DurationMs": 1500,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 1400,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0083_POKEMON_FARFETCHD\"",
      "Pokemon": {
        "UniqueId": "V0083_POKEMON_FARFETCHD",
        "ModelScale": 1.13,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.678,
          "CylRadiusM": 0.452,
          "CylHeightM": 0.8475,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.2825,
          "CollisionHeightM": 0.42375,
          "CollisionHeadRadiusM": 0.2825,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 29,
          "JumpTimeS": 1.25,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 104,
          "BaseAttack": 138,
          "BaseDefense": 132
        },
        "QuickMoves": "\"\\337\\001\\310\\001\"",
        "CinematicMoves": "\"-yu\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\223\\251\\352?\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 15,
        "HeightStdDev": 0.1,
        "WeightStdDev": 1.875,
        "FamilyId": 83
      }
    },
    {
      "TemplateId": "\"V0084_MOVE_DISARMING_VOICE\"",
      "Move": {
        "UniqueId": "V0084_MOVE_DISARMING_VOICE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FAIRY",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.04,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"disarming_voice\"",
        "DurationMs": 3900,
        "DamageWindowStartMs": 1800,
        "DamageWindowEndMs": 3600,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0084_POKEMON_DODUO\"",
      "Pokemon": {
        "UniqueId": "V0084_POKEMON_DODUO",
        "ModelScale": 0.88,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.594,
          "CylRadiusM": 0.396,
          "CylHeightM": 1.232,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.352,
          "CollisionHeightM": 1.232,
          "CollisionHeadRadiusM": 0.198,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 126,
          "BaseDefense": 96
        },
        "QuickMoves": "\"\\323\\001\\333\\001\"",
        "CinematicMoves": "\"&-}\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@-C\\304?\\000\\000\\000\\000\"",
        "Evolution": "\"U\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 39.2,
        "HeightStdDev": 0.175,
        "WeightStdDev": 4.9,
        "FamilyId": 84,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0085_MOVE_DRAINING_KISS\"",
      "Move": {
        "UniqueId": "V0085_MOVE_DRAINING_KISS",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FAIRY",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "HealScalar": 1,
        "StaminaLossScalar": 0.05,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"draining_kiss\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1000,
        "DamageWindowEndMs": 1100,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0085_POKEMON_DODRIO\"",
      "Pokemon": {
        "UniqueId": "V0085_POKEMON_DODRIO",
        "ModelScale": 0.78,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.7722,
          "CylRadiusM": 0.5148,
          "CylHeightM": 1.287,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.39,
          "CollisionHeightM": 1.287,
          "CollisionHeadRadiusM": 0.2574,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1.25,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 182,
          "BaseDefense": 150
        },
        "QuickMoves": "\"\\356\\001\\357\\001\"",
        "CinematicMoves": "\"&-y\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.8,
        "PokedexWeightKg": 85.2,
        "ParentId": "V0084_POKEMON_DODUO",
        "HeightStdDev": 0.225,
        "WeightStdDev": 10.65,
        "FamilyId": 84
      }
    },
    {
      "TemplateId": "\"V0086_MOVE_DAZZLING_GLEAM\"",
      "Move": {
        "UniqueId": "V0086_MOVE_DAZZLING_GLEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FAIRY",
        "Power": 45,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dazzling_gleam\"",
        "DurationMs": 4200,
        "DamageWindowStartMs": 3300,
        "DamageWindowEndMs": 4100,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0086_POKEMON_SEEL\"",
      "Pokemon": {
        "UniqueId": "V0086_POKEMON_SEEL",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.4125,
          "CylRadiusM": 0.275,
          "CylHeightM": 0.55,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.275,
          "CollisionHeightM": 0.4125,
          "CollisionHeadRadiusM": 0.22,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 0.9,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 104,
          "BaseDefense": 138
        },
        "QuickMoves": "\"\\331\\001\\346\\001\"",
        "CinematicMoves": "\"9o:\"",
        "AnimTime": "\"6\\253*@\\332\\254*?\\223\\251\\352?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"W\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 90,
        "HeightStdDev": 0.1375,
        "WeightStdDev": 11.25,
        "FamilyId": 86,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0087_MOVE_MOONBLAST\"",
      "Move": {
        "UniqueId": "V0087_MOVE_MOONBLAST",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FAIRY",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.095,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"moonblast\"",
        "DurationMs": 4100,
        "DamageWindowStartMs": 3500,
        "DamageWindowEndMs": 4100,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0087_POKEMON_DEWGONG\"",
      "Pokemon": {
        "UniqueId": "V0087_POKEMON_DEWGONG",
        "ModelScale": 1.05,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_ICE",
        "Camera": {
          "DiskRadiusM": 0.7875,
          "CylRadiusM": 0.525,
          "CylHeightM": 0.84,
          "CylGroundM": 0.39375,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.315,
          "CollisionHeightM": 0.63,
          "CollisionHeadRadiusM": 0.13125,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 5,
          "JumpTimeS": 1,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 156,
          "BaseDefense": 192
        },
        "QuickMoves": "\"\\332\\001\\331\\001\"",
        "CinematicMoves": "\"o9(\"",
        "AnimTime": "\"\\320D\\004@&SU?mV\\325?\\332\\254*?\\000\\000\\000\\000\\312T\\025@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 120,
        "ParentId": "V0086_POKEMON_SEEL",
        "HeightStdDev": 0.2125,
        "WeightStdDev": 15,
        "FamilyId": 86
      }
    },
    {
      "TemplateId": "\"V0088_MOVE_PLAY_ROUGH\"",
      "Move": {
        "UniqueId": "V0088_MOVE_PLAY_ROUGH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FAIRY",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"play_rough\"",
        "DurationMs": 2900,
        "DamageWindowStartMs": 1400,
        "DamageWindowEndMs": 2700,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0088_POKEMON_GRIMER\"",
      "Pokemon": {
        "UniqueId": "V0088_POKEMON_GRIMER",
        "ModelScale": 0.98,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.882,
          "CylRadiusM": 0.588,
          "CylHeightM": 0.98,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.49,
          "CollisionHeightM": 0.83300012,
          "CollisionHeadRadiusM": 0.294,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 124,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\341\\001\\351\\001\"",
        "CinematicMoves": "\"\\022`Z\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?mV\\325?\\000\\000 AmV\\325?6\\253*@\\000\\000\\000\\000\"",
        "Evolution": "\"Y\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 30,
        "HeightStdDev": 0.1125,
        "WeightStdDev": 3.75,
        "FamilyId": 88,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0089_MOVE_CROSS_POISON\"",
      "Move": {
        "UniqueId": "V0089_MOVE_CROSS_POISON",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.07,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"cross_poison\"",
        "DurationMs": 1500,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 1500,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0089_POKEMON_MUK\"",
      "Pokemon": {
        "UniqueId": "V0089_POKEMON_MUK",
        "ModelScale": 0.76,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 1.14,
          "CylRadiusM": 0.86,
          "CylHeightM": 0.912,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.76,
          "CollisionHeightM": 0.57,
          "CollisionHeadRadiusM": 0.38,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 210,
          "BaseAttack": 180,
          "BaseDefense": 188
        },
        "QuickMoves": "\"\\341\\001\\340\\001\"",
        "CinematicMoves": "\"\\020\\\\[\"",
        "AnimTime": "\"\\000\\000\\000@\\000\\000\\200?mV\\325?6\\253\\n@\\000\\000 A\\000\\000\\000@6\\253*@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 30,
        "ParentId": "V0088_POKEMON_GRIMER",
        "HeightStdDev": 0.15,
        "WeightStdDev": 3.75,
        "FamilyId": 88
      }
    },
    {
      "TemplateId": "\"V0090_MOVE_SLUDGE_BOMB\"",
      "Move": {
        "UniqueId": "V0090_MOVE_SLUDGE_BOMB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"sludge_bomb\"",
        "DurationMs": 2600,
        "DamageWindowStartMs": 1950,
        "DamageWindowEndMs": 2450,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0090_POKEMON_SHELLDER\"",
      "Pokemon": {
        "UniqueId": "V0090_POKEMON_SHELLDER",
        "ModelScale": 1.68,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5796,
          "CylRadiusM": 0.3864,
          "CylHeightM": 0.504,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.336,
          "CollisionHeightM": 0.504,
          "CollisionHeadRadiusM": 0.294,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1.2,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 120,
          "BaseDefense": 112
        },
        "QuickMoves": "\"\\331\\001\\335\\001\"",
        "CinematicMoves": "\"5io\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000mV\\325?6\\253*@\\000\\000\\000\\000\"",
        "Evolution": "\"[\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 4,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.5,
        "FamilyId": 90,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0091_MOVE_SLUDGE_WAVE\"",
      "Move": {
        "UniqueId": "V0091_MOVE_SLUDGE_WAVE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.095,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"sludge_wave\"",
        "DurationMs": 3400,
        "DamageWindowStartMs": 2400,
        "DamageWindowEndMs": 3300,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0091_POKEMON_CLOYSTER\"",
      "Pokemon": {
        "UniqueId": "V0091_POKEMON_CLOYSTER",
        "ModelScale": 0.84,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_ICE",
        "Camera": {
          "DiskRadiusM": 0.945,
          "CylRadiusM": 0.63,
          "CylHeightM": 1.05,
          "CylGroundM": 0.42,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.42,
          "CollisionHeightM": 1.05,
          "CollisionHeadRadiusM": 0.54599988,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 196,
          "BaseDefense": 196
        },
        "QuickMoves": "\"\\332\\001\\331\\001\"",
        "CinematicMoves": "\"ok(\"",
        "AnimTime": "\"0\\273\\033@\\332\\254*?\\306\\334\\335?\\332\\254*?\\000\\000\\000\\000\\312T\\025@\\323\\274\\373?33s@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 132.5,
        "ParentId": "V0090_POKEMON_SHELLDER",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 16.5625,
        "FamilyId": 90
      }
    },
    {
      "TemplateId": "\"V0092_MOVE_GUNK_SHOT\"",
      "Move": {
        "UniqueId": "V0092_MOVE_GUNK_SHOT",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.12,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"gunk_shot\"",
        "DurationMs": 3000,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 2400,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0092_POKEMON_GASTLY\"",
      "Pokemon": {
        "UniqueId": "V0092_POKEMON_GASTLY",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GHOST",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.675,
          "CylRadiusM": 0.45,
          "CylHeightM": 0.8,
          "CylGroundM": 0.6,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.6,
          "CollisionHeadRadiusM": 0.3,
          "MovementType": "POKEMON_ENC_MOVEMENT_PSYCHIC",
          "MovementTimerS": 29,
          "JumpTimeS": 1,
          "AttackTimerS": 10
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 136,
          "BaseDefense": 82
        },
        "QuickMoves": "\"\\324\\001\\313\\001\"",
        "CinematicMoves": "\"E\\020Z\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?\\000\\000\\200?\\000\\000\\000\\000\\375\\207\\010@\\375\\207\\010@\\000\\000\\000\\000\"",
        "Evolution": "\"]\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 0.1,
        "HeightStdDev": 0.1625,
        "WeightStdDev": 0.0125,
        "FamilyId": 92,
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0093_POKEMON_HAUNTER\"",
      "Pokemon": {
        "UniqueId": "V0093_POKEMON_HAUNTER",
        "ModelScale": 0.68,
        "Type1": "POKEMON_TYPE_GHOST",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.765,
          "CylRadiusM": 0.51,
          "CylHeightM": 1.088,
          "CylGroundM": 0.34,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.442,
          "CollisionHeightM": 1.156,
          "CollisionHeadRadiusM": 0.442,
          "MovementType": "POKEMON_ENC_MOVEMENT_PSYCHIC",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 172,
          "BaseDefense": 118
        },
        "QuickMoves": "\"\\325\\001\\324\\001\"",
        "CinematicMoves": "\"F\\020Z\"",
        "AnimTime": "\"6\\253\\n@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\000\\312T\\025@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"^\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 0.1,
        "ParentId": "V0092_POKEMON_GASTLY",
        "HeightStdDev": 0.2,
        "WeightStdDev": 0.0125,
        "FamilyId": 92,
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0094_MOVE_BONE_CLUB\"",
      "Move": {
        "UniqueId": "V0094_MOVE_BONE_CLUB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bone_club\"",
        "DurationMs": 1600,
        "DamageWindowStartMs": 1250,
        "DamageWindowEndMs": 1500,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0094_POKEMON_GENGAR\"",
      "Pokemon": {
        "UniqueId": "V0094_POKEMON_GENGAR",
        "ModelScale": 0.84,
        "Type1": "POKEMON_TYPE_GHOST",
        "Type2": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.693,
          "CylRadiusM": 0.462,
          "CylHeightM": 1.176,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.462,
          "CollisionHeightM": 1.092,
          "CollisionHeadRadiusM": 0.504,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.3,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 204,
          "BaseDefense": 156
        },
        "QuickMoves": "\"\\313\\001\\325\\001\"",
        "CinematicMoves": "\"F\\020[\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?\\223\\251\\252?XU\\325?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 40.5,
        "ParentId": "V0093_POKEMON_HAUNTER",
        "HeightStdDev": 0.1875,
        "WeightStdDev": 5.0625,
        "FamilyId": 92
      }
    },
    {
      "TemplateId": "\"V0095_MOVE_BULLDOZE\"",
      "Move": {
        "UniqueId": "V0095_MOVE_BULLDOZE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bulldoze\"",
        "DurationMs": 3400,
        "DamageWindowStartMs": 1900,
        "DamageWindowEndMs": 3000,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0095_POKEMON_ONIX\"",
      "Pokemon": {
        "UniqueId": "V0095_POKEMON_ONIX",
        "ModelScale": 0.47,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.987,
          "CylRadiusM": 0.658,
          "CylHeightM": 1.41,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.658,
          "CollisionHeightM": 1.175,
          "CollisionHeadRadiusM": 0.376,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 17,
          "JumpTimeS": 1,
          "AttackTimerS": 6
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 90,
          "BaseDefense": 186
        },
        "QuickMoves": "\"\\343\\001\\335\\001\"",
        "CinematicMoves": "\"@ J\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?\\306\\334\\335?\\306\\334\\335?\\000\\000\\000\\000\\312T\\025@\\226!\\002@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 8.8,
        "PokedexWeightKg": 210,
        "HeightStdDev": 1.1,
        "WeightStdDev": 26.25,
        "FamilyId": 95
      }
    },
    {
      "TemplateId": "\"V0096_MOVE_MUD_BOMB\"",
      "Move": {
        "UniqueId": "V0096_MOVE_MUD_BOMB",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"mud_bomb\"",
        "DurationMs": 2600,
        "DamageWindowStartMs": 2050,
        "DamageWindowEndMs": 2500,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0096_POKEMON_DROWZEE\"",
      "Pokemon": {
        "UniqueId": "V0096_POKEMON_DROWZEE",
        "ModelScale": 1.05,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.63,
          "CylRadiusM": 0.42,
          "CylHeightM": 1.05,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.3675,
          "CollisionHeightM": 0.63,
          "CollisionHeadRadiusM": 0.2625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 104,
          "BaseDefense": 140
        },
        "QuickMoves": "\"\\336\\001\\353\\001\"",
        "CinematicMoves": "\"\\036<l\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?mV\\325?:#\\342?\\000\\000\\000\\000\\000\\000\\000@\\312T\\025@\\000\\000\\000\\000\"",
        "Evolution": "\"a\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 32.4,
        "HeightStdDev": 0.125,
        "WeightStdDev": 4.05,
        "FamilyId": 96,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0097_POKEMON_HYPNO\"",
      "Pokemon": {
        "UniqueId": "V0097_POKEMON_HYPNO",
        "ModelScale": 0.83,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.9338,
          "CylRadiusM": 0.6225,
          "CylHeightM": 1.328,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.332,
          "CollisionHeightM": 0.83,
          "CollisionHeadRadiusM": 0.332,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 0.8,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 170,
          "BaseAttack": 162,
          "BaseDefense": 196
        },
        "QuickMoves": "\"\\352\\001\\353\\001\"",
        "CinematicMoves": "\"<lF\"",
        "AnimTime": "\"\\007\\360\\356?\\332\\254*?\\000\\000\\000@`v\\267?\\000\\000\\000\\0006\\253*@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 75.6,
        "ParentId": "V0096_POKEMON_DROWZEE",
        "HeightStdDev": 0.2,
        "WeightStdDev": 9.45,
        "FamilyId": 96
      }
    },
    {
      "TemplateId": "\"V0098_POKEMON_KRABBY\"",
      "Pokemon": {
        "UniqueId": "V0098_POKEMON_KRABBY",
        "ModelScale": 1.16,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.783,
          "CylRadiusM": 0.522,
          "CylHeightM": 0.87,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.522,
          "CollisionHeightM": 0.87,
          "CollisionHeadRadiusM": 0.261,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 116,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\355\\001\\330\\001\"",
        "CinematicMoves": "\"\\0245i\"",
        "AnimTime": "\"`v\\267?\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\312T\\025@\\223\\251\\252?\\000\\000\\000\\000\"",
        "Evolution": "\"c\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 6.5,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.8125,
        "FamilyId": 98,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0099_MOVE_SIGNAL_BEAM\"",
      "Move": {
        "UniqueId": "V0099_MOVE_SIGNAL_BEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"signal_beam\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 3000,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0099_POKEMON_KINGLER\"",
      "Pokemon": {
        "UniqueId": "V0099_POKEMON_KINGLER",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.9788,
          "CylRadiusM": 0.6525,
          "CylHeightM": 1.0005,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.6525,
          "CollisionHeightM": 1.0005,
          "CollisionHeadRadiusM": 0.32625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 0.8,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 178,
          "BaseDefense": 168
        },
        "QuickMoves": "\"\\344\\001\\330\\001\"",
        "CinematicMoves": "\"\\024di\"",
        "AnimTime": "\"\\235\\021\\021@\\332\\254*?ff\\346?\\240\\211\\310?\\000\\000\\000\\000\\000\\000\\000@-C\\304?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 60,
        "ParentId": "V0098_POKEMON_KRABBY",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 7.5,
        "FamilyId": 98
      }
    },
    {
      "TemplateId": "\"V0100_MOVE_X_SCISSOR\"",
      "Move": {
        "UniqueId": "V0100_MOVE_X_SCISSOR",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"x_scissor\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1350,
        "DamageWindowEndMs": 1600,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0100_POKEMON_VOLTORB\"",
      "Pokemon": {
        "UniqueId": "V0100_POKEMON_VOLTORB",
        "ModelScale": 1.35,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.5063,
          "CylRadiusM": 0.3375,
          "CylHeightM": 0.675,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.3375,
          "CollisionHeightM": 0.675,
          "CollisionHeadRadiusM": 0.16875,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.2,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 102,
          "BaseDefense": 124
        },
        "QuickMoves": "\"\\316\\001\\335\\001\"",
        "CinematicMoves": "\"#Oc\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\312T\\025@\\000\\000\\000@\\000\\000\\000@\"",
        "Evolution": "\"e\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 10.4,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 1.3,
        "FamilyId": 100,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0101_MOVE_FLAME_CHARGE\"",
      "Move": {
        "UniqueId": "V0101_MOVE_FLAME_CHARGE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.05,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"flame_charge\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 2700,
        "DamageWindowEndMs": 2900,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0101_POKEMON_ELECTRODE\"",
      "Pokemon": {
        "UniqueId": "V0101_POKEMON_ELECTRODE",
        "ModelScale": 0.92,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.828,
          "CylRadiusM": 0.552,
          "CylHeightM": 1.104,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.552,
          "CollisionHeightM": 1.104,
          "CollisionHeadRadiusM": 0.276,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.2,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 150,
          "BaseDefense": 174
        },
        "QuickMoves": "\"\\316\\001\\335\\001\"",
        "CinematicMoves": "\"#O\\016\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\312T\\025@\\000\\000@@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 66.6,
        "ParentId": "V0100_POKEMON_VOLTORB",
        "HeightStdDev": 0.15,
        "WeightStdDev": 8.325,
        "FamilyId": 100
      }
    },
    {
      "TemplateId": "\"V0102_MOVE_FLAME_BURST\"",
      "Move": {
        "UniqueId": "V0102_MOVE_FLAME_BURST",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.07,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"flame_burst\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 1600,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0102_POKEMON_EXEGGCUTE\"",
      "Pokemon": {
        "UniqueId": "V0102_POKEMON_EXEGGCUTE",
        "ModelScale": 1.03,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.7725,
          "CylRadiusM": 0.515,
          "CylHeightM": 0.412,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.515,
          "CollisionHeightM": 0.412,
          "CollisionHeadRadiusM": 0.2575,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 110,
          "BaseDefense": 132
        },
        "QuickMoves": "\"\\353\\001\"",
        "CinematicMoves": "\";l>\"",
        "AnimTime": "\"\\000\\000 @\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"g\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 2.5,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.3125,
        "FamilyId": 102,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0103_MOVE_FIRE_BLAST\"",
      "Move": {
        "UniqueId": "V0103_MOVE_FIRE_BLAST",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"fire_blast\"",
        "DurationMs": 4100,
        "DamageWindowStartMs": 3600,
        "DamageWindowEndMs": 4000,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0103_POKEMON_EXEGGUTOR\"",
      "Pokemon": {
        "UniqueId": "V0103_POKEMON_EXEGGUTOR",
        "ModelScale": 0.78,
        "Type1": "POKEMON_TYPE_GRASS",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.7605,
          "CylRadiusM": 0.507,
          "CylHeightM": 1.365,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.507,
          "CollisionHeightM": 1.365,
          "CollisionHeadRadiusM": 0.2535,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 190,
          "BaseAttack": 232,
          "BaseDefense": 164
        },
        "QuickMoves": "\"\\353\\001\\352\\001\"",
        "CinematicMoves": "\";lt\"",
        "AnimTime": "\"j\\336\\035@\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000\\315\\314\\014@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2,
        "PokedexWeightKg": 120,
        "ParentId": "V0102_POKEMON_EXEGGCUTE",
        "HeightStdDev": 0.25,
        "WeightStdDev": 15,
        "FamilyId": 102
      }
    },
    {
      "TemplateId": "\"V0104_MOVE_BRINE\"",
      "Move": {
        "UniqueId": "V0104_MOVE_BRINE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"brine\"",
        "DurationMs": 2400,
        "DamageWindowStartMs": 1650,
        "DamageWindowEndMs": 2000,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0104_POKEMON_CUBONE\"",
      "Pokemon": {
        "UniqueId": "V0104_POKEMON_CUBONE",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.444,
          "CylRadiusM": 0.296,
          "CylHeightM": 0.592,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.222,
          "CollisionHeightM": 0.37,
          "CollisionHeadRadiusM": 0.222,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 102,
          "BaseDefense": 150
        },
        "QuickMoves": "\"\\351\\001\\361\\001\"",
        "CinematicMoves": "\"^\\032_\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?\\315\\314\\314?\\315\\314\\314?\\000\\000\\000\\000\\223\\251\\352?\\315\\314\\314?\\000\\000\\000\\000\"",
        "Evolution": "\"i\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 6.5,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.8125,
        "FamilyId": 104,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0105_MOVE_WATER_PULSE\"",
      "Move": {
        "UniqueId": "V0105_MOVE_WATER_PULSE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"water_pulse\"",
        "DurationMs": 3300,
        "DamageWindowStartMs": 1900,
        "DamageWindowEndMs": 2900,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0105_POKEMON_MAROWAK\"",
      "Pokemon": {
        "UniqueId": "V0105_POKEMON_MAROWAK",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GROUND",
        "Camera": {
          "DiskRadiusM": 0.525,
          "CylRadiusM": 0.35,
          "CylHeightM": 1,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.75,
          "CollisionHeadRadiusM": 0.25,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 0.85,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 140,
          "BaseDefense": 202
        },
        "QuickMoves": "\"\\351\\001\\361\\001\"",
        "CinematicMoves": "\"^\\032\\037\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@33\\263?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 45,
        "ParentId": "V0104_POKEMON_CUBONE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 5.625,
        "FamilyId": 104
      }
    },
    {
      "TemplateId": "\"V0106_MOVE_SCALD\"",
      "Move": {
        "UniqueId": "V0106_MOVE_SCALD",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"scald\"",
        "DurationMs": 4000,
        "DamageWindowStartMs": 1800,
        "DamageWindowEndMs": 3900,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0106_POKEMON_HITMONLEE\"",
      "Pokemon": {
        "UniqueId": "V0106_POKEMON_HITMONLEE",
        "ModelScale": 0.83,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.6225,
          "CylRadiusM": 0.415,
          "CylHeightM": 1.245,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.415,
          "CollisionHeightM": 1.245,
          "CollisionHeadRadiusM": 0.2075,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 0.8,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 148,
          "BaseDefense": 172
        },
        "QuickMoves": "\"\\317\\001\\361\\001\"",
        "CinematicMoves": "\"\\1778 \"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@\\300\\354n?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 49.8,
        "HeightStdDev": 0.1875,
        "WeightStdDev": 6.225,
        "FamilyId": 106
      }
    },
    {
      "TemplateId": "\"V0107_MOVE_HYDRO_PUMP\"",
      "Move": {
        "UniqueId": "V0107_MOVE_HYDRO_PUMP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"hydro_pump\"",
        "DurationMs": 3800,
        "DamageWindowStartMs": 1500,
        "DamageWindowEndMs": 3600,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0107_POKEMON_HITMONCHAN\"",
      "Pokemon": {
        "UniqueId": "V0107_POKEMON_HITMONCHAN",
        "ModelScale": 1.02,
        "Type1": "POKEMON_TYPE_FIGHTING",
        "Camera": {
          "DiskRadiusM": 0.6885,
          "CylRadiusM": 0.459,
          "CylHeightM": 1.428,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.3315,
          "CollisionHeightM": 1.02,
          "CollisionHeadRadiusM": 0.255,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 100,
          "BaseAttack": 138,
          "BaseDefense": 204
        },
        "QuickMoves": "\"\\345\\001\\361\\001\"",
        "CinematicMoves": "\"s!M{\"",
        "AnimTime": "\"\\000\\000\\300?\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\306\\334\\335?\\332\\254*?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 50.2,
        "HeightStdDev": 0.175,
        "WeightStdDev": 6.275,
        "FamilyId": 107
      }
    },
    {
      "TemplateId": "\"V0108_MOVE_PSYCHIC\"",
      "Move": {
        "UniqueId": "V0108_MOVE_PSYCHIC",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"psychic\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1600,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0108_POKEMON_LICKITUNG\"",
      "Pokemon": {
        "UniqueId": "V0108_POKEMON_LICKITUNG",
        "ModelScale": 0.92,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.69,
          "CylRadiusM": 0.46,
          "CylHeightM": 1.104,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.46,
          "CollisionHeightM": 0.92,
          "CollisionHeadRadiusM": 0.253,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 23,
          "JumpTimeS": 1.25,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 126,
          "BaseDefense": 160
        },
        "QuickMoves": "\"\\324\\001\\352\\001\"",
        "CinematicMoves": "\"\\016\\177v\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\306\\334\\335?\\000\\000\\000\\000\\000\\000\\000@\\315\\314L?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 65.5,
        "HeightStdDev": 0.15,
        "WeightStdDev": 8.1875,
        "FamilyId": 108
      }
    },
    {
      "TemplateId": "\"V0109_MOVE_PSYSTRIKE\"",
      "Move": {
        "UniqueId": "V0109_MOVE_PSYSTRIKE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 70,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"psystrike\"",
        "DurationMs": 5100,
        "DamageWindowStartMs": 4400,
        "DamageWindowEndMs": 5300,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0109_POKEMON_KOFFING\"",
      "Pokemon": {
        "UniqueId": "V0109_POKEMON_KOFFING",
        "ModelScale": 1.2,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.72,
          "CylRadiusM": 0.48,
          "CylHeightM": 0.72,
          "CylGroundM": 0.6,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.36,
          "CollisionHeightM": 0.66,
          "CollisionHeadRadiusM": 0.6,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 136,
          "BaseDefense": 142
        },
        "QuickMoves": "\"\\341\\001\\335\\001\"",
        "CinematicMoves": "\"\\022Z\\020\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\000\\000\\300?\\332\\254*?VU\\325@\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"n\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 1,
        "HeightStdDev": 0.075,
        "WeightStdDev": 0.125,
        "FamilyId": 109,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0110_POKEMON_WEEZING\"",
      "Pokemon": {
        "UniqueId": "V0110_POKEMON_WEEZING",
        "ModelScale": 1.24,
        "Type1": "POKEMON_TYPE_POISON",
        "Camera": {
          "DiskRadiusM": 0.93,
          "CylRadiusM": 0.62,
          "CylHeightM": 0.744,
          "CylGroundM": 0.62,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.682,
          "CollisionHeightM": 0.744,
          "CollisionHeadRadiusM": 0.465,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 4,
          "JumpTimeS": 1,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 190,
          "BaseDefense": 198
        },
        "QuickMoves": "\"\\341\\001\\335\\001\"",
        "CinematicMoves": "\"ZF\\020\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\332\\254*?TUU@j\\336\\035@6\\253*@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 9.5,
        "ParentId": "V0109_POKEMON_KOFFING",
        "HeightStdDev": 0.15,
        "WeightStdDev": 1.1875,
        "FamilyId": 109
      }
    },
    {
      "TemplateId": "\"V0111_MOVE_ICY_WIND\"",
      "Move": {
        "UniqueId": "V0111_MOVE_ICY_WIND",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.055,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"icy_wind\"",
        "DurationMs": 3800,
        "DamageWindowStartMs": 2000,
        "DamageWindowEndMs": 2700,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0111_POKEMON_RHYHORN\"",
      "Pokemon": {
        "UniqueId": "V0111_POKEMON_RHYHORN",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GROUND",
        "Type2": "POKEMON_TYPE_ROCK",
        "Camera": {
          "DiskRadiusM": 0.75,
          "CylRadiusM": 0.5,
          "CylHeightM": 0.85,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.5,
          "CollisionHeightM": 0.85,
          "CollisionHeadRadiusM": 0.3,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.25,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 110,
          "BaseDefense": 116
        },
        "QuickMoves": "\"\\351\\001\\361\\001\"",
        "CinematicMoves": "\"_~\\177\"",
        "AnimTime": "\":#\\342?\\000\\000\\200?\\000\\000\\300?\\223\\251\\352?\\000\\000\\000\\0006\\253*@\\232\\231\\031@\\000\\000\\000\\000\"",
        "Evolution": "\"p\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 115,
        "HeightStdDev": 0.125,
        "WeightStdDev": 14.375,
        "FamilyId": 111,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0112_POKEMON_RHYDON\"",
      "Pokemon": {
        "UniqueId": "V0112_POKEMON_RHYDON",
        "ModelScale": 0.79,
        "Type1": "POKEMON_TYPE_GROUND",
        "Type2": "POKEMON_TYPE_ROCK",
        "Camera": {
          "DiskRadiusM": 1.185,
          "CylRadiusM": 0.79,
          "CylHeightM": 1.343,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.5925,
          "CollisionHeightM": 1.185,
          "CollisionHeadRadiusM": 0.395,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 210,
          "BaseAttack": 166,
          "BaseDefense": 160
        },
        "QuickMoves": "\"\\351\\001\\361\\001\"",
        "CinematicMoves": "\"\\026\\037 \"",
        "AnimTime": "\"\\232\\231\\331?\\332\\254*?ff\\006@\\232\\231\\331?\\000\\000\\000\\000\\000\\000\\000@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.9,
        "PokedexWeightKg": 120,
        "ParentId": "V0111_POKEMON_RHYHORN",
        "HeightStdDev": 0.2375,
        "WeightStdDev": 15,
        "FamilyId": 111
      }
    },
    {
      "TemplateId": "\"V0113_POKEMON_CHANSEY\"",
      "Pokemon": {
        "UniqueId": "V0113_POKEMON_CHANSEY",
        "ModelScale": 0.96,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.72,
          "CylRadiusM": 0.48,
          "CylHeightM": 1.056,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.48,
          "CollisionHeightM": 1.056,
          "CollisionHeadRadiusM": 0.24,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 500,
          "BaseAttack": 40,
          "BaseDefense": 60
        },
        "QuickMoves": "\"\\336\\001\\352\\001\"",
        "CinematicMoves": "\"l\\036V\"",
        "AnimTime": "\"6\\253\\n@\\332\\254*?\\000\\000\\000@\\240\\211\\310?\\000\\000\\000\\0006\\253\\n@\\306\\334\\335?XU\\325?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 34.6,
        "HeightStdDev": 0.1375,
        "WeightStdDev": 4.325,
        "FamilyId": 113
      }
    },
    {
      "TemplateId": "\"V0114_MOVE_GIGA_DRAIN\"",
      "Move": {
        "UniqueId": "V0114_MOVE_GIGA_DRAIN",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "HealScalar": 0.5,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"giga_drain\"",
        "DurationMs": 3600,
        "DamageWindowStartMs": 350,
        "DamageWindowEndMs": 1500,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0114_POKEMON_TANGELA\"",
      "Pokemon": {
        "UniqueId": "V0114_POKEMON_TANGELA",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_GRASS",
        "Camera": {
          "DiskRadiusM": 1.095,
          "CylRadiusM": 0.73,
          "CylHeightM": 1,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.5,
          "CollisionHeightM": 0.9,
          "CollisionHeadRadiusM": 0.365,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.25,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 164,
          "BaseDefense": 152
        },
        "QuickMoves": "\"\\326\\001\"",
        "CinematicMoves": "\"vZt\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?\\223\\251\\352?\\223\\251\\352?\\000\\000\\000\\000\\000\\000 @\\007\\360\\356?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 35,
        "HeightStdDev": 0.125,
        "WeightStdDev": 4.375,
        "FamilyId": 114
      }
    },
    {
      "TemplateId": "\"V0115_MOVE_FIRE_PUNCH\"",
      "Move": {
        "UniqueId": "V0115_MOVE_FIRE_PUNCH",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"fire_punch\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1690,
        "DamageWindowEndMs": 2200,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0115_POKEMON_KANGASKHAN\"",
      "Pokemon": {
        "UniqueId": "V0115_POKEMON_KANGASKHAN",
        "ModelScale": 0.72,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.864,
          "CylRadiusM": 0.576,
          "CylHeightM": 1.584,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.504,
          "CollisionHeightM": 1.26,
          "CollisionHeadRadiusM": 0.36,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 0.7,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 210,
          "BaseAttack": 142,
          "BaseDefense": 178
        },
        "QuickMoves": "\"\\351\\001\\317\\001\"",
        "CinematicMoves": "\"{\\037\\177\"",
        "AnimTime": "\"\\375\\207\\010@\\332\\254*?mV\\325?\\000\\000\\300?\\000\\000\\000\\000\\312T\\025@\\312T\\025@TU\\025@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2.2,
        "PokedexWeightKg": 80,
        "HeightStdDev": 0.275,
        "WeightStdDev": 10,
        "FamilyId": 115
      }
    },
    {
      "TemplateId": "\"V0116_MOVE_SOLAR_BEAM\"",
      "Move": {
        "UniqueId": "V0116_MOVE_SOLAR_BEAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 65,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.12,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"solar_beam\"",
        "DurationMs": 4900,
        "DamageWindowStartMs": 3100,
        "DamageWindowEndMs": 4800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0116_POKEMON_HORSEA\"",
      "Pokemon": {
        "UniqueId": "V0116_POKEMON_HORSEA",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.2775,
          "CylRadiusM": 0.25,
          "CylHeightM": 0.74,
          "CylGroundM": 0.185,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.148,
          "CollisionHeightM": 0.444,
          "CollisionHeadRadiusM": 0.185,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 122,
          "BaseDefense": 100
        },
        "QuickMoves": "\"\\346\\001\\355\\001\"",
        "CinematicMoves": "\"5R$\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?\\306\\334\\335?&SU?\\237\\252\\252>mV\\325?\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"u\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 8,
        "HeightStdDev": 0.05,
        "WeightStdDev": 1,
        "FamilyId": 116,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0117_MOVE_LEAF_BLADE\"",
      "Move": {
        "UniqueId": "V0117_MOVE_LEAF_BLADE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 45,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.09,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"leaf_blade\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 2200,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0117_POKEMON_SEADRA\"",
      "Pokemon": {
        "UniqueId": "V0117_POKEMON_SEADRA",
        "ModelScale": 0.92,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.69,
          "CylRadiusM": 0.46,
          "CylHeightM": 1.15,
          "CylGroundM": 0.46,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.322,
          "CollisionHeightM": 0.46,
          "CollisionHeadRadiusM": 0.414,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 176,
          "BaseDefense": 150
        },
        "QuickMoves": "\"\\346\\001\\314\\001\"",
        "CinematicMoves": "\"(Rk\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\000\\223\\251\\352?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.2,
        "PokedexWeightKg": 25,
        "ParentId": "V0116_POKEMON_HORSEA",
        "HeightStdDev": 0.15,
        "WeightStdDev": 3.125,
        "FamilyId": 116
      }
    },
    {
      "TemplateId": "\"V0118_MOVE_POWER_WHIP\"",
      "Move": {
        "UniqueId": "V0118_MOVE_POWER_WHIP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 60,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.12,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"power_whip\"",
        "DurationMs": 2800,
        "DamageWindowStartMs": 1500,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0118_POKEMON_GOLDEEN\"",
      "Pokemon": {
        "UniqueId": "V0118_POKEMON_GOLDEEN",
        "ModelScale": 1.35,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.405,
          "CylRadiusM": 0.27,
          "CylHeightM": 0.3375,
          "CylGroundM": 0.3375,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.135,
          "CollisionHeightM": 0.16875,
          "CollisionHeadRadiusM": 0.16875,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 10,
          "JumpTimeS": 1,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 90,
          "BaseAttack": 112,
          "BaseDefense": 126
        },
        "QuickMoves": "\"\\323\\001\\330\\001\"",
        "CinematicMoves": "\"i~:\"",
        "AnimTime": "\"\\000\\000@@\\000\\000\\200?mV\\325?\\332\\254*?\\000\\000\\000\\0006\\253\\n@33\\023@\\000\\000\\000\\000\"",
        "Evolution": "\"w\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.6,
        "PokedexWeightKg": 15,
        "HeightStdDev": 0.075,
        "WeightStdDev": 1.875,
        "FamilyId": 118,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0119_POKEMON_SEAKING\"",
      "Pokemon": {
        "UniqueId": "V0119_POKEMON_SEAKING",
        "ModelScale": 0.88,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.594,
          "CylRadiusM": 0.396,
          "CylHeightM": 0.748,
          "CylGroundM": 0.33,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.044,
          "CollisionHeightM": 0.044,
          "CollisionHeadRadiusM": 0.242,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 172,
          "BaseDefense": 160
        },
        "QuickMoves": "\"\\323\\001\\340\\001\"",
        "CinematicMoves": "\"o.\\026\"",
        "AnimTime": "\"\\000\\000`@\\332\\254*?mV\\325?&SU?\\000\\000\\000\\000mV\\325?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 39,
        "ParentId": "V0118_POKEMON_GOLDEEN",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 4.875,
        "FamilyId": 118
      }
    },
    {
      "TemplateId": "\"V0120_POKEMON_STARYU\"",
      "Pokemon": {
        "UniqueId": "V0120_POKEMON_STARYU",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.6188,
          "CylRadiusM": 0.4125,
          "CylHeightM": 0.88000011,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.4,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.4125,
          "CollisionHeightM": 0.88000011,
          "CollisionHeadRadiusM": 0.20625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.35,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 130,
          "BaseDefense": 128
        },
        "QuickMoves": "\"\\333\\001\\346\\001\"",
        "CinematicMoves": "\"}5A\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000mV\\325?\\000\\000\\000@\\000\\000\\000@\"",
        "Evolution": "\"y\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 34.5,
        "HeightStdDev": 0.1,
        "WeightStdDev": 4.3125,
        "FamilyId": 120,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0121_MOVE_AIR_CUTTER\"",
      "Move": {
        "UniqueId": "V0121_MOVE_AIR_CUTTER",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"air_cutter\"",
        "DurationMs": 3300,
        "DamageWindowStartMs": 2200,
        "DamageWindowEndMs": 3100,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0121_POKEMON_STARMIE\"",
      "Pokemon": {
        "UniqueId": "V0121_POKEMON_STARMIE",
        "ModelScale": 0.97,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.7275,
          "CylRadiusM": 0.485,
          "CylHeightM": 1.067,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.485,
          "CollisionHeightM": 1.067,
          "CollisionHeadRadiusM": 0.2425,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1.6,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 194,
          "BaseDefense": 192
        },
        "QuickMoves": "\"\\333\\001\\346\\001\"",
        "CinematicMoves": "\"kA\\036\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?\\007\\360\\356?ff\\006@\\000\\000\\000\\0006\\253*@33\\363?ff\\006@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 80,
        "ParentId": "V0120_POKEMON_STARYU",
        "HeightStdDev": 0.1375,
        "WeightStdDev": 10,
        "FamilyId": 120
      }
    },
    {
      "TemplateId": "\"V0122_MOVE_HURRICANE\"",
      "Move": {
        "UniqueId": "V0122_MOVE_HURRICANE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"hurricane\"",
        "DurationMs": 3200,
        "DamageWindowStartMs": 1030,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0122_POKEMON_MR_MIME\"",
      "Pokemon": {
        "UniqueId": "V0122_POKEMON_MR_MIME",
        "ModelScale": 0.89,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Type2": "POKEMON_TYPE_FAIRY",
        "Camera": {
          "DiskRadiusM": 0.6675,
          "CylRadiusM": 0.445,
          "CylHeightM": 1.157,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.267,
          "CollisionHeightM": 0.6675,
          "CollisionHeadRadiusM": 0.267,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 5,
          "JumpTimeS": 1,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 80,
          "BaseAttack": 154,
          "BaseDefense": 196
        },
        "QuickMoves": "\"\\353\\001\\352\\001\"",
        "CinematicMoves": "\"\\036lF\"",
        "AnimTime": "\"6\\253*@&SU?\\223\\251\\352?\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\226!\\\"@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 54.5,
        "HeightStdDev": 0.1625,
        "WeightStdDev": 6.8125,
        "FamilyId": 122
      }
    },
    {
      "TemplateId": "\"V0123_MOVE_BRICK_BREAK\"",
      "Move": {
        "UniqueId": "V0123_MOVE_BRICK_BREAK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 30,
        "AccuracyChance": 1,
        "CriticalChance": 0.25,
        "StaminaLossScalar": 0.075,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"brick_break\"",
        "DurationMs": 1600,
        "DamageWindowStartMs": 1100,
        "DamageWindowEndMs": 1500,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0123_POKEMON_SCYTHER\"",
      "Pokemon": {
        "UniqueId": "V0123_POKEMON_SCYTHER",
        "ModelScale": 0.8,
        "Type1": "POKEMON_TYPE_BUG",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 1.14,
          "CylRadiusM": 0.76,
          "CylHeightM": 1.2,
          "CylGroundM": 0.4,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.4,
          "CollisionHeightM": 1,
          "CollisionHeadRadiusM": 0.2,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 14,
          "JumpTimeS": 1,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 176,
          "BaseDefense": 180
        },
        "QuickMoves": "\"\\310\\001\\357\\001\"",
        "CinematicMoves": "\"3d1\"",
        "AnimTime": "\"\\306\\334\\335?\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 56,
        "HeightStdDev": 0.1875,
        "WeightStdDev": 7,
        "FamilyId": 123
      }
    },
    {
      "TemplateId": "\"V0124_POKEMON_JYNX\"",
      "Pokemon": {
        "UniqueId": "V0124_POKEMON_JYNX",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_ICE",
        "Type2": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.9788,
          "CylRadiusM": 0.6525,
          "CylHeightM": 1.218,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.435,
          "CollisionHeightM": 0.87,
          "CollisionHeadRadiusM": 0.522,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.25,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 172,
          "BaseDefense": 134
        },
        "QuickMoves": "\"\\332\\001\\336\\001\"",
        "CinematicMoves": "\"U!<\"",
        "AnimTime": "\"\\235\\021\\021@\\332\\254*?mV\\325?:#\\342?\\000\\000\\000\\000\\007\\360\\356?\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 40.6,
        "HeightStdDev": 0.175,
        "WeightStdDev": 5.075,
        "FamilyId": 124
      }
    },
    {
      "TemplateId": "\"V0125_MOVE_SWIFT\"",
      "Move": {
        "UniqueId": "V0125_MOVE_SWIFT",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"swift\"",
        "DurationMs": 3000,
        "DamageWindowStartMs": 2300,
        "DamageWindowEndMs": 2800,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0125_POKEMON_ELECTABUZZ\"",
      "Pokemon": {
        "UniqueId": "V0125_POKEMON_ELECTABUZZ",
        "ModelScale": 0.98,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.8453,
          "CylRadiusM": 0.5635,
          "CylHeightM": 0.98,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.392,
          "CollisionHeightM": 0.735,
          "CollisionHeadRadiusM": 0.28175,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 6,
          "JumpTimeS": 1,
          "AttackTimerS": 17
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 198,
          "BaseDefense": 160
        },
        "QuickMoves": "\"\\315\\001\\317\\001\"",
        "CinematicMoves": "\"MON\"",
        "AnimTime": "\"\\000\\000\\300?\\332\\254*?\\000\\000\\300?\\000\\000\\300?\\000\\000\\000\\000mV\\325?\\223\\251\\252?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.1,
        "PokedexWeightKg": 30,
        "HeightStdDev": 0.1375,
        "WeightStdDev": 3.75,
        "FamilyId": 125
      }
    },
    {
      "TemplateId": "\"V0126_MOVE_HORN_ATTACK\"",
      "Move": {
        "UniqueId": "V0126_MOVE_HORN_ATTACK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 20,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"horn_attack\"",
        "DurationMs": 2200,
        "DamageWindowStartMs": 1600,
        "DamageWindowEndMs": 1900,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0126_POKEMON_MAGMAR\"",
      "Pokemon": {
        "UniqueId": "V0126_POKEMON_MAGMAR",
        "ModelScale": 0.88,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.99,
          "CylRadiusM": 0.66,
          "CylHeightM": 1.144,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.44,
          "CollisionHeightM": 0.88,
          "CollisionHeadRadiusM": 0.33,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 14,
          "JumpTimeS": 1.25,
          "AttackTimerS": 5
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 214,
          "BaseDefense": 158
        },
        "QuickMoves": "\"\\321\\001\\320\\001\"",
        "CinematicMoves": "\"gs\\030\"",
        "AnimTime": "\"mV\\325?\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000A\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 44.5,
        "HeightStdDev": 0.1625,
        "WeightStdDev": 5.5625,
        "FamilyId": 126
      }
    },
    {
      "TemplateId": "\"V0127_MOVE_STOMP\"",
      "Move": {
        "UniqueId": "V0127_MOVE_STOMP",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 25,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.065,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"stomp\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 1900,
        "EnergyDelta": -25
      }
    },
    {
      "TemplateId": "\"V0127_POKEMON_PINSIR\"",
      "Pokemon": {
        "UniqueId": "V0127_POKEMON_PINSIR",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_BUG",
        "Camera": {
          "DiskRadiusM": 0.522,
          "CylRadiusM": 0.348,
          "CylHeightM": 1.131,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.348,
          "CollisionHeightM": 0.87,
          "CollisionHeadRadiusM": 0.348,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 184,
          "BaseDefense": 186
        },
        "QuickMoves": "\"\\361\\001\\310\\001\"",
        "CinematicMoves": "\"\\024d6\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.5,
        "PokedexWeightKg": 55,
        "HeightStdDev": 0.1875,
        "WeightStdDev": 6.875,
        "FamilyId": 127
      }
    },
    {
      "TemplateId": "\"V0128_POKEMON_TAUROS\"",
      "Pokemon": {
        "UniqueId": "V0128_POKEMON_TAUROS",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.8613,
          "CylRadiusM": 0.5742,
          "CylHeightM": 1.19625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.24,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.435,
          "CollisionHeightM": 1.19625,
          "CollisionHeadRadiusM": 0.2871,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.2,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 150,
          "BaseAttack": 148,
          "BaseDefense": 184
        },
        "QuickMoves": "\"\\335\\001\\352\\001\"",
        "CinematicMoves": "\"~J\\037\"",
        "AnimTime": "\"\\312T\\025@\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000mV\\325?\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.4,
        "PokedexWeightKg": 88.4,
        "HeightStdDev": 0.175,
        "WeightStdDev": 11.05,
        "FamilyId": 128
      }
    },
    {
      "TemplateId": "\"V0129_MOVE_HYPER_FANG\"",
      "Move": {
        "UniqueId": "V0129_MOVE_HYPER_FANG",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"hyper_fang\"",
        "DurationMs": 2100,
        "DamageWindowStartMs": 1700,
        "DamageWindowEndMs": 2000,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0129_POKEMON_MAGIKARP\"",
      "Pokemon": {
        "UniqueId": "V0129_POKEMON_MAGIKARP",
        "ModelScale": 1.07,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.642,
          "CylRadiusM": 0.428,
          "CylHeightM": 0.535,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.56,
          "BaseFleeRate": 0.15,
          "CollisionRadiusM": 0.2675,
          "CollisionHeightM": 0.4815,
          "CollisionHeadRadiusM": 0.321,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3600,
          "JumpTimeS": 1.3,
          "AttackTimerS": 3600
        },
        "Stats": {
          "BaseStamina": 40,
          "BaseAttack": 42,
          "BaseDefense": 84
        },
        "QuickMoves": "\"\\347\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?\\000\\000\\000\\000\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\"",
        "Evolution": "\"\\202\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 10,
        "HeightStdDev": 0.1125,
        "WeightStdDev": 1.25,
        "FamilyId": 129,
        "CandyToEvolve": 400
      }
    },
    {
      "TemplateId": "\"V0130_POKEMON_GYARADOS\"",
      "Pokemon": {
        "UniqueId": "V0130_POKEMON_GYARADOS",
        "ModelScale": 0.48,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.72,
          "CylRadiusM": 0.48,
          "CylHeightM": 1.2,
          "CylGroundM": 0.48,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.07,
          "CollisionRadiusM": 0.24,
          "CollisionHeightM": 0.48,
          "CollisionHeadRadiusM": 0.36,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 190,
          "BaseAttack": 192,
          "BaseDefense": 196
        },
        "QuickMoves": "\"\\314\\001\\312\\001\"",
        "CinematicMoves": "\"kPR\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?\\000\\000\\300?\\332\\254*?\\000\\000\\000\\000\\312T\\025@\\000\\000\\000@\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 6.5,
        "PokedexWeightKg": 235,
        "ParentId": "V0129_POKEMON_MAGIKARP",
        "HeightStdDev": 0.8125,
        "WeightStdDev": 29.375,
        "FamilyId": 129
      }
    },
    {
      "TemplateId": "\"V0131_MOVE_BODY_SLAM\"",
      "Move": {
        "UniqueId": "V0131_MOVE_BODY_SLAM",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 50,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.085,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"body_slam\"",
        "DurationMs": 1560,
        "DamageWindowStartMs": 1100,
        "DamageWindowEndMs": 1300,
        "EnergyDelta": -50
      }
    },
    {
      "TemplateId": "\"V0131_POKEMON_LAPRAS\"",
      "Pokemon": {
        "UniqueId": "V0131_POKEMON_LAPRAS",
        "ModelScale": 0.7,
        "Type1": "POKEMON_TYPE_WATER",
        "Type2": "POKEMON_TYPE_ICE",
        "Camera": {
          "DiskRadiusM": 1.05,
          "CylRadiusM": 0.7,
          "CylHeightM": 1.75,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.525,
          "CollisionHeightM": 0.7,
          "CollisionHeadRadiusM": 0.35,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1.2,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 260,
          "BaseAttack": 186,
          "BaseDefense": 190
        },
        "QuickMoves": "\"\\332\\001\\331\\001\"",
        "CinematicMoves": "\"R\\'(\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?33\\363?\\000\\000\\000\\000\\232\\231\\031@\\000\\000@@\\254\\252*@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2.5,
        "PokedexWeightKg": 220,
        "HeightStdDev": 0.3125,
        "WeightStdDev": 27.5,
        "FamilyId": 131
      }
    },
    {
      "TemplateId": "\"V0132_MOVE_REST\"",
      "Move": {
        "UniqueId": "V0132_MOVE_REST",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 35,
        "AccuracyChance": 1,
        "HealScalar": 1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"rest\"",
        "DurationMs": 3100,
        "DamageWindowStartMs": 1395,
        "DamageWindowEndMs": 2691,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0132_POKEMON_DITTO\"",
      "Pokemon": {
        "UniqueId": "V0132_POKEMON_DITTO",
        "ModelScale": 1.61,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.6038,
          "CylRadiusM": 0.4025,
          "CylHeightM": 0.52325,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.4025,
          "CollisionHeightM": 0.52325,
          "CollisionHeadRadiusM": 0.20125,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3600,
          "JumpTimeS": 1,
          "AttackTimerS": 3600
        },
        "Stats": {
          "BaseStamina": 96,
          "BaseAttack": 110,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\336\\001\"",
        "CinematicMoves": "\"\\205\\001\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?mV\\325?mV\\325?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 4,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.5,
        "FamilyId": 132
      }
    },
    {
      "TemplateId": "\"V0133_MOVE_STRUGGLE\"",
      "Move": {
        "UniqueId": "V0133_MOVE_STRUGGLE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.1,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"struggle\"",
        "DurationMs": 1695,
        "DamageWindowStartMs": 800,
        "DamageWindowEndMs": 1500,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0133_POKEMON_EEVEE\"",
      "Pokemon": {
        "UniqueId": "V0133_POKEMON_EEVEE",
        "ModelScale": 1.68,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.63,
          "CylRadiusM": 0.42,
          "CylHeightM": 0.504,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.252,
          "CollisionHeightM": 0.336,
          "CollisionHeadRadiusM": 0.252,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 1.35,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 110,
          "BaseAttack": 114,
          "BaseDefense": 128
        },
        "QuickMoves": "\"\\333\\001\\335\\001\"",
        "CinematicMoves": "\"\\032}\\203\\001\"",
        "AnimTime": "\"j\\336\\035@\\332\\254*?\\320D\\004@\\223\\251\\352?\\000\\000\\000\\000\\312T\\025@\\r\\340]?\\333\\335\\235?\"",
        "Evolution": "\"\\206\\001\\207\\001\\210\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.3,
        "PokedexWeightKg": 6.5,
        "HeightStdDev": 0.0375,
        "WeightStdDev": 0.8125,
        "FamilyId": 133,
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0134_MOVE_SCALD_BLASTOISE\"",
      "Move": {
        "UniqueId": "V0134_MOVE_SCALD_BLASTOISE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 35,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.08,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"scald_blastoise\"",
        "DurationMs": 4000,
        "DamageWindowStartMs": 1800,
        "DamageWindowEndMs": 3900,
        "EnergyDelta": -33
      }
    },
    {
      "TemplateId": "\"V0134_POKEMON_VAPOREON\"",
      "Pokemon": {
        "UniqueId": "V0134_POKEMON_VAPOREON",
        "ModelScale": 1.05,
        "Type1": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5198,
          "CylRadiusM": 0.3465,
          "CylHeightM": 0.94499987,
          "ShoulderModeScale": 0.4
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.21,
          "CollisionHeightM": 0.525,
          "CollisionHeadRadiusM": 0.2625,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 260,
          "BaseAttack": 186,
          "BaseDefense": 168
        },
        "QuickMoves": "\"\\346\\001\"",
        "CinematicMoves": "\"ik:\"",
        "AnimTime": "\"\\007\\360\\356?\\332\\254*?33\\363?\\232\\231\\331?\\000\\000\\000\\000\\000\\000\\000@\\375\\207\\010@\\207\\210\\010@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 29,
        "ParentId": "V0133_POKEMON_EEVEE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 3.625,
        "FamilyId": 133
      }
    },
    {
      "TemplateId": "\"V0135_MOVE_HYDRO_PUMP_BLASTOISE\"",
      "Move": {
        "UniqueId": "V0135_MOVE_HYDRO_PUMP_BLASTOISE",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 60,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.11,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"hydro_pump_blastoise\"",
        "DurationMs": 3800,
        "DamageWindowStartMs": 1500,
        "DamageWindowEndMs": 3600,
        "EnergyDelta": -100
      }
    },
    {
      "TemplateId": "\"V0135_POKEMON_JOLTEON\"",
      "Pokemon": {
        "UniqueId": "V0135_POKEMON_JOLTEON",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Camera": {
          "DiskRadiusM": 0.495,
          "CylRadiusM": 0.33,
          "CylHeightM": 0.88000011,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.22,
          "CollisionHeightM": 0.55,
          "CollisionHeadRadiusM": 0.22,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 4,
          "JumpTimeS": 1.3,
          "AttackTimerS": 11
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 192,
          "BaseDefense": 174
        },
        "QuickMoves": "\"\\315\\001\"",
        "CinematicMoves": "\"#ON\"",
        "AnimTime": "\"\\375\\207(@\\332\\254*?`v\\367?\\312T\\025@\\000\\000\\000\\0006\\253*@\\223\\251\\252?\\362\\356\\356?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 24.5,
        "ParentId": "V0133_POKEMON_EEVEE",
        "HeightStdDev": 0.1,
        "WeightStdDev": 3.0625,
        "FamilyId": 133
      }
    },
    {
      "TemplateId": "\"V0136_MOVE_WRAP_GREEN\"",
      "Move": {
        "UniqueId": "V0136_MOVE_WRAP_GREEN",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"wrap_green\"",
        "DurationMs": 3700,
        "DamageWindowStartMs": 2200,
        "DamageWindowEndMs": 3200,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0136_POKEMON_FLAREON\"",
      "Pokemon": {
        "UniqueId": "V0136_POKEMON_FLAREON",
        "ModelScale": 0.87,
        "Type1": "POKEMON_TYPE_FIRE",
        "Camera": {
          "DiskRadiusM": 0.4568,
          "CylRadiusM": 0.3045,
          "CylHeightM": 0.783,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.2175,
          "CollisionHeightM": 0.522,
          "CollisionHeadRadiusM": 0.19575,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1.35,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 238,
          "BaseDefense": 178
        },
        "QuickMoves": "\"\\321\\001\"",
        "CinematicMoves": "\"g\\030*\"",
        "AnimTime": "\"\\000\\000 @\\332\\254*?mV\\325?\\320D\\004@\\000\\000\\000\\000\\312T\\025@\\000\\000\\200?\\254\\252*@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.9,
        "PokedexWeightKg": 25,
        "ParentId": "V0133_POKEMON_EEVEE",
        "HeightStdDev": 0.1125,
        "WeightStdDev": 3.125,
        "FamilyId": 133
      }
    },
    {
      "TemplateId": "\"V0137_MOVE_WRAP_PINK\"",
      "Move": {
        "UniqueId": "V0137_MOVE_WRAP_PINK",
        "AnimationId": 5,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 15,
        "AccuracyChance": 1,
        "CriticalChance": 0.05,
        "StaminaLossScalar": 0.06,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"wrap_pink\"",
        "DurationMs": 3700,
        "DamageWindowStartMs": 2200,
        "DamageWindowEndMs": 3200,
        "EnergyDelta": -20
      }
    },
    {
      "TemplateId": "\"V0137_POKEMON_PORYGON\"",
      "Pokemon": {
        "UniqueId": "V0137_POKEMON_PORYGON",
        "ModelScale": 1.1,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 0.825,
          "CylRadiusM": 0.55,
          "CylHeightM": 0.93500012,
          "CylGroundM": 0.55,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.385,
          "CollisionHeightM": 0.55,
          "CollisionHeadRadiusM": 0.33,
          "MovementType": "POKEMON_ENC_MOVEMENT_HOVERING",
          "MovementTimerS": 8,
          "JumpTimeS": 1,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 130,
          "BaseAttack": 156,
          "BaseDefense": 158
        },
        "QuickMoves": "\"\\333\\001\\335\\001\"",
        "CinematicMoves": "\"\\036c#\"",
        "AnimTime": "\"\\223\\251\\352?\\332\\254*?\\000\\000\\000\\000\\332\\254*?\\000\\000\\000\\0006\\253*@\\315\\314\\314?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.8,
        "PokedexWeightKg": 36.5,
        "HeightStdDev": 0.1,
        "WeightStdDev": 4.5625,
        "FamilyId": 137
      }
    },
    {
      "TemplateId": "\"V0138_POKEMON_OMANYTE\"",
      "Pokemon": {
        "UniqueId": "V0138_POKEMON_OMANYTE",
        "ModelScale": 1.48,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.333,
          "CylRadiusM": 0.222,
          "CylHeightM": 0.592,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.222,
          "CollisionHeightM": 0.592,
          "CollisionHeadRadiusM": 0.111,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.3,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 70,
          "BaseAttack": 132,
          "BaseDefense": 160
        },
        "QuickMoves": "\"\\346\\001\\330\\001\"",
        "CinematicMoves": "\">h?\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\312T\\025@6\\253*@\\000\\000\\000\\000\"",
        "Evolution": "\"\\213\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 7.5,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.9375,
        "FamilyId": 138,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0139_POKEMON_OMASTAR\"",
      "Pokemon": {
        "UniqueId": "V0139_POKEMON_OMASTAR",
        "ModelScale": 1,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5625,
          "CylRadiusM": 0.375,
          "CylHeightM": 1,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.25,
          "CollisionHeightM": 0.9,
          "CollisionHeadRadiusM": 0.1875,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1.25,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 140,
          "BaseAttack": 180,
          "BaseDefense": 202
        },
        "QuickMoves": "\"\\343\\001\\346\\001\"",
        "CinematicMoves": "\">k@\"",
        "AnimTime": "\"\\000\\000\\000@\\332\\254*?mV\\325?\\223\\251\\352?\\000\\000\\000\\000\\000\\000\\000@6\\253*@\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1,
        "PokedexWeightKg": 35,
        "ParentId": "V0138_POKEMON_OMANYTE",
        "HeightStdDev": 0.125,
        "WeightStdDev": 4.375,
        "FamilyId": 138
      }
    },
    {
      "TemplateId": "\"V0140_POKEMON_KABUTO\"",
      "Pokemon": {
        "UniqueId": "V0140_POKEMON_KABUTO",
        "ModelScale": 1.35,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.5063,
          "CylRadiusM": 0.3375,
          "CylHeightM": 0.50625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.3375,
          "CollisionHeightM": 0.50625,
          "CollisionHeadRadiusM": 0.16875,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 0.9,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 60,
          "BaseAttack": 148,
          "BaseDefense": 142
        },
        "QuickMoves": "\"\\334\\001\\330\\001\"",
        "CinematicMoves": "\">9?\"",
        "AnimTime": "\"\\000\\000\\000\\000\\332\\254*?\\000\\000\\000\\000\\000\\000\\300?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000@\\000\\000\\000\\000\"",
        "Evolution": "\"\\215\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 0.5,
        "PokedexWeightKg": 11.5,
        "HeightStdDev": 0.0625,
        "WeightStdDev": 1.4375,
        "FamilyId": 140,
        "CandyToEvolve": 50
      }
    },
    {
      "TemplateId": "\"V0141_POKEMON_KABUTOPS\"",
      "Pokemon": {
        "UniqueId": "V0141_POKEMON_KABUTOPS",
        "ModelScale": 0.91,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_WATER",
        "Camera": {
          "DiskRadiusM": 0.6825,
          "CylRadiusM": 0.455,
          "CylHeightM": 1.1375,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.12,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.364,
          "CollisionHeightM": 0.91,
          "CollisionHeadRadiusM": 0.3185,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 11,
          "JumpTimeS": 1,
          "AttackTimerS": 4
        },
        "Stats": {
          "BaseStamina": 120,
          "BaseAttack": 190,
          "BaseDefense": 190
        },
        "QuickMoves": "\"\\330\\001\\310\\001\"",
        "CinematicMoves": "\">i \"",
        "AnimTime": "\"6\\253\\n@\\332\\254*?mV\\325?\\315\\314\\314?\\000\\000\\000\\000\\315\\314\\014@\\232\\231\\231?\\000\\000\\000\\000\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.3,
        "PokedexWeightKg": 40.5,
        "ParentId": "V0140_POKEMON_KABUTO",
        "HeightStdDev": 0.1625,
        "WeightStdDev": 5.0625,
        "FamilyId": 140
      }
    },
    {
      "TemplateId": "\"V0142_POKEMON_AERODACTYL\"",
      "Pokemon": {
        "UniqueId": "V0142_POKEMON_AERODACTYL",
        "ModelScale": 0.57,
        "Type1": "POKEMON_TYPE_ROCK",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.5985,
          "CylRadiusM": 0.399,
          "CylHeightM": 0.9975,
          "CylGroundM": 0.855,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.285,
          "CollisionHeightM": 0.9975,
          "CollisionHeadRadiusM": 0.285,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 5,
          "JumpTimeS": 1,
          "AttackTimerS": 14
        },
        "Stats": {
          "BaseStamina": 160,
          "BaseAttack": 182,
          "BaseDefense": 162
        },
        "QuickMoves": "\"\\357\\001\\312\\001\"",
        "CinematicMoves": "\">J\\016\"",
        "AnimTime": "\"6\\253\\n@fff?\\000\\000\\300?\\214\\271;?\\000\\000\\000\\000\\000\\000\\000@\\223\\251\\252?XU\\325?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.8,
        "PokedexWeightKg": 59,
        "HeightStdDev": 0.225,
        "WeightStdDev": 7.375,
        "FamilyId": 142
      }
    },
    {
      "TemplateId": "\"V0143_POKEMON_SNORLAX\"",
      "Pokemon": {
        "UniqueId": "V0143_POKEMON_SNORLAX",
        "ModelScale": 0.74,
        "Type1": "POKEMON_TYPE_NORMAL",
        "Camera": {
          "DiskRadiusM": 1.11,
          "CylRadiusM": 0.74,
          "CylHeightM": 1.48,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.16,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.74,
          "CollisionHeightM": 1.11,
          "CollisionHeadRadiusM": 0.481,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 320,
          "BaseAttack": 180,
          "BaseDefense": 180
        },
        "QuickMoves": "\"\\352\\001\\324\\001\"",
        "CinematicMoves": "\"\\203\\001\\016\\037\"",
        "AnimTime": "\"\\232\\231\\031@\\332\\254*?\\223\\251\\352?mV\\325?\\000\\000\\000\\000\\000\\000 @\\000\\000 @TU\\025@\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2.1,
        "PokedexWeightKg": 460,
        "HeightStdDev": 0.2625,
        "WeightStdDev": 57.5,
        "FamilyId": 143
      }
    },
    {
      "TemplateId": "\"V0144_POKEMON_ARTICUNO\"",
      "Pokemon": {
        "UniqueId": "V0144_POKEMON_ARTICUNO",
        "ModelScale": 0.66,
        "Type1": "POKEMON_TYPE_ICE",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.594,
          "CylRadiusM": 0.396,
          "CylHeightM": 0.99,
          "CylGroundM": 0.66,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.231,
          "CollisionHeightM": 0.66,
          "CollisionHeadRadiusM": 0.231,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 198,
          "BaseDefense": 242
        },
        "QuickMoves": "\"\\332\\001\"",
        "CinematicMoves": "\"\\'o(\"",
        "AnimTime": "\"\\320D\\004@\\000\\000\\200?mV\\325?\\332\\254*?\\000\\000\\000\\000\\232\\231\\031@\\223\\251\\252?\\250\\252\\252?\"",
        "EvolutionPips": 1,
        "PokemonClass": "POKEMON_CLASS_LEGENDARY",
        "PokedexHeightM": 1.7,
        "PokedexWeightKg": 55.4,
        "HeightStdDev": 0.2125,
        "WeightStdDev": 6.925,
        "FamilyId": 144
      }
    },
    {
      "TemplateId": "\"V0145_POKEMON_ZAPDOS\"",
      "Pokemon": {
        "UniqueId": "V0145_POKEMON_ZAPDOS",
        "ModelScale": 0.69,
        "Type1": "POKEMON_TYPE_ELECTRIC",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.7763,
          "CylRadiusM": 0.5175,
          "CylHeightM": 1.035,
          "CylGroundM": 0.8625,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.4485,
          "CollisionHeightM": 0.759,
          "CollisionHeadRadiusM": 0.276,
          "MovementType": "POKEMON_ENC_MOVEMENT_ELECTRIC",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 232,
          "BaseDefense": 194
        },
        "QuickMoves": "\"\\315\\001\"",
        "CinematicMoves": "\"#ON\"",
        "AnimTime": "\"\\315\\314\\314?&SU?\\000\\000\\300?&SU?\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\200?XU\\325?\"",
        "EvolutionPips": 1,
        "PokemonClass": "POKEMON_CLASS_LEGENDARY",
        "PokedexHeightM": 1.6,
        "PokedexWeightKg": 52.6,
        "HeightStdDev": 0.2,
        "WeightStdDev": 6.575,
        "FamilyId": 145
      }
    },
    {
      "TemplateId": "\"V0146_POKEMON_MOLTRES\"",
      "Pokemon": {
        "UniqueId": "V0146_POKEMON_MOLTRES",
        "ModelScale": 0.62,
        "Type1": "POKEMON_TYPE_FIRE",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.93,
          "CylRadiusM": 0.62,
          "CylHeightM": 1.395,
          "CylGroundM": 0.93,
          "ShoulderModeScale": 0.25
        },
        "Encounter": {
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.403,
          "CollisionHeightM": 0.93,
          "CollisionHeadRadiusM": 0.217,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 180,
          "BaseAttack": 242,
          "BaseDefense": 194
        },
        "QuickMoves": "\"\\321\\001\"",
        "CinematicMoves": "\"g*\\030\"",
        "AnimTime": "\"c\\356.@\\223\\251\\252?\\000\\000\\000@mV\\225?\\000\\000\\000\\000\\000\\000 @ff\\346?ff\\346?\"",
        "EvolutionPips": 1,
        "PokemonClass": "POKEMON_CLASS_LEGENDARY",
        "PokedexHeightM": 2,
        "PokedexWeightKg": 60,
        "HeightStdDev": 0.25,
        "WeightStdDev": 7.5,
        "FamilyId": 146
      }
    },
    {
      "TemplateId": "\"V0147_POKEMON_DRATINI\"",
      "Pokemon": {
        "UniqueId": "V0147_POKEMON_DRATINI",
        "ModelScale": 1.11,
        "Type1": "POKEMON_TYPE_DRAGON",
        "Camera": {
          "DiskRadiusM": 0.4163,
          "CylRadiusM": 0.2775,
          "CylHeightM": 0.8325,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.32,
          "BaseFleeRate": 0.09,
          "CollisionRadiusM": 0.2775,
          "CollisionHeightM": 0.555,
          "CollisionHeadRadiusM": 0.19425,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 10,
          "JumpTimeS": 0.85,
          "AttackTimerS": 29
        },
        "Stats": {
          "BaseStamina": 82,
          "BaseAttack": 128,
          "BaseDefense": 110
        },
        "QuickMoves": "\"\\314\\001\"",
        "CinematicMoves": "\"\\rP:\"",
        "AnimTime": "\"mV\\325?\\332\\254*?\\223\\251\\352?`v\\267?\\000\\000\\000\\000\\000\\000\\000@\\315\\314\\314?\\000\\000\\000\\000\"",
        "Evolution": "\"\\224\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 1.8,
        "PokedexWeightKg": 3.3,
        "HeightStdDev": 0.225,
        "WeightStdDev": 0.4125,
        "FamilyId": 147,
        "CandyToEvolve": 25
      }
    },
    {
      "TemplateId": "\"V0148_POKEMON_DRAGONAIR\"",
      "Pokemon": {
        "UniqueId": "V0148_POKEMON_DRAGONAIR",
        "ModelScale": 0.75,
        "Type1": "POKEMON_TYPE_DRAGON",
        "Camera": {
          "DiskRadiusM": 0.8438,
          "CylRadiusM": 0.5625,
          "CylHeightM": 1.5,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.08,
          "BaseFleeRate": 0.06,
          "CollisionRadiusM": 0.375,
          "CollisionHeightM": 1.125,
          "CollisionHeadRadiusM": 0.28125,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.25,
          "AttackTimerS": 23
        },
        "Stats": {
          "BaseStamina": 122,
          "BaseAttack": 170,
          "BaseDefense": 152
        },
        "QuickMoves": "\"\\314\\001\"",
        "CinematicMoves": "\"\\r:R\"",
        "AnimTime": "\"\\315\\314\\314?\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000\\000\\000 @\\000\\000\\000@\\000\\000\\000@\"",
        "Evolution": "\"\\225\\001\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 4,
        "PokedexWeightKg": 16.5,
        "ParentId": "V0147_POKEMON_DRATINI",
        "HeightStdDev": 0.5,
        "WeightStdDev": 2.0625,
        "FamilyId": 147,
        "CandyToEvolve": 100
      }
    },
    {
      "TemplateId": "\"V0149_POKEMON_DRAGONITE\"",
      "Pokemon": {
        "UniqueId": "V0149_POKEMON_DRAGONITE",
        "ModelScale": 0.7,
        "Type1": "POKEMON_TYPE_DRAGON",
        "Type2": "POKEMON_TYPE_FLYING",
        "Camera": {
          "DiskRadiusM": 0.63,
          "CylRadiusM": 0.42,
          "CylHeightM": 1.47,
          "CylGroundM": 0.595,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseCaptureRate": 0.04,
          "BaseFleeRate": 0.05,
          "CollisionRadiusM": 0.42,
          "CollisionHeightM": 1.05,
          "CollisionHeadRadiusM": 0.245,
          "MovementType": "POKEMON_ENC_MOVEMENT_FLYING",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 182,
          "BaseAttack": 250,
          "BaseDefense": 212
        },
        "QuickMoves": "\"\\314\\001\\357\\001\"",
        "CinematicMoves": "\"R\\016S\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?&SU?\\000\\000\\000\\0006\\253*@\\000\\000\\300?\\000\\000\\300?\"",
        "EvolutionPips": 1,
        "PokedexHeightM": 2.2,
        "PokedexWeightKg": 210,
        "ParentId": "V0148_POKEMON_DRAGONAIR",
        "HeightStdDev": 0.275,
        "WeightStdDev": 26.25,
        "FamilyId": 147
      }
    },
    {
      "TemplateId": "\"V0150_POKEMON_MEWTWO\"",
      "Pokemon": {
        "UniqueId": "V0150_POKEMON_MEWTWO",
        "ModelScale": 0.74,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.555,
          "CylRadiusM": 0.37,
          "CylHeightM": 1.48,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.37,
          "CollisionHeightM": 1.184,
          "CollisionHeadRadiusM": 0.185,
          "MovementType": "POKEMON_ENC_MOVEMENT_JUMP",
          "MovementTimerS": 8,
          "JumpTimeS": 1.2,
          "AttackTimerS": 3
        },
        "Stats": {
          "BaseStamina": 212,
          "BaseAttack": 284,
          "BaseDefense": 202
        },
        "QuickMoves": "\"\\342\\001\\353\\001\"",
        "CinematicMoves": "\"lF\\016\"",
        "AnimTime": "\"\\223\\251\\252?\\332\\254*?mV\\325?\\000\\000\\000@\\000\\000\\000\\000\\000\\000\\000@\\000\\000@@\\000\\000@@\"",
        "EvolutionPips": 1,
        "PokemonClass": "POKEMON_CLASS_LEGENDARY",
        "PokedexHeightM": 2,
        "PokedexWeightKg": 122,
        "HeightStdDev": 0.25,
        "WeightStdDev": 15.25,
        "FamilyId": 150
      }
    },
    {
      "TemplateId": "\"V0151_POKEMON_MEW\"",
      "Pokemon": {
        "UniqueId": "V0151_POKEMON_MEW",
        "ModelScale": 1.41,
        "Type1": "POKEMON_TYPE_PSYCHIC",
        "Camera": {
          "DiskRadiusM": 0.423,
          "CylRadiusM": 0.282,
          "CylHeightM": 0.7755,
          "CylGroundM": 0.0705,
          "ShoulderModeScale": 0.5
        },
        "Encounter": {
          "BaseFleeRate": 0.1,
          "CollisionRadiusM": 0.141,
          "CollisionHeightM": 0.564,
          "CollisionHeadRadiusM": 0.17625,
          "MovementType": "POKEMON_ENC_MOVEMENT_PSYCHIC",
          "MovementTimerS": 3,
          "JumpTimeS": 1,
          "AttackTimerS": 8
        },
        "Stats": {
          "BaseStamina": 200,
          "BaseAttack": 220,
          "BaseDefense": 220
        },
        "QuickMoves": "\"\\336\\001\"",
        "CinematicMoves": "\"z\\037lRNWgt\\016\"",
        "AnimTime": "\"6\\253*@\\332\\254*?mV\\325?\\332\\254*?\\000\\000\\000\\0006\\253*@mV\\325?\\000\\000\\000@\"",
        "EvolutionPips": 1,
        "PokemonClass": "POKEMON_CLASS_MYTHIC",
        "PokedexHeightM": 0.4,
        "PokedexWeightKg": 4,
        "HeightStdDev": 0.05,
        "WeightStdDev": 0.5,
        "FamilyId": 151
      }
    },
    {
      "TemplateId": "\"V0200_MOVE_FURY_CUTTER_FAST\"",
      "Move": {
        "UniqueId": 200,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 3,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"fury_cutter_fast\"",
        "DurationMs": 400,
        "DamageWindowStartMs": 200,
        "DamageWindowEndMs": 400,
        "EnergyDelta": 12
      }
    },
    {
      "TemplateId": "\"V0201_MOVE_BUG_BITE_FAST\"",
      "Move": {
        "UniqueId": 201,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_BUG",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bug_bite_fast\"",
        "DurationMs": 450,
        "DamageWindowStartMs": 250,
        "DamageWindowEndMs": 450,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0202_MOVE_BITE_FAST\"",
      "Move": {
        "UniqueId": 202,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_DARK",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bite_fast\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0203_MOVE_SUCKER_PUNCH_FAST\"",
      "Move": {
        "UniqueId": 203,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_DARK",
        "Power": 7,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"sucker_punch_fast\"",
        "DurationMs": 700,
        "DamageWindowStartMs": 500,
        "DamageWindowEndMs": 700,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0204_MOVE_DRAGON_BREATH_FAST\"",
      "Move": {
        "UniqueId": 204,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_DRAGON",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"dragon_breath_fast\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0205_MOVE_THUNDER_SHOCK_FAST\"",
      "Move": {
        "UniqueId": 205,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 5,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"thunder_shock_fast\"",
        "DurationMs": 600,
        "DamageWindowStartMs": 400,
        "DamageWindowEndMs": 600,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0206_MOVE_SPARK_FAST\"",
      "Move": {
        "UniqueId": 206,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_ELECTRIC",
        "Power": 7,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"spark_fast\"",
        "DurationMs": 700,
        "DamageWindowStartMs": 500,
        "DamageWindowEndMs": 700,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0207_MOVE_LOW_KICK_FAST\"",
      "Move": {
        "UniqueId": 207,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 5,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"low_kick_fast\"",
        "DurationMs": 600,
        "DamageWindowStartMs": 400,
        "DamageWindowEndMs": 600,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0208_MOVE_KARATE_CHOP_FAST\"",
      "Move": {
        "UniqueId": 208,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"karate_chop_fast\"",
        "DurationMs": 800,
        "DamageWindowStartMs": 600,
        "DamageWindowEndMs": 800,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0209_MOVE_EMBER_FAST\"",
      "Move": {
        "UniqueId": 209,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ember_fast\"",
        "DurationMs": 1050,
        "DamageWindowStartMs": 850,
        "DamageWindowEndMs": 1050,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0210_MOVE_WING_ATTACK_FAST\"",
      "Move": {
        "UniqueId": 210,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"wing_attack_fast\"",
        "DurationMs": 750,
        "DamageWindowStartMs": 550,
        "DamageWindowEndMs": 750,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0211_MOVE_PECK_FAST\"",
      "Move": {
        "UniqueId": 211,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FLYING",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"peck_fast\"",
        "DurationMs": 1150,
        "DamageWindowStartMs": 950,
        "DamageWindowEndMs": 1150,
        "EnergyDelta": 10
      }
    },
    {
      "TemplateId": "\"V0212_MOVE_LICK_FAST\"",
      "Move": {
        "UniqueId": 212,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"lick_fast\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0213_MOVE_SHADOW_CLAW_FAST\"",
      "Move": {
        "UniqueId": 213,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GHOST",
        "Power": 16,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"shadow_claw_fast\"",
        "DurationMs": 950,
        "DamageWindowStartMs": 750,
        "DamageWindowEndMs": 950,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0214_MOVE_VINE_WHIP_FAST\"",
      "Move": {
        "UniqueId": 214,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"vine_whip_fast\"",
        "DurationMs": 650,
        "DamageWindowStartMs": 450,
        "DamageWindowEndMs": 650,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0215_MOVE_RAZOR_LEAF_FAST\"",
      "Move": {
        "UniqueId": 215,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GRASS",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"razor_leaf_fast\"",
        "DurationMs": 1450,
        "DamageWindowStartMs": 1250,
        "DamageWindowEndMs": 1450,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0216_MOVE_MUD_SHOT_FAST\"",
      "Move": {
        "UniqueId": 216,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"mud_shot_fast\"",
        "DurationMs": 550,
        "DamageWindowStartMs": 350,
        "DamageWindowEndMs": 550,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0217_MOVE_ICE_SHARD_FAST\"",
      "Move": {
        "UniqueId": 217,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"ice_shard_fast\"",
        "DurationMs": 1400,
        "DamageWindowStartMs": 1200,
        "DamageWindowEndMs": 1400,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0218_MOVE_FROST_BREATH_FAST\"",
      "Move": {
        "UniqueId": 218,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_ICE",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"frost_breath_fast\"",
        "DurationMs": 810,
        "DamageWindowStartMs": 610,
        "DamageWindowEndMs": 810,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0219_MOVE_QUICK_ATTACK_FAST\"",
      "Move": {
        "UniqueId": 219,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"quick_attack_fast\"",
        "DurationMs": 1330,
        "DamageWindowStartMs": 1130,
        "DamageWindowEndMs": 1330,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0220_MOVE_SCRATCH_FAST\"",
      "Move": {
        "UniqueId": 220,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"scratch_fast\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0221_MOVE_TACKLE_FAST\"",
      "Move": {
        "UniqueId": 221,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"tackle_fast\"",
        "DurationMs": 1100,
        "DamageWindowStartMs": 900,
        "DamageWindowEndMs": 1100,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0222_MOVE_POUND_FAST\"",
      "Move": {
        "UniqueId": 222,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 8,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"pound_fast\"",
        "DurationMs": 540,
        "DamageWindowStartMs": 340,
        "DamageWindowEndMs": 540,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0223_MOVE_CUT_FAST\"",
      "Move": {
        "UniqueId": 223,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_NORMAL",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"cut_fast\"",
        "DurationMs": 1130,
        "DamageWindowStartMs": 930,
        "DamageWindowEndMs": 1130,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0224_MOVE_POISON_JAB_FAST\"",
      "Move": {
        "UniqueId": 224,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"poison_jab_fast\"",
        "DurationMs": 1050,
        "DamageWindowStartMs": 850,
        "DamageWindowEndMs": 1050,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0225_MOVE_ACID_FAST\"",
      "Move": {
        "UniqueId": 225,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"acid_fast\"",
        "DurationMs": 1050,
        "DamageWindowStartMs": 850,
        "DamageWindowEndMs": 1050,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0226_MOVE_PSYCHO_CUT_FAST\"",
      "Move": {
        "UniqueId": 226,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"psycho_cut_fast\"",
        "DurationMs": 570,
        "DamageWindowStartMs": 370,
        "DamageWindowEndMs": 570,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0227_MOVE_ROCK_THROW_FAST\"",
      "Move": {
        "UniqueId": 227,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_ROCK",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"rock_throw_fast\"",
        "DurationMs": 1360,
        "DamageWindowStartMs": 1160,
        "DamageWindowEndMs": 1360,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0228_MOVE_METAL_CLAW_FAST\"",
      "Move": {
        "UniqueId": 228,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"metal_claw_fast\"",
        "DurationMs": 630,
        "DamageWindowStartMs": 430,
        "DamageWindowEndMs": 630,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0229_MOVE_BULLET_PUNCH_FAST\"",
      "Move": {
        "UniqueId": 229,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bullet_punch_fast\"",
        "DurationMs": 1200,
        "DamageWindowStartMs": 1000,
        "DamageWindowEndMs": 1200,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0230_MOVE_WATER_GUN_FAST\"",
      "Move": {
        "UniqueId": 230,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"water_gun_fast\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0231_MOVE_SPLASH_FAST\"",
      "Move": {
        "UniqueId": 231,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_WATER",
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"splash_fast\"",
        "DurationMs": 1230,
        "DamageWindowStartMs": 1030,
        "DamageWindowEndMs": 1230,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0232_MOVE_WATER_GUN_FAST_BLASTOISE\"",
      "Move": {
        "UniqueId": 232,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 10,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"water_gun_fast_blastoise\"",
        "DurationMs": 500,
        "DamageWindowStartMs": 300,
        "DamageWindowEndMs": 500,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0233_MOVE_MUD_SLAP_FAST\"",
      "Move": {
        "UniqueId": 233,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_GROUND",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"mud_slap_fast\"",
        "DurationMs": 1350,
        "DamageWindowStartMs": 1150,
        "DamageWindowEndMs": 1350,
        "EnergyDelta": 9
      }
    },
    {
      "TemplateId": "\"V0234_MOVE_ZEN_HEADBUTT_FAST\"",
      "Move": {
        "UniqueId": 234,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"zen_headbutt_fast\"",
        "DurationMs": 1050,
        "DamageWindowStartMs": 850,
        "DamageWindowEndMs": 1050,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0235_MOVE_CONFUSION_FAST\"",
      "Move": {
        "UniqueId": 235,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_PSYCHIC",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"confusion_fast\"",
        "DurationMs": 1510,
        "DamageWindowStartMs": 1310,
        "DamageWindowEndMs": 1510,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0236_MOVE_POISON_STING_FAST\"",
      "Move": {
        "UniqueId": 236,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_POISON",
        "Power": 6,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"poison_sting_fast\"",
        "DurationMs": 575,
        "DamageWindowStartMs": 375,
        "DamageWindowEndMs": 575,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0237_MOVE_BUBBLE_FAST\"",
      "Move": {
        "UniqueId": 237,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_WATER",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"bubble_fast\"",
        "DurationMs": 2300,
        "DamageWindowStartMs": 2100,
        "DamageWindowEndMs": 2300,
        "EnergyDelta": 15
      }
    },
    {
      "TemplateId": "\"V0238_MOVE_FEINT_ATTACK_FAST\"",
      "Move": {
        "UniqueId": 238,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_DARK",
        "Power": 12,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"feint_attack_fast\"",
        "DurationMs": 1040,
        "DamageWindowStartMs": 840,
        "DamageWindowEndMs": 1040,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"V0239_MOVE_STEEL_WING_FAST\"",
      "Move": {
        "UniqueId": 239,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_STEEL",
        "Power": 15,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"steel_wing_fast\"",
        "DurationMs": 1330,
        "DamageWindowStartMs": 1130,
        "DamageWindowEndMs": 1330,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0240_MOVE_FIRE_FANG_FAST\"",
      "Move": {
        "UniqueId": 240,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FIRE",
        "Power": 7,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"fire_fang_fast\"",
        "DurationMs": 840,
        "DamageWindowStartMs": 640,
        "DamageWindowEndMs": 840,
        "EnergyDelta": 4
      }
    },
    {
      "TemplateId": "\"V0241_MOVE_ROCK_SMASH_FAST\"",
      "Move": {
        "UniqueId": 241,
        "AnimationId": 4,
        "Type": "POKEMON_TYPE_FIGHTING",
        "Power": 5,
        "AccuracyChance": 1,
        "StaminaLossScalar": 0.01,
        "TrainerLevelMin": 1,
        "TrainerLevelMax": 100,
        "VfxName": "\"rock_smash_fast\"",
        "DurationMs": 1410,
        "DamageWindowStartMs": 1210,
        "DamageWindowEndMs": 1410,
        "EnergyDelta": 7
      }
    },
    {
      "TemplateId": "\"android.test.canceled\"",
      "IapItemDisplay": {
        "Sku": "\"android.test.canceled\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 1002
      }
    },
    {
      "TemplateId": "\"android.test.item_unavailable\"",
      "IapItemDisplay": {
        "Sku": "\"android.test.item_unavailable\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 1003
      }
    },
    {
      "TemplateId": "\"android.test.purchased\"",
      "IapItemDisplay": {
        "Sku": "\"android.test.purchased\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 1001
      }
    },
    {
      "TemplateId": "\"camera_aerialace\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aerialace_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aerialace_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000*\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aerialace_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000?\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aerialace_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000?\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutter\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_aircutterenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000H\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_airslash\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_airslash_swp\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_ancientpower\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\315\\314\\314>ff\\006@\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\0004B\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ancientpower_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"33\\363?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\240?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\0004B\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ancientpower_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"33\\363?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\240?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 A\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\0004B\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ancientpower_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"33\\363?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\240?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 A\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\0004B\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ancientpower_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"33\\363?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\240?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\0004B\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajet\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\264\\302\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajet_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\002\\016\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\303\\365\\250>\\303\\365(?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\303\\365(?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000%\\303\\000\\000%\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000 @\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\000@\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajet_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\002\\016\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\303\\365\\250>\\303\\365(?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\303\\365(?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\021C\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000 @\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\000@\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajet_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\016\\005\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\303\\365\\250>\\303\\365(?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\303\\365(?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000%\\303\\000\\000%\\303\\000\\000%\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajet_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\016\\005\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\303\\365\\250>\\303\\365(?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\303\\365(?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajetenter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajetenter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajetenter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240@\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquajetenter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240@\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_aquatail\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_aquatailenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_battlefainted\"",
      "Camera": {
        "NextCamera": "\"battlefainted\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000@\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_battlewait\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_bodyslam\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\270\\036\\205>\"",
        "AngleDeg": "\"\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_boneclub\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000\\360B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_boneclubenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\t\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_bothsidecut\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\264\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_brickbreak\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\315\\314\\314=\"",
        "TransitionS": "\"\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_brickbreak_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\300\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\310A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_brickbreak_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_brickbreak_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000/\\303\"",
        "AngleOffsetDeg": "\"\\000\\000@@\"",
        "PitchDeg": "\"\\000\\000\\310A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_brickbreak_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_brine\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\200>\"",
        "TransitionS": "\"\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\033C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_bubblebeam\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\000\"",
        "TargetType": "\"\\001\\001\\001\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\000?\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\\037\\205+?\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\007\\303\\000\\000\\360\\302\\000\\000 \\303\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000\\000\\000\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\000\\277\\000\\000 @\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\200>\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_bugbuzz\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\300?\\217\\302\\325?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\232\\231\\031>\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_crosschop\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\014\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_crosspoison\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000ff\\346>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\031>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000@\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_cutfromattacker_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\360A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_cutfromattacker_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_cutfromdefender_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_cutfromdefender_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_cutreturn\"",
      "Camera": {
        "NextCamera": "\"battlewait\"",
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_cuttofacedefender_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_cuttofacedefender_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_cuttofacedefender_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\014\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_cuttofacedefender_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000 \\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_darkpulse\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"ff\\346>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\264\\302\\000\\000\\264\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\310A\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_dazzlinggleam\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\000\\013\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\303\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@?\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_defaultattack\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_defaultattack_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_defaultattack_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_defaultattack_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_defaultattack_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_dig\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\000\"",
        "TargetType": "\"\\000\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\00033\\023@\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000fff?\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\007\\303\\000\\000%\\303\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200>\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_disarmingvoice\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\013\\013\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\231?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_disarmingvoiceenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\031?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\340?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_discharge\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\232\\231\\031?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031?\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000 \\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200>\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_dischargeenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000*\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_dragonbreath\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\001\\000\\001\"",
        "TargetType": "\"\\000\\000\\000\\000\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\000?\\303\\365\\250>\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\\303\\365\\250>\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000 \\303\\000\\000 \\303\\000\\000\\007\\303\\000\\000 C\\000\\000/C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000 A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\300?\\000\\000 @\\000\\000\\000\\000\\000\\000\\000\\277\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\200\\276\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_dragonclaw\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\010\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_dragonpulse\"",
      "Camera": {
        "Interpolation": "\"\\000\\000\\001\"",
        "TargetType": "\"\\000\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\\000\\000\\000?\\315\\314\\314?\"",
        "WaitS": "\"\\000\\000\\200>\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\000\\000\\000\\000\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\360\\301\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000\\000\\277\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\200>\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_drillpeck\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_drillrun\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\014\\007\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000{\\024n?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\\000\\000\\310B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\300?\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_drillrun_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\007\\007\\004\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000{\\024n?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\\000\\000\\360B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_drillrun_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000{\\024n?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\240A\\000\\000\\360\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_drillrun_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"{\\024n?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\310\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_drillrun_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\007\\004\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"{\\024n?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\310B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_earthquake\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000 @\"",
        "WaitS": "\"\\315\\314\\314=\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>q=\\212>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\000\\000\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\310A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_encounterintro\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "AngleDeg": "\"\\000\\0004C\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_enter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\003\\006\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\200>\\000\\000 @\\000\\000\\200?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\0004C\\000\\000\\360\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000pA\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattacker_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattacker_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000pA\\000\\000pA\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattacker_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattacker_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\310\\301\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattackerfaraway_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattackerfaraway_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattackerfaraway_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_enterbehindattackerfaraway_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfaceattacker_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfaceattacker_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfaceattacker_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfaceattacker_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefender_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\005\\005\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefender_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefender_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefender_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefenderfromfaraway_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\005\\005\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\260@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefenderfromfaraway_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefenderfromfaraway_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_enterfacedefenderfromfaraway_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_face\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000@@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_faceattacker\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_faceattackertilt_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\232\\231\\231>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\0004\\302\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_faceattackertilt_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\232\\231\\231>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\0004\\302\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_faceattackertilt_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\232\\231\\231>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\0004\\302\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_faceattackertilt_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\232\\231\\231>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\0004\\302\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_facecut\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000pB\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_facecutdefender\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000pB\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_facedefenderzoomout_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000A\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_facedefenderzoomout_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000/\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000A\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_facedefenderzoomout_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000A\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_facedefenderzoomout_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000A\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_faint\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000\\300?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000\\300@\"",
        "AngleDeg": "\"\\000\\000\\264\\302\\000\\000 \\303\\000\\000\\360A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000\\240@\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblast\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\232\\231Y?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblast_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000pB\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblast_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\360B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblast_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblast_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_fireblastenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314=\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\303\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240@\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200>\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_firepunch_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\007\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000ff\\346>\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flameburst\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\004\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\014C\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flameburstenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\301\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_flamecharge\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\315\\314\\314>ff\\206?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314\\014?\"",
        "TransitionS": "\"\\315\\314\\314>fff?\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\310\\301\\000\\000\\310\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000@@\\000\\000@@\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flamecharge_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314>ff\\206?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314\\014?\"",
        "TransitionS": "\"\\000\\000\\000\\000fff?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\310\\301\\000\\000\\310\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000@@\\000\\000@@\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flamecharge_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314>ff\\206?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314\\014?\"",
        "TransitionS": "\"\\000\\000\\000\\000fff?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\310A\\000\\000\\310A\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000@\\300\\000\\000@\\300\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flamecharge_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314>ff\\206?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314\\014?\"",
        "TransitionS": "\"\\315\\314\\314>fff?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\310A\\000\\000\\310A\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000@\\300\\000\\000@\\300\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flamecharge_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314>ff\\206?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314\\014?\"",
        "TransitionS": "\"\\315\\314\\314>fff?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\310\\301\\000\\000\\310\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000@@\\000\\000@@\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flamethrower\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\000\"",
        "TargetType": "\"\\000\\000\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\205\\353\\021?\\000\\000\\200>\\315\\314\\314?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\200>\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000%\\303\\000\\000\\026\\303\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\\000\\000pA\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\\000\\000\\240@\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\\000\\000\\000@\\000\\000\\200@\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\\000\\000@?\\000\\000\\000?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_flamewheel\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\000\\001\"",
        "TargetType": "\"\\000\\000\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\303\\365(?\\000\\000\\200?\\232\\231\\031>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"ff\\346>\\000\\000\\200?\\232\\231\\031>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000*\\303\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200@\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flashcannon\"",
      "Camera": {
        "NextCamera": "\"flashcannon_hit\"",
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\001\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\315\\314\\254?\\315\\314\\014?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\366(\\034?\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\360\\302\\000\\000\\360\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000`@\"",
        "HeightPercent": "\"\\232\\231\\031>\\232\\231\\031>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_flashcannon_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_followarcingprojectile_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\016\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\021\\303\\000\\000\\360A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000 \\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200\\277\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_followarcingprojectile_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\016\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\007C\\000\\000 \\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000 \\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_followarcingprojectile_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\016\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\021\\303\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000 \\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_followarcingprojectile_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\016\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\021C\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000 \\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_fortbidle\"",
      "Camera": {
        "NextCamera": "\"fortbidle\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\220A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_fortdeployintro\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\000\\000\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000@\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\0004C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_fortfaint\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000\\240A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\264\\302\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_fortplayerfainted\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\300?\\000\\000\\000@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\300?\\000\\000\\340?\"",
        "AngleDeg": "\"\\000\\000\\264\\302\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_gigadrain\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\005\\014\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\000\\000\\000@\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000 \\302\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000@@\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_gunkshot\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\001\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "TransitionS": "\"\\303\\365\\250>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000@@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_gunkshot_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "TransitionS": "\"\\232\\231\\031>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000 B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_gunkshot_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "TransitionS": "\"\\232\\231\\031>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000 \\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_gunkshot_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\002\\002\\005\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\031>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000*C\\000\\000 C\\000\\000\\014\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_gunkshot_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\037\\205+?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\315\\314L>\"",
        "TransitionS": "\"\\232\\231\\031>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_gymhi\"",
      "Camera": {
        "NextCamera": "\"gymhi\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\360A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_gymlow\"",
      "Camera": {
        "NextCamera": "\"gymlow\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\340@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_gymlowest\"",
      "Camera": {
        "NextCamera": "\"gymlowest\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000@@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_gymmed\"",
      "Camera": {
        "NextCamera": "\"gymmed\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_heartstamp\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\014\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_heatwave\"",
      "Camera": {
        "NextCamera": "\"heatwave_hit\"",
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\232\\231\\231>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\0004\\302\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_heatwave_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_hornattack\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_hornattackenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\0004\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_hurricane\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_hydropump\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\315\\314L>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L>\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\220@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hydropumpenter\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\002\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000`@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200>\\000\\000\\200>\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\r\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200>\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\014\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\014\\303\\000\\000\\360\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperbeam_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\014C\\000\\000\\360B\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperfang\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperfang_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperfang_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperfang_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_hyperfang_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_icebeam\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\001\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\232\\231\\231?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\244p\\275>\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000p@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_icebeam_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000p@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_icebeam_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000p@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_icebeam_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000p@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_icebeam_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000p@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_icepunch\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\007\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314\\314=\"",
        "TransitionS": "\"\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_icepunch_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\007\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000ff\\346>\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_idle\"",
      "Camera": {
        "Interpolation": "\"\\001\\000\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\300@\\000\\000\\000\\000\\000\\000\\300@\\000\\000\\300@\\000\\000\\300@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200@\\000\\000\\000\\000\\000\\000\\200@\\000\\000\\200@\\000\\000\\200@\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\264\\302\\000\\000\\360B\\000\\000\\360\\302\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\310A\\000\\000\\310A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000\\000\\000\\000\\000 @\\000\\000\\300?\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_ironhead\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\232\\231\\031?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ironhead_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ironhead_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ironhead_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ironhead_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_ironheadenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_karatechop\"",
      "Camera": {
        "Interpolation": "\"\\000\\000\\001\"",
        "TargetType": "\"\\014\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_leafblade\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_leafbladeenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_left\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000@@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\264B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_lowsweep\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_magnetbomb\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\014\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"33\\263?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_megadrain\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\005\\014\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\0000C\\000\\000 \\302\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000@@\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_megahorn\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\001\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"33\\223?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_moonblast\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000@?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\301\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\252\\302\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"ff\\346\\277\\000\\000\\200?\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_moonblast_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000@?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\303\\365\\250>\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\014\\303\\000\\000\\360A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\252\\302\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"33s\\300\\000\\000\\200\\277\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_moonblast_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000@?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\303\\365\\250>\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\252\\302\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"33s\\300\\000\\000\\200\\277\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_moonblast_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000@?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\303\\365\\250>\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000\\033\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\252\\302\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"33s\\300\\000\\000\\200?\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_moonblast_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240?\\000\\000@?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\303\\365\\250>\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000p\\301\\000\\000\\033C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\252\\302\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"33s\\300\\000\\000\\200?\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_mudbomb\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_mudbombenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\300?\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_mudshot\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\256Ga?\""
      }
    },
    {
      "TemplateId": "\"camera_nightslash\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\014\\001\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\232\\231\\031?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 \\303\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000@\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_ominouswind\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@@\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_overhead_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000*\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\360A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_overhead_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\360A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_overhead_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000*\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_overhead_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantoattacker_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantoattacker_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantoattacker_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantoattacker_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365(?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantodefender_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantodefender_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantodefender_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantodefender_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_pantofacedefender_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_pantofacedefender_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_pantofacedefender_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_pantofacedefender_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_paraboliccharge\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_paraboliccharge_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_paraboliccharge_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000pA\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_paraboliccharge_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_paraboliccharge_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\300?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_petalblizzard\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000@@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_playrough\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\270\\036\\005>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_playrough_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000pA\\000\\000 A\\000\\000p\\301\\000\\000 \\301\\000\\000 A\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_playrough_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000pA\\000\\000 A\\000\\000p\\301\\000\\000 \\301\\000\\000 A\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_playrough_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000pA\\000\\000 A\\000\\000p\\301\\000\\000 \\301\\000\\000 A\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_playrough_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314L?\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\354Q\\270=\\217\\302\\365=\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000pA\\000\\000 A\\000\\000p\\301\\000\\000 \\301\\000\\000 A\\000\\000\\240@\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\\000\\000\\240?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_playroughenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\270\\036\\005>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200\\276\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_poisonfang\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_poisonjab\"",
      "Camera": {
        "NextCamera": "\"poisonjab_hit\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\232\\231\\271@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\007\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_poisonjab_hit\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\315\\314\\314=\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314=\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\007C\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200>\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_powerwhip\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000@@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\264B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_powerwhip_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\264B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_powerwhip_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\264B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_powerwhip_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\310B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_powerwhip_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240B\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeam\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000*C\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\240@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeamenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\\341zT?\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000%\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\0004B\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeamenter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeamenter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeamenter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\341zT?\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000`@\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psybeamenter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psychic\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"33\\263>\"",
        "AngleDeg": "\"\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\360@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psychicenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000p\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\340?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psychocut\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\014\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\037\\205+?H\\341\\272?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"ff\\346>\\037\\205+?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000`@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock\"",
      "Camera": {
        "NextCamera": "\"psyshock_hit\"",
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000@@\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\277\"",
        "HeightPercent": "\"\\000\\000\\200>\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock_hit\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\0000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\0000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\0000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\0000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psyshock_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\0000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psystrike\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"q=\\352?\\315\\314\\314>\\315\\314\\314?\\315\\314L>\\000\\000\\200?\"",
        "WaitS": "\"\\205\\353\\021?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\024\\256\\007?\\315\\314\\314>\\000\\000\\240?\\315\\314L>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360\\302\\000\\000\\007C\\000\\000 C\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\\000\\000pB\\000\\000pB\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\000\\000\\000\\000@@\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psystrike_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"q=\\352?\\315\\314\\314>\\000\\000\\340?\\232\\231\\031>\\232\\231\\031>\\000\\000\\240@\"",
        "WaitS": "\"\\205\\353\\021?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\\000\\000\\240?\\232\\231\\031>\\232\\231\\031>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360\\302\\000\\000\\007C\\000\\000 C\\000\\000 C\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\\000\\000\\360A\\000\\000\\360A\\000\\000\\360A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\300?\\000\\000\\200@\\000\\000\\300?33\\363?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psystrike_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"q=\\352?\\315\\314\\314>\\000\\000\\340?\\232\\231\\031>\\232\\231\\031>\\000\\000\\240@\"",
        "WaitS": "\"\\205\\353\\021?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\024\\256\\007?\\315\\314\\314>\\000\\000\\240?\\232\\231\\031>\\232\\231\\031>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360B\\000\\000\\007\\303\\000\\000 \\303\\000\\000 \\303\\000\\000 \\303\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\\000\\000\\360A\\000\\000\\360A\\000\\000\\360A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\300?\\000\\000\\200@\\000\\000\\300?33\\363?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psystrike_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"q=\\352?\\315\\314\\314>\\000\\000\\340?\\232\\231\\031>\\232\\231\\031>\\000\\000\\240@\"",
        "WaitS": "\"\\205\\353\\021?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314>\\000\\000\\240?\\232\\231\\031>\\232\\231\\031>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360B\\000\\000\\007\\303\\000\\000 \\303\\000\\000 \\303\\000\\000 \\303\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\\000\\000\\360A\\000\\000\\360A\\000\\000\\360A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\300?\\000\\000\\200@\\000\\000\\300?33\\363?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_psystrike_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\\001\\001\\001\"",
        "TargetType": "\"\\000\\003\\003\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"q=\\352?\\315\\314\\314>\\000\\000\\340?\\232\\231\\031>\\232\\231\\031>\\000\\000\\240@\"",
        "WaitS": "\"\\205\\353\\021?\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\024\\256\\007?\\315\\314\\314>\\000\\000\\240?\\232\\231\\031>\\232\\231\\031>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\360\\302\\000\\000\\007C\\000\\000 C\\000\\000 C\\000\\000 C\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000\\240A\\000\\000\\360A\\000\\000\\360A\\000\\000\\360A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240\\300\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\300?\\000\\000\\200@\\000\\000\\300?33\\363?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_punchhit_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_punchhit_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_punchhit_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_punchhit_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\200\\276\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_quickattacker\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_quickdefender\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000 \\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_quickreturn\"",
      "Camera": {
        "NextCamera": "\"battlewait\"",
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\r\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000?\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_rear\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_rearcut\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_rearcutdefender\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_rockslide\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\000\"",
        "TargetType": "\"\\000\\000\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000\\007\\303\\000\\000\\346\\302\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200?\\000\\000\\200\\276\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_rockthrow\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\\000\\000\\200>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\270\\036\\005>\\000\\000\\200>\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\\000\\000/C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_scald\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\315\\314\\314>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_scaldenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\001\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\232\\231\\331?\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\310\\302\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_seedbomb\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\007\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_seedbombenter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_seedbombenter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_seedbombenter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_seedbombenter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\303\\365\\250>\"",
        "AngleDeg": "\"\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_seedefender\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowball\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000@\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowpunch_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\007\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneak\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\232\\231Y?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneak_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\315\\314\\314>\\232\\231\\231?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\031?\\315\\314\\014?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000@@\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneak_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\315\\314\\314>\\232\\231\\231?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\031?\\315\\314\\014?\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000@@\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000@@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneak_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\315\\314\\314>\\232\\231\\231?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\031?\\315\\314\\014?\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000@@\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneak_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\006\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\315\\314\\314>\\232\\231\\231?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\232\\231\\031?\\315\\314\\014?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000pA\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000@@\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_shadowsneakenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\t\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\310A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_shoot\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\000\\000\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\000@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\0004C\\000\\0004C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000pA\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200\\277\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_signalbeam\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\232\\231Y?\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_signalbeamenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_sludgebomb\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\014C\"",
        "AngleOffsetDeg": "\"\\000\\000@@\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\232\\231Y?\""
      }
    },
    {
      "TemplateId": "\"camera_sludgewave\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeam\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\315\\314\\314?\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314\\254?\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\360B\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeam_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\200>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\002C\\000\\000\\021C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeam_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\200>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\002\\303\\000\\000\\021\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeam_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\200>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\360\\302\\000\\000\\007\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeam_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\200>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "TransitionS": "\"\\000\\000\\200>\\341zT?\"",
        "AngleDeg": "\"\\000\\000\\360B\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\232\\231\\031?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeamenter\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\016\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\037\\205k>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeamenter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\341z\\224?\"",
        "TransitionS": "\"\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeamenter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\341z\\224?\"",
        "TransitionS": "\"\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeamenter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\001\"",
        "TargetType": "\"\\002\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\341z\\224?\"",
        "TransitionS": "\"\\000\\000\\000\\000\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\026C\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\\000\\000\\240\\300\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_solarbeamenter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\002\\002\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"\\303\\365\\250>\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\341z\\224?\"",
        "TransitionS": "\"\\303\\365\\250>\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\026\\303\\000\\000\\026\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240\\300\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_spark\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\000\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>{\\024.>\"",
        "AngleDeg": "\"\\000\\000*\\303\\000\\000 A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_stoneedge\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\014\\014\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"33\\263>\\232\\231\\031>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\240\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200\\277\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_submission\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_suckerpunch\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\014\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000?\\000\\000\\000@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\232\\231\\031>\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_swift\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\200?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"ff\\346>\"",
        "TransitionS": "\"\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000 @\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_tackle\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000@?\\000\\000\\200?\"",
        "WaitS": "\"\\315\\314L>\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000?\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\200>\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_takedown\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"33\\263@\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200?\\000\\000\\300?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunder\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\\001\"",
        "TargetType": "\"\\003\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\\000\\000\\000?\"",
        "DurationS": "\"\\232\\231\\231>33\\363?{\\024\\356?\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\000\\000\\200>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000/C\\000\\000/C\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\014\\302\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\\000\\000\\200@\\000\\000\\300@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunder_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\232\\231\\t@{\\024\\356?\"",
        "WaitS": "\"\\000\\000\\200>\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000\\360A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\014\\302\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000\\300@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunder_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\232\\231\\t@{\\024\\356?\"",
        "WaitS": "\"\\000\\000\\200>\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000 C\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\014\\302\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\200@\\000\\000\\300@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunder_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\232\\231\\t@{\\024\\356?\"",
        "WaitS": "\"\\000\\000\\200>\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000\\033\\303\\000\\000\\033\\303\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\360\\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunder_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\003\\003\"",
        "EaseInSpeed": "\"\\000\\000\\200?\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "DurationS": "\"\\232\\231\\t@{\\024\\356?\"",
        "WaitS": "\"\\000\\000\\200>\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\\315\\314\\314=\"",
        "AngleDeg": "\"\\000\\000\\033C\\000\\000\\033C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\000\\000\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\360\\301\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\\000\\000\\200@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunderbolt\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\004\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\315\\314L>\"",
        "TransitionS": "\"\\000\\000\\000?\"",
        "AngleDeg": "\"\\000\\000\\007C\"",
        "AngleOffsetDeg": "\"\\000\\000\\240@\"",
        "PitchDeg": "\"\\000\\000\\240@\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunderboltenter\"",
      "Camera": {
        "Interpolation": "\"\\000\"",
        "TargetType": "\"\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\031?\"",
        "AngleDeg": "\"\\000\\000\\360\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\240\\300\"",
        "PitchDeg": "\"\\000\\000pA\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"camera_thunderpunch_hit\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\007\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\200?\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\232\\231\\031?\"",
        "TransitionS": "\"\\000\\000\\000\\000\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000?\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\200\\276\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_twister\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\232\\231\\231>\"",
        "AngleDeg": "\"\\000\\000%C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\315\\314L?\""
      }
    },
    {
      "TemplateId": "\"camera_vicegrip\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\"",
        "EaseOutSpeed": "\"\\000\\000\\000\\000\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314L>\"",
        "AngleDeg": "\"\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_watergun\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\\000\"",
        "TargetType": "\"\\000\\001\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\000\\000\\000\\000\\200?\\000\\000\\000\\000\"",
        "AngleDeg": "\"\\000\\000 \\303\\000\\000*\\303\\000\\000 C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000 A\\000\\000\\000\\000\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\315\\314\\314>\\000\\000\\000?33\\263?\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\000?\\000\\000\\000?\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulse\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\003\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000@?\"",
        "AngleDeg": "\"\\000\\000\\026C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000@@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000@?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulseenter\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000?\"",
        "DurationS": "\"333?\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\000\\000\\200?\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulseenter_leader_player_left_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"333?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\\\\\217\\302>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulseenter_leader_player_right_\"",
      "Camera": {
        "Interpolation": "\"\\000\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"333?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\\\\\217\\302>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\310A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulseenter_player_left_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"333?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\\\\\217\\302>\"",
        "AngleDeg": "\"\\000\\000\\240A\\000\\000\\310A\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_waterpulseenter_player_right_leader_\"",
      "Camera": {
        "Interpolation": "\"\\001\\001\"",
        "TargetType": "\"\\006\\006\"",
        "EaseInSpeed": "\"\\000\\000\\000\\000\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\\000\\000\\000\\000\"",
        "DurationS": "\"333?\\000\\000\\240@\"",
        "WaitS": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "TransitionS": "\"\\315\\314\\314>\\\\\\217\\302>\"",
        "AngleDeg": "\"\\000\\000\\240\\301\\000\\000\\310\\301\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000\\240A\\000\\000\\014B\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "HeightPercent": "\"\\000\\000\\000\\000\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\\000\\000\\000?\""
      }
    },
    {
      "TemplateId": "\"camera_xscissor\"",
      "Camera": {
        "Interpolation": "\"\\001\"",
        "TargetType": "\"\\005\"",
        "EaseInSpeed": "\"\\000\\000\\000?\"",
        "EaseOutSpeed": "\"\\000\\000\\000?\"",
        "DurationS": "\"\\000\\000 A\"",
        "WaitS": "\"\\000\\000\\000\\000\"",
        "TransitionS": "\"\\000\\000\\200>\"",
        "AngleDeg": "\"\\000\\000*C\"",
        "AngleOffsetDeg": "\"\\000\\000\\000\\000\"",
        "PitchDeg": "\"\\000\\000 A\"",
        "PitchOffsetDeg": "\"\\000\\000\\000\\000\"",
        "RollDeg": "\"\\000\\000\\000\\000\"",
        "DistanceM": "\"\\000\\000\\000@\"",
        "HeightPercent": "\"\\000\\000\\000\\000\"",
        "VertCtrRatio": "\"\\000\\000\\200?\""
      }
    },
    {
      "TemplateId": "\"incenseordinary.1\"",
      "IapItemDisplay": {
        "Sku": "\"incenseordinary.1\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 7,
        "Items": "\"\\221\\003\"",
        "Counts": "\"\\001\""
      }
    },
    {
      "TemplateId": "\"incenseordinary.4\"",
      "IapItemDisplay": {
        "Sku": "\"incenseordinary.4\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 8,
        "Items": "\"\\221\\003\"",
        "Counts": "\"\\004\""
      }
    },
    {
      "TemplateId": "\"incenseordinary.8\"",
      "IapItemDisplay": {
        "Sku": "\"incenseordinary.8\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 9,
        "Items": "\"\\221\\003\"",
        "Counts": "\"\\010\""
      }
    },
    {
      "TemplateId": "\"incubatorbasic.1\"",
      "IapItemDisplay": {
        "Sku": "\"incubatorbasic.1\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 3,
        "Items": "\"\\206\\007\"",
        "Counts": "\"\\001\""
      }
    },
    {
      "TemplateId": "\"incubatorbasic.100\"",
      "IapItemDisplay": {
        "Sku": "\"incubatorbasic.100\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 10,
        "Items": "\"\\206\\007\"",
        "Counts": "\"d\""
      }
    },
    {
      "TemplateId": "\"itemstorageupgrade.1\"",
      "IapItemDisplay": {
        "Sku": "\"itemstorageupgrade.1\"",
        "Category": "IAP_CATEGORY_UPGRADES",
        "SortOrder": 2,
        "Items": "\"\\352\\007\"",
        "Counts": "\"\\001\""
      }
    },
    {
      "TemplateId": "\"luckyegg.1\"",
      "IapItemDisplay": {
        "Sku": "\"luckyegg.1\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 4,
        "Items": "\"\\255\\002\"",
        "Counts": "\"\\001\""
      }
    },
    {
      "TemplateId": "\"luckyegg.20\"",
      "IapItemDisplay": {
        "Sku": "\"luckyegg.20\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 6,
        "Items": "\"\\255\\002\"",
        "Counts": "\"\\024\""
      }
    },
    {
      "TemplateId": "\"luckyegg.5\"",
      "IapItemDisplay": {
        "Sku": "\"luckyegg.5\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 5,
        "Items": "\"\\255\\002\"",
        "Counts": "\"\\005\""
      }
    },
    {
      "TemplateId": "\"pokeball.100\"",
      "IapItemDisplay": {
        "Sku": "\"pokeball.100\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 2,
        "Items": "\"\\001\"",
        "Counts": "\"d\""
      }
    },
    {
      "TemplateId": "\"pokeball.20\"",
      "IapItemDisplay": {
        "Sku": "\"pokeball.20\"",
        "Category": "IAP_CATEGORY_ITEMS",
        "SortOrder": 1,
        "Items": "\"\\001\"",
        "Counts": "\"\\024\""
      }
    },
    {
      "TemplateId": "\"pokecoin.100\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.100\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 1
      }
    },
    {
      "TemplateId": "\"pokecoin.1000\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.1000\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 1
      }
    },
    {
      "TemplateId": "\"pokecoin.1200\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.1200\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 3
      }
    },
    {
      "TemplateId": "\"pokecoin.14500\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.14500\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 6
      }
    },
    {
      "TemplateId": "\"pokecoin.2500\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.2500\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 4
      }
    },
    {
      "TemplateId": "\"pokecoin.5200\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.5200\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 5
      }
    },
    {
      "TemplateId": "\"pokecoin.550\"",
      "IapItemDisplay": {
        "Sku": "\"pokecoin.550\"",
        "Category": "IAP_CATEGORY_POKECOINS",
        "SortOrder": 2
      }
    },
    {
      "TemplateId": "\"pokemonstorageupgrade.1\"",
      "IapItemDisplay": {
        "Sku": "\"pokemonstorageupgrade.1\"",
        "Category": "IAP_CATEGORY_UPGRADES",
        "SortOrder": 1,
        "Items": "\"\\351\\007\"",
        "Counts": "\"\\001\""
      }
    },
    {
      "TemplateId": "\"sequence_acid_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_aerial_ace\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_air_cutter\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ancient_power\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_aqua_jet\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_aqua_tail\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bite_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_blizzard\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_body_slam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bone_club\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_brick_break\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_brine\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bubble_beam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bubble_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bug_bite_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bug_buzz\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bulldoze\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_bullet_punch_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_confusion_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_cross_chop\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_cross_poison\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_cut_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dark_pulse\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dazzling_gleam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_default\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dig\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_disarming_voice\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_discharge\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dragon_breath_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dragon_claw\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_dragon_pulse\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_draining_kiss\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_drill_peck\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_drill_run\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_earthquake\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ember_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_feint_attack_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_fire_blast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_fire_fang_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_fire_punch\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_flame_burst\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_flame_charge\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_flame_wheel\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_flamethrower\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_flash_cannon\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_frost_breath_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_fury_cutter_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_giga_drain\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_gunk_shot\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_heart_stamp\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_heat_wave\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_horn_attack\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_hurricane\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_hydro_pump\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_hydro_pump_blastoise\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_hyper_beam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_hyper_fang\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ice_beam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ice_punch\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ice_shard_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_icy_wind\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_iron_head\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_karate_chop_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_leaf_blade\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_lick_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_low_kick_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_low_sweep\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_magnet_bomb\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_mega_drain\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_megahorn\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_metal_claw_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_moonblast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_mud_bomb\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_mud_shot_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_mud_slap_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_night_slash\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_ominous_wind\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_parabolic_charge\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_peck_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_petal_blizzard\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_play_rough\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_poison_fang\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_poison_jab_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_poison_sting_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_pound_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_power_gem\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_power_whip\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_psybeam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_psychic\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_psycho_cut_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_psyshock\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_psystrike\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_quick_attack_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_razor_leaf_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_rest\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_rock_slide\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_rock_smash_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_rock_throw_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_rock_tomb\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_scald\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_scald_blastoise\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_scratch_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seed_bomb\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_ding\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_faint\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_fort_faint\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_intro\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_outro\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_seq_return\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_shadow_ball\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_shadow_claw_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_shadow_punch\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_shadow_sneak\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_signal_beam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_sludge\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_sludge_bomb\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_sludge_wave\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_solar_beam\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_spark_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_splash_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_steel_wing_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_stomp\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_stone_edge\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_struggle\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_submission\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_sucker_punch_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_swift\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_tackle_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_thunder\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_thunder_punch\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_thunder_shock_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_thunderbolt\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_twister\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_vice_grip\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_vine_whip_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_water_gun_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_water_gun_fast_blastoise\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_water_pulse\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_wing_attack_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_wrap\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_wrap_green\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_wrap_pink\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_x_scissor\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    },
    {
      "TemplateId": "\"sequence_zen_headbutt_fast\"",
      "MoveSequence": {
        "Sequence": "\"sys complete\""
      }
    }
  ]
}
},{}],2:[function(require,module,exports){
/*eslint-disable no-unused-vars*/
/*!
 * jQuery JavaScript Library v3.1.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-07-07T21:44Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.0
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-04
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true;
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {
	// Known :disabled false positives:
	// IE: *[disabled]:not(button, input, select, textarea, optgroup, option, menuitem, fieldset)
	// not IE: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Check form elements and option elements for explicit disabling
		return "label" in elem && elem.disabled === disabled ||
			"form" in elem && elem.disabled === disabled ||

			// Check non-disabled form elements for fieldset[disabled] ancestors
			"form" in elem && elem.disabled === false && (
				// Support: IE6-11+
				// Ancestry is covered for us
				elem.isDisabled === disabled ||

				// Otherwise, assume any non-<option> under fieldset[disabled] is disabled
				/* jshint -W018 */
				elem.isDisabled !== !disabled &&
					("label" in elem || !disabledAncestor( elem )) !== disabled
			);
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnotwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? JSON.parse( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) ),
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support: IE <=9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox <=42
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			return ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		opt.duration = typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in uncached url if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rts, "" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}





var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}


return jQuery;
} );

},{}],3:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash <https://lodash.com/>
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.13.1';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256,
      FLIP_FLAG = 512;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match non-compound words composed of alphanumeric characters. */
  var reBasicWord = /[a-zA-Z0-9]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0x/i;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
      rsComboSymbolsRange = '\\u20d0-\\u20f0',
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reComplexWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
    rsUpper + '+' + rsOptUpperContr,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(typeof self == 'object' && self);

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(typeof this == 'object' && this);

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `Map#set` because it doesn't return the map instance in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    var length = args.length;
    switch (length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array ? array.length : 0;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array ? array.length : 0,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to search.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array ? array.length : 0;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing wrapper metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a cache value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        result++;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    if (!(string && reHasComplexSymbol.test(string))) {
      return string.length;
    }
    var result = reComplexSymbol.lastIndex = 0;
    while (reComplexSymbol.test(string)) {
      result++;
    }
    return result;
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return string.match(reComplexSymbol);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Use `context` to stub `Date#getTime` use in `_.now`.
   * var stubbed = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': stubGetTime };
   *   }
   * });
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;

    /** Built-in constructor references. */
    var Date = context.Date,
        Error = context.Error,
        Math = context.Math,
        RegExp = context.RegExp,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = context.Array.prototype,
        objectProto = context.Object.prototype,
        stringProto = context.String.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = context.Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Reflect = context.Reflect,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        enumerate = Reflect ? Reflect.enumerate : undefined,
        getOwnPropertySymbols = Object.getOwnPropertySymbols,
        iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined,
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice;

    /** Built-in method references that are mockable. */
    var setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetPrototype = Object.getPrototypeOf,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = Object.keys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReplace = stringProto.replace,
        nativeReverse = arrayProto.reverse,
        nativeSplit = stringProto.split;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array of at least `200` elements
     * and any iteratees accept only one argument. The heuristic for whether a
     * section qualifies for shortcut fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `divide`, `each`,
     * `eachRight`, `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`,
     * `findIndex`, `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`,
     * `floor`, `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`,
     * `forOwnRight`, `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`,
     * `includes`, `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`,
     * `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`, `isBoolean`,
     * `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isEqualWith`,
     * `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`, `isMap`,
     * `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
          (arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values ? values.length : 0;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      return this.__data__['delete'](key);
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
        cache = this.__data__ = new MapCache(cache.__data__);
      }
      cache.set(key, value);
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function assignInDefaults(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (typeof key == 'number' && value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to search.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths of elements to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          isNil = object == null,
          length = paths.length,
          result = Array(length);

      while (++index < length) {
        result[index] = isNil ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {boolean} [isFull] Specify a clone including symbols.
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          if (isHostObject(value)) {
            return object ? value : {};
          }
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (!isArr) {
        var props = isFull ? getAllKeys(value) : keys(value);
      }
      // Recursively populate clone (susceptible to call stack limits).
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source),
          length = props.length;

      return function(object) {
        if (object == null) {
          return !length;
        }
        var index = length;
        while (index--) {
          var key = props[index],
              predicate = source[key],
              value = object[key];

          if ((value === undefined &&
              !(key in Object(object))) || !predicate(value)) {
            return false;
          }
        }
        return true;
      };
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(proto) {
      return isObject(proto) ? objectCreate(proto) : {};
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an array
     * of `func` arguments.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments to provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
      // that are composed entirely of index properties, return `false` for
      // `hasOwnProperty` checks of them.
      return object != null &&
        (hasOwnProperty.call(object, key) ||
          (typeof object == 'object' && key in object && getPrototype(object) === null));
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      if (!isKey(path, object)) {
        path = castPath(path);
        object = parent(object, path);
        path = last(path);
      }
      var func = object == null ? object : object[toKey(path)];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {boolean} [bitmask] The bitmask of comparison flags.
     *  The bitmask may be composed of the following flags:
     *     1 - Unordered comparison
     *     2 - Partial comparison
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object),
          othIsObj = othTag == objectTag && !isHostObject(other),
          isSameTag = objTag == othTag;

      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      return nativeKeys(Object(object));
    }

    /**
     * The base implementation of `_.keysIn` which doesn't skip the constructor
     * property of prototypes or treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      object = object == null ? object : Object(object);

      var result = [];
      for (var key in object) {
        result.push(key);
      }
      return result;
    }

    // Fallback for IE < 9 with es6-shim.
    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
      baseKeysIn = function(object) {
        return iteratorToArray(enumerate(object));
      };
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments to numbers.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      if (!(isArray(source) || isTypedArray(source))) {
        var props = keysIn(source);
      }
      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      });
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        newValue = srcValue;
        if (isArray(srcValue) || isTypedArray(srcValue)) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            isCommon = false;
            newValue = baseClone(srcValue, true);
          }
          else {
            newValue = objValue;
          }
        }
        else {
          isCommon = false;
        }
      }
      stack.set(srcValue, newValue);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      }
      stack['delete'](srcValue);
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce `n` to an integer.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property identifiers to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, props) {
      object = Object(object);
      return arrayReduce(props, function(result, key) {
        if (key in object) {
          result[key] = object[key];
        }
        return result;
      }, {});
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, predicate) {
      var index = -1,
          props = getAllKeysIn(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          }
          else if (!isKey(index, array)) {
            var path = castPath(index),
                object = parent(array, path);

            if (object != null) {
              delete object[toKey(last(path))];
            }
          }
          else {
            delete array[toKey(index)];
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments to numbers.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]);
        if (isObject(nested)) {
          var newValue = value;
          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = objValue == null
                ? (isIndex(path[index + 1]) ? [] : {})
                : objValue;
            }
          }
          assignValue(nested, key, newValue);
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      object = parent(object, path);

      var key = toKey(last(path));
      return !(object != null && baseHas(object, key)) || delete object[key];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var index = -1,
          length = arrays.length;

      while (++index < length) {
        var result = result
          ? arrayPush(
              baseDifference(result, arrays[index], iteratee, comparator),
              baseDifference(arrays[index], result, iteratee, comparator)
            )
          : arrays[index];
      }
      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var result = new buffer.constructor(buffer.length);
      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : source[key];

        assignValue(object, key, newValue);
      }
      return object;
    }

    /**
     * Copies own symbol properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return rest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
     *  for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBaseWrapper(func, bitmask, thisArg) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = reHasComplexSymbol.test(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
     *  for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurryWrapper(func, bitmask, arity) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        predicate = getIteratee(predicate, 3);
        if (!isArrayLike(collection)) {
          var props = keys(collection);
        }
        var index = findIndexFunc(props || collection, function(value, key) {
          if (props) {
            key = value;
            value = iterable[key];
          }
          return predicate(value, key, iterable);
        }, fromIndex);
        return index > -1 ? collection[props ? props[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return rest(function(funcs) {
        funcs = baseFlatten(funcs, 1);

        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 &&
              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
     *  for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
          isFlip = bitmask & FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurryWrapper(
            func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return 0;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return rest(function(iteratees) {
        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), baseUnary(getIteratee()));

        return rest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return reHasComplexSymbol.test(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
     *  for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toNumber(start);
        start = start === start ? start : 0;
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toNumber(end) || 0;
        }
        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper`
     *  for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

      if (!(bitmask & CURRY_BOUND_FLAG)) {
        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return result;
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask of wrapper flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     *   512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] == null
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == BIND_FLAG) {
        var result = createBaseWrapper(func, bitmask, thisArg);
      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
        result = createCurryWrapper(func, bitmask, arity);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
        result = createPartialWrapper(func, bitmask, thisArg, partials);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

      stack.set(array, other);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!seen.has(othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                  return seen.add(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, customizer, bitmask, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and
          // booleans to `1` or `0` treating invalid dates coerced to `NaN` as
          // not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object) ? other != +other : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);

          // Recursively compare objects (susceptible to call stack limits).
          return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} customizer The function to customize comparisons.
     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
     *  for more details.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
          objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : baseHas(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      return result;
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a
     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
     * Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Gets the `[[Prototype]]` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {null|Object} Returns the `[[Prototype]]`.
     */
    function getPrototype(value) {
      return nativeGetPrototype(Object(value));
    }

    /**
     * Creates an array of the own enumerable symbol properties of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    function getSymbols(object) {
      // Coerce `object` to an object to avoid non-object errors in V8.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
      return getOwnPropertySymbols(Object(object));
    }

    // Fallback for IE < 11.
    if (!getOwnPropertySymbols) {
      getSymbols = stubArray;
    }

    /**
     * Creates an array of the own and inherited enumerable symbol properties
     * of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function getTag(value) {
      return objectToString.call(value);
    }

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge, and promises in Node.js.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = objectToString.call(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : undefined;

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);

      var result,
          index = -1,
          length = path.length;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isString(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Creates an array of index keys for `object` values of arrays,
     * `arguments` objects, and strings, otherwise `null` is returned.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array|null} Returns index keys, else `null`.
     */
    function indexKeys(object) {
      var length = object ? object.length : undefined;
      if (isLength(length) &&
          (isArray(object) || isString(object) || isArguments(object))) {
        return baseTimes(length, String);
      }
      return null;
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value);
    }

    /**
     * Checks if `value` is a flattenable array and not a `_.matchesProperty`
     * iteratee shorthand.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenableIteratee(value) {
      return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);

      var isCombo =
        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
      }
      return objValue;
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      var result = [];
      toString(string).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array ? array.length : 0;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length,
          args = Array(length ? length - 1 : 0),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return length
        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
        : [];
    }

    /**
     * Creates an array of unique `array` values not included in the other given
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = rest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. Result values
     * are chosen from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = rest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs ? pairs.length : 0,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. The order of result values is determined by the
     * order they occur in the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = rest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. Result values are chosen from the first array.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = rest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. Result values are chosen
     * from the first array. The comparator is invoked with two arguments:
     * (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = rest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (comparator === last(mapped)) {
        comparator = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array ? nativeJoin.call(array, separator) : '';
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = (
          index < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1)
        ) + 1;
      }
      if (value !== value) {
        return indexOfNaN(array, index - 1, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = rest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = rest(function(array, indexes) {
      indexes = baseFlatten(indexes, 1);

      var length = array ? array.length : 0,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array ? nativeReverse.call(array) : array;
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array ? array.length : 0;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = rest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each
     * element is kept.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length)
        ? baseUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length)
        ? baseUniq(array, getIteratee(iteratee))
        : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      return (array && array.length)
        ? baseUniq(array, undefined, comparator)
        : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = rest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = rest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = rest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The comparator is invoked with
     * two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = rest(function(arrays) {
      var comparator = last(arrays);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = rest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = rest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = rest(function(paths) {
      paths = baseFlatten(paths, 1);
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _([1, 2]).forEach(function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function, it's
     * invoked for and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = rest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getIteratee(predicate, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var array = isArrayLike(collection) ? collection : values(collection),
          length = array.length;

      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = baseClamp(toInteger(n), 0, length);
      }
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sampleSize(collection, MAX_ARRAY_LENGTH);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        var result = collection.length;
        return (result && isString(collection)) ? stringSize(collection) : result;
      }
      if (isObjectLike(collection)) {
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
      }
      return keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
     *  [iteratees=[_.identity]] The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, function(o) { return o.user; });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     *
     * _.sortBy(users, 'user', function(o) {
     *   return Math.floor(o.age / 10);
     * });
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    var sortBy = rest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
        ? iteratees[0]
        : baseFlatten(iteratees, 1, isFlattenableIteratee);

      return baseOrderBy(collection, iteratees, []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    function now() {
      return Date.now();
    }

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = rest(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = rest(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide an options object to indicate whether `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent calls
     * to the debounced function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one or more milliseconds.
     */
    var defer = rest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = rest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrapper(func, FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with arguments transformed by
     * corresponding `transforms`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
     *  [transforms[_.identity]] The functions to transform.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = rest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return rest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = rest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = rest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = rest(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, array);
          case 1: return func.call(this, args[0], array);
          case 2: return func.call(this, args[0], args[1], array);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
      return rest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide an options object to indicate whether
     * `func` should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return partial(wrapper, value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, false, true);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      return baseClone(value, false, true, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, true, true);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      return baseClone(value, true, true, customizer);
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @type {Function}
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    function isArrayBuffer(value) {
      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
    }

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value)) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && objectToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = !Buffer ? stubFalse : function(value) {
      return value instanceof Buffer;
    };

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objectToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element,
     *  else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (isArrayLike(value) &&
          (isArray(value) || isString(value) || isFunction(value.splice) ||
            isArguments(value) || isBuffer(value))) {
        return !value.length;
      }
      if (isObjectLike(value)) {
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return !(nonEnumShadows && keys(value).length);
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are **not** supported.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent,
     *  else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object,
     *  else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      return (objectToString.call(value) == errorTag) ||
        (typeof value.message == 'string' && typeof value.name == 'string');
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number,
     *  else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8 which returns 'object' for typed array and weak map constructors,
      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
      var tag = isObject(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length,
     *  else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    function isMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values. This method is
     * equivalent to a `_.matches` function when `source` is partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the
     * presence of the `core-js` package because `core-js` circumvents this kind
     * of detection. Despite multiple requests, the `core-js` maintainer has made
     * it clear: any attempt to fix the detection will be obstructed. As a result,
     * we're left with little choice but to throw an error. Unfortunately, this
     * also affects packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on `core-js`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error('This method is not supported with `core-js`. Try https://github.com/es-shims.');
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && objectToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object,
     *  else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) ||
          objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return (typeof Ctor == 'function' &&
        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objectToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer,
     *  else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    function isSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified,
     *  else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (iteratorSymbol && value[iteratorSymbol]) {
        return iteratorToArray(value[iteratorSymbol]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = isFunction(value.valueOf) ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.c = 3;
     * }
     *
     * function Bar() {
     *   this.e = 5;
     * }
     *
     * Foo.prototype.d = 4;
     * Bar.prototype.f = 6;
     *
     * _.assign({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3, 'e': 5 }
     */
    var assign = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * function Bar() {
     *   this.d = 4;
     * }
     *
     * Foo.prototype.c = 3;
     * Bar.prototype.e = 5;
     *
     * _.assignIn({ 'a': 1 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
     */
    var assignIn = createAssigner(function(object, source) {
      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keysIn(source), object);
        return;
      }
      for (var key in source) {
        assignValue(object, key, source[key]);
      }
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths of elements to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = rest(function(object, paths) {
      return baseAt(object, baseFlatten(paths, 1));
    });

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = rest(function(args) {
      args.push(undefined, assignInDefaults);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = rest(function(args) {
      args.push(undefined, mergeDefaults);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to search.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = rest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      var isProto = isPrototype(object);
      if (!(isProto || isArrayLike(object))) {
        return baseKeys(object);
      }
      var indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      for (var key in object) {
        if (baseHas(object, key) &&
            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(isProto && key == 'constructor')) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      var index = -1,
          isProto = isPrototype(object),
          props = baseKeysIn(object),
          propsLength = props.length,
          indexes = indexKeys(object),
          skipIndexes = !!indexes,
          result = indexes || [],
          length = result.length;

      while (++index < propsLength) {
        var key = props[index];
        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[iteratee(value, key, object)] = value;
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with seven arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable string keyed properties of `object` that are
     * not omitted.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = rest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      predicate = getIteratee(predicate);
      return basePickBy(object, function(value, key) {
        return !predicate(value, key);
      });
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [props] The property identifiers to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = rest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Array|Function|Object|string} [predicate=_.identity]
     *  The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      return object == null ? {} : basePickBy(object, getIteratee(predicate));
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        object = undefined;
        length = 1;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getIteratee(iteratee, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toNumber(start) || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toNumber(end) || 0;
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toNumber(lower) || 0;
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toNumber(upper) || 0;
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in IE < 9, they can break out of
     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the
     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = toString(string).replace(reTrim, '');
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (separator == '' && reHasComplexSymbol.test(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return nativeSplit.call(string, separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = baseClamp(toInteger(position), 0, string.length);
      return string.lastIndexOf(baseToString(target), position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, assignInDefaults);

      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (reHasComplexSymbol.test(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = rest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['onClick']);
     * jQuery(element).on('click', view.onClick);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = rest(function(object, methodNames) {
      arrayEach(baseFlatten(methodNames, 1), function(key) {
        key = toKey(key);
        object[key] = bind(object[key], object);
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.constant(true),                _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs ? pairs.length : 0,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return rest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.filter(users, _.conforms({ 'age': function(n) { return n > 38; } }));
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, true));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] Functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument given to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`. The created function is equivalent to
     * `_.isMatch` with a `source` partially applied.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** This method supports comparing the same values as `_.isEqual`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = rest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = rest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * A method that returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return rest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
     *  [iteratees=[_.identity]] The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
     *  [predicates=[_.identity]] The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}
     *  [predicates=[_.identity]] The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * A method that returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * A method that returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * A method that returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * A method that returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * A method that returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    });

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    });

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    });

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    });

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity]
     *  The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.deburr = deburr;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = rest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      predicate = getIteratee(predicate, 3);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    if (iteratorSymbol) {
      lodash.prototype[iteratorSymbol] = wrapperToIterator;
    }
    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Expose Lodash on the free variable `window` or `self` when available so it's
  // globally accessible, even when bundled with Browserify, Webpack, etc. This
  // also prevents errors in cases where Lodash is loaded by a script tag in the
  // presence of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch
  // for more details. Use `_.noConflict` to remove Lodash from the global object.
  (freeSelf || {})._ = _;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _master = require("../../../assets/master.json");

var _master2 = _interopRequireDefault(_master);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var groupedAssets = _.chain(_master2.default.Items).map(function (item) {
  var keys = Object.keys(item);
  var itemType = keys.find(function (k) {
    return k !== "TemplateId";
  });
  return {
    type: itemType,
    id: item.TemplateId,
    data: item[itemType]
  };
}).groupBy("type").value();

console.log(groupedAssets);
exports.default = groupedAssets;

},{"../../../assets/master.json":1}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _grouped = require("./grouped");

var _grouped2 = _interopRequireDefault(_grouped);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Move = _grouped2.default.Move;


var moves = Move.map(function (move) {
  var numericId = move.id.substring(1, move.id.length - 1);
  numericId = numericId.split("_");
  numericId = parseInt(numericId[0].substring(1));

  return Object.assign(move, {
    numericId: numericId
  });
});

console.log(moves);
exports.default = moves;

},{"./grouped":4}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _grouped = require("./grouped");

var _grouped2 = _interopRequireDefault(_grouped);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Pokemon = _grouped2.default.Pokemon;


function getBasicPokeInfo(poke) {
  var _poke$id$split = poke.id.split("_");

  var _poke$id$split2 = _slicedToArray(_poke$id$split, 3);

  var id = _poke$id$split2[0];
  var type = _poke$id$split2[1];
  var name = _poke$id$split2[2];

  return {
    id: id.substring(1, id.length),
    dexNumber: id.toLowerCase().substring(3, id.length),
    name: name.toLowerCase().substring(0, name.length - 1)
  };
}

var pokemon = Pokemon.map(function (poke) {
  return Object.assign(poke, getBasicPokeInfo(poke));
});

console.log(pokemon);
exports.default = pokemon;

},{"./grouped":4}],7:[function(require,module,exports){
"use strict";

require("./pokemon.view");

},{"./pokemon.view":9}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (poke) {
  return "\n  <div class=\"pokemon\" data-id=\"" + poke.id + "\" data-name=\"" + poke.name + "\" data-id=\"" + poke.id + "\">\n    <div class=\"pokemon__sprite\">\n      <img class=\"u-sprite\" src=\"./assets/sprites/" + poke.dexNumber + ".png\" />\n    </div>\n    <div class=\"pokemon__name\">\n      <span class=\"u-title\">" + poke.name + "</span>\n    </div>\n  </div>\n";
};

},{}],9:[function(require,module,exports){
"use strict";

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _jquery = require("jquery");

var _jquery2 = _interopRequireDefault(_jquery);

var _pokedex = require("./dex/pokedex");

var _pokedex2 = _interopRequireDefault(_pokedex);

var _pokemon = require("./pokemon.template");

var _pokemon2 = _interopRequireDefault(_pokemon);

var _template = require("./popover/template");

var _template2 = _interopRequireDefault(_template);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $pokemonList = (0, _jquery2.default)(".pokemon-list");

var html = _pokedex2.default.map(function (poke) {
  return (0, _pokemon2.default)(poke);
});
html.forEach(function (item) {
  var li = document.createElement("li");
  li.innerHTML = item;
  $pokemonList.append(li);
});

$pokemonList.on("click", ".pokemon", function (e) {
  var id = (0, _jquery2.default)(e.currentTarget).data("id");
  var poke = _pokedex2.default.find(function (p) {
    return p.id === id;
  });
  (0, _jquery2.default)((0, _template2.default)(poke)).appendTo("body");
  (0, _jquery2.default)("body").css("overflow", "hidden");
});

(0, _jquery2.default)("body").on("click", ".js-close", function () {
  (0, _jquery2.default)(".pokemon-popover, .overlay").remove();
  (0, _jquery2.default)("body").css("overflow", "auto");
});

},{"./dex/pokedex":6,"./pokemon.template":8,"./popover/template":10,"jquery":2,"lodash":3}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _variables = require("../variables");

exports.default = function (poke) {
  return "\n  <div class=\"pokemon-popover\">\n    <div class=\"pokemon-popover__sprite\">\n      <img class=\"u-sprite\" src=\"./assets/sprites/" + poke.dexNumber + ".png\" />\n    </div>\n\n    <div class=\"pokemon-popover__body\">\n      <div class=\"js-close pokemon-popover__close\">X</div>\n      <div class=\"pokemon-popover__name\">\n        <span class=\"u-title\">" + poke.name + "</span>\n      </div>\n\n\n      <div class=\"pokemon-popover__basic-stats\">\n        <ul class=\"u-horizonal-list\">\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + (poke.data.Type2 ? (0, _variables.transformType)(poke.data.Type1) + "/" + (0, _variables.transformType)(poke.data.Type2) : (0, _variables.transformType)(poke.data.Type1)) + "</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Type</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.PokedexWeightKg + "kg</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Avg Weight</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.PokedexHeightM + "m</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Avg Height</span>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"pokemon-popover__stats\">\n        <ul class=\"u-horizonal-list\">\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.Stats.BaseAttack + "</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Base Attack</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.Stats.BaseDefense + "</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Base Defence</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.Stats.BaseStamina + "</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Base Stamina</span>\n          </li>\n        </ul>\n      </div>\n\n      <div class=\"pokemon-popover__evolutions\">\n        <ul class=\"u-horizonal-list\">\n          " + (0, _variables.getEvoChain)(poke).map(function (evo) {
    return "\n            <li " + (evo.data.CandyToEvolve ? "data-candy=\"" + evo.data.CandyToEvolve + "\"" : "") + ">\n              <img class=\"u-sprite\" data-scale=\"" + evo.data.ModelScale + "%\" src=\"./assets/sprites/" + evo.dexNumber + ".png\" />\n            </li>\n          ";
  }).join("") + "\n        </ul>\n      </div>\n\n      <div class=\"pokemon-popover__moveset\">\n        <ul>\n          " + (0, _variables.getMoveSet)(poke).map(function (move) {
    return "\n            <li class=\"u-move\">\n              <div class=\"move__details\">\n                <div class=\"move__name\">" + move.data.VfxName.split("_").join(" ").substring(1, move.data.VfxName.length - 1).replace("fast", "") + "</div>\n                <div class=\"move__type\">" + (0, _variables.transformType)(move.data.Type) + "</div>\n              </div>\n              <div class=\"move__charge\">" + energyUsage(move.data.EnergyDelta) + "</div>\n              <div class=\"move__power\">" + move.data.Power + "</div>\n            </li>\n          ";
  }).join("") + "\n          " + (0, _variables.getSpecialMoveSet)(poke).map(function (move) {
    return "\n            <li class=\"u-move\">\n              <div class=\"move__details\">\n                <div class=\"move__name\">" + move.data.VfxName.split("_").join(" ").substring(1, move.data.VfxName.length - 1).replace("fast", "") + "</div>\n                <div class=\"move__type\">" + (0, _variables.transformType)(move.data.Type) + "</div>\n              </div>\n              <div class=\"move__charge\">" + energyUsage(move.data.EnergyDelta) + "</div>\n              <div class=\"move__power\">" + move.data.Power + "</div>\n            </li>\n          ";
  }).join("") + "\n        </ul>\n      </div>\n\n      <div class=\"pokemon-popover__encounter\">\n        <ul>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + (poke.data.Encounter.BaseCaptureRate || 0) + "</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Base Capture rate</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + Math.round(poke.data.Encounter.BaseFleeRate * 100) + "%</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Flee chance</span>\n          </li>\n          <li class=\"pokemon-popover__basic-stat\">\n            <span class=\"pokemon-popover__basic-stat-value\">" + poke.data.Encounter.MovementTimerS + " secs</span>\n            <span class=\"pokemon-popover__basic-stat-label\">Dodge interval</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n  <div class=\"overlay\"></div>\n";
};

function energyUsage(energy) {
  var out = "";
  var num = Math.round(100 / Math.abs(energy));
  while (num > 0) {
    out = out + ("<span class=\"energy-usage " + (energy > 0 ? "energy-usage--replenish" : "") + "\"></span>");
    num--;
  }
  return out;
}

},{"../variables":11}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformType = transformType;
exports.getEvoChain = getEvoChain;
exports.getMoveSet = getMoveSet;
exports.getSpecialMoveSet = getSpecialMoveSet;

var _pokedex = require("./dex/pokedex");

var _pokedex2 = _interopRequireDefault(_pokedex);

var _movedex = require("./dex/movedex");

var _movedex2 = _interopRequireDefault(_movedex);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformType(typeStr) {
  return typeStr.match("POKEMON_TYPE_(.*)")[1].toLowerCase();
}

function getEvoChain(poke) {
  var family = _pokedex2.default.filter(function (p) {
    return p.data.FamilyId === poke.data.FamilyId;
  });
  return _lodash2.default.sortBy(family, function (p) {
    return parseInt(p.dexNumber);
  }, 10);
}

function getMoveSet(poke) {
  var movesOct = poke.data.QuickMoves;
  var movesOctArr = movesOct.substring(1, movesOct.length - 1).split("\\001");
  var movesIntArr = movesOctArr.map(function (oct) {
    return parseInt(oct.substring(1), 8);
  }).filter(function (i) {
    return !isNaN(i);
  });
  return _lodash2.default.chain(movesIntArr).map(function (int) {
    return _movedex2.default.find(function (m) {
      return m.numericId === int;
    });
  }).sortBy("data.Power").value();
}

function getSpecialMoveSet(poke) {
  var specialMoves = [];
  var specialMovesStr = poke.data.CinematicMoves;
  specialMovesStr = specialMovesStr.substring(1, specialMovesStr.length - 1);
  var specialMovesFromOct = specialMovesStr.match(/(\\.{3})/g);
  if (specialMovesFromOct) {
    specialMovesFromOct.forEach(function (moveOct) {
      specialMovesStr = specialMovesStr.replace(moveOct, "");
      var move = _movedex2.default.find(function (m) {
        return m.numericId === parseInt(moveOct.substring(1), 8);
      });
      specialMoves.push(move);
    });
  }
  specialMovesStr.split("").forEach(function (s) {
    specialMoves.push(_movedex2.default.find(function (m) {
      return m.numericId === s.charCodeAt(0);
    }));
  });
  return _lodash2.default.chain(specialMoves).filter(function (specialMoves) {
    return specialMoves;
  }).sortBy(specialMoves, "data.Power").reverse().value();
}

},{"./dex/movedex":5,"./dex/pokedex":6,"lodash":3}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
console.error("SyntaxError: /Users/james/work/pokemongo/src/js/index.js: Unexpected token (10:2) while parsing file: /Users/james/work/pokemongo/src/js/index.js");
>>>>>>> converted to react
